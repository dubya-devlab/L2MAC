[{"id": "chatcmpl-81pYesnwcCVZocUDE59OgdzZyWsuQ", "object": "chat.completion", "created": 1695447208, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask-login\\nflask-sqlalchemy\\nflask-wtf\\nflask-bcrypt\\nflask-mail\\nwerkzeug\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app/__init__.py\",\n      \"file_contents\": \"from flask import Flask\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_login import LoginManager\\nfrom flask_bcrypt import Bcrypt\\nfrom flask_mail import Mail\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'your-secret-key'\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\\ndb = SQLAlchemy(app)\\nbcrypt = Bcrypt(app)\\nlogin_manager = LoginManager(app)\\nlogin_manager.login_view = 'login'\\nlogin_manager.login_message_category = 'info'\\nmail = Mail(app)\\n\\nfrom app import routes\"\n    },\n    {\n      \"file_path\": \"app/models.py\",\n      \"file_contents\": \"from datetime import datetime\\nfrom app import db, login_manager\\nfrom flask_login import UserMixin\\n\\n@login_manager.user_loader\\ndef load_user(user_id):\\n\\treturn User.query.get(int(user_id))\\n\\nclass User(db.Model, UserMixin):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(20), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\timage_file = db.Column(db.String(20), nullable=False, default='default.jpg')\\n\\tpassword = db.Column(db.String(60), nullable=False)\\n\\tfiles = db.relationship('File', backref='owner', lazy=True)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn f\\\"User('{self.username}', '{self.email}', '{self.image_file}')\\\"\\n\\nclass File(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tfilename = db.Column(db.String(100), nullable=False)\\n\\tdate_posted = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn f\\\"File('{self.filename}', '{self.date_posted}')\\\"\"\n    },\n    {\n      \"file_path\": \"app/routes.py\",\n      \"file_contents\": \"from flask import render_template, url_for, flash, redirect, request, abort\\nfrom app import app, db, bcrypt, mail\\nfrom app.forms import (RegistrationForm, LoginForm, UpdateAccountForm,\\n                       RequestResetForm, ResetPasswordForm)\\nfrom app.models import User, File\\nfrom flask_login import login_user, current_user, logout_user, login_required\\nfrom flask_mail import Message\\n\\n@app.route(\\\"/\\\")\\n@app.route(\\\"/home\\\")\\ndef home():\\n\\treturn render_template('home.html')\\n\\n@app.route(\\\"/register\\\", methods=['GET', 'POST'])\\ndef register():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = RegistrationForm()\\n\\tif form.validate_on_submit():\\n\\t\\thashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')\\n\\t\\tuser = User(username=form.username.data, email=form.email.data, password=hashed_password)\\n\\t\\tdb.session.add(user)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your account has been created! You are now able to log in', 'success')\\n\\t\\treturn redirect(url_for('login'))\\n\\treturn render_template('register.html', title='Register', form=form)\\n\\n@app.route(\\\"/login\\\", methods=['GET', 'POST'])\\ndef login():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = LoginForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User.query.filter_by(email=form.email.data).first()\\n\\t\\tif user and bcrypt.check_password_hash(user.password, form.password.data):\\n\\t\\t\\tlogin_user(user, remember=form.remember.data)\\n\\t\\t\\tnext_page = request.args.get('next')\\n\\t\\t\\treturn redirect(next_page) if next_page else redirect(url_for('home'))\\n\\t\\telse:\\n\\t\\t\\tflash('Login Unsuccessful. Please check email and password', 'danger')\\n\\treturn render_template('login.html', title='Login', form=form)\\n\\n@app.route(\\\"/logout\\\")\\ndef logout():\\n\\tlogout_user()\\n\\treturn redirect(url_for('home'))\\n\\n@app.route(\\\"/account\\\", methods=['GET', 'POST'])\\n@login_required\\ndef account():\\n\\tform = UpdateAccountForm()\\n\\tif form.validate_on_submit():\\n\\t\\tif form.picture.data:\\n\\t\\t\\tpicture_file = save_picture(form.picture.data)\\n\\t\\t\\tcurrent_user.image_file = picture_file\\n\\t\\tcurrent_user.username = form.username.data\\n\\t\\tcurrent_user.email = form.email.data\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your account has been updated!', 'success')\\n\\t\\treturn redirect(url_for('account'))\\n\\telif request.method == 'GET':\\n\\t\\tform.username.data = current_user.username\\n\\t\\tform.email.data = current_user.email\\n\\timage_file = url_for('static', filename='profile_pics/' + current_user.image_file)\\n\\treturn render_template('account.html', title='Account',\\n\\t                       image_file=image_file, form=form)\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1223, "prompt_tokens": 1552, "total_tokens": 2775}}]