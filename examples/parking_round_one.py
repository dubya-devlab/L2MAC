file_dict = {'vehicle.py': ['1: from enum import Enum', '2: ', '3: class VehicleSize(Enum):', '4:     MOTORCYCLE = 1', '5:     COMPACT = 2', '6:     LARGE = 3', '7: ', '8: class Vehicle:', '9:     def __init__(self, license_plate: str, size: VehicleSize):', '10:         self.license_plate = license_plate', '11:         self.size = size', '12: ', '13:     def get_size(self):', '14:         return self.size', '15: ', '16: class Motorcycle(Vehicle):', '17:     def __init__(self, license_plate: str):', '18:         super().__init__(license_plate, VehicleSize.MOTORCYCLE)', '19: ', '20: class Car(Vehicle):', '21:     def __init__(self, license_plate: str):', '22:         super().__init__(license_plate, VehicleSize.COMPACT)', '23: ', '24: class Bus(Vehicle):', '25:     def __init__(self, license_plate: str):', '26:         super().__init__(license_plate, VehicleSize.LARGE)'], 'parking_spot.py': ['1: from vehicle import Vehicle, VehicleSize', '2: ', '3: class ParkingSpot:', '4:     def __init__(self, spot_number: str, level: int):', '5:         self.spot_number = spot_number', '6:         self.level = level', '7:         self.vehicle = None', '8: ', '9:     def is_free(self):', '10:         return self.vehicle is None', '11: ', '12:     def park(self, vehicle: Vehicle):', '13:         if self.is_free():', '14:             self.vehicle = vehicle', '15:             return True', '16:         return False', '17: ', '18:     def remove_vehicle(self):', '19:         self.vehicle = None', '20: ', '21: class MotorcycleSpot(ParkingSpot):', '22:     def __init__(self, spot_number: str, level: int):', '23:         super().__init__(spot_number, level)', '24:         self.size = VehicleSize.MOTORCYCLE', '25: ', '26: class CompactSpot(ParkingSpot):', '27:     def __init__(self, spot_number: str, level: int):', '28:         super().__init__(spot_number, level)', '29:         self.size = VehicleSize.COMPACT', '30: ', '31: class LargeSpot(ParkingSpot):', '32:     def __init__(self, spot_number: str, level: int):', '33:         super().__init__(spot_number, level)', '34:         self.size = VehicleSize.LARGE'], 'level.py': ['1: from typing import List', '2: from vehicle import Vehicle', '3: from parking_spot import ParkingSpot, MotorcycleSpot, CompactSpot, LargeSpot', '4: ', '5: class Level:', '6:     def __init__(self, num_spots: dict):', '7:         self.spots = []', '8:         self.available_spots = num_spots', '9:         for spot_type, num in num_spots.items():', '10:             for i in range(num):', "11:                 if spot_type == 'MotorcycleSpot':", '12:                     self.spots.append(MotorcycleSpot(str(i), 1))', "13:                 elif spot_type == 'CompactSpot':", '14:                     self.spots.append(CompactSpot(str(i), 1))', "15:                 elif spot_type == 'LargeSpot':", '16:                     self.spots.append(LargeSpot(str(i), 1))', '17: ', '18:     def park_vehicle(self, vehicle: Vehicle):', '19:         for spot in self.spots:', '20:             if spot.park(vehicle):', '21:                 self.available_spots[type(spot).__name__] -= 1', '22:                 return True', '23:         return False', '24: ', '25:     def remove_vehicle(self, vehicle: Vehicle):', '26:         for spot in self.spots:', '27:             if spot.vehicle == vehicle:', '28:                 spot.remove_vehicle()', '29:                 self.available_spots[type(spot).__name__] += 1', '30:                 return True', '31:         return False', '32: ', '33:     def find_spot(self, vehicle: Vehicle):', '34:         for spot in self.spots:', '35:             if spot.is_free() and spot.size == vehicle.get_size():', '36:                 return spot', '37:         return None'], 'parking_lot.py': ['1: from typing import List', '2: from vehicle import Vehicle', '3: from level import Level', '4: ', '5: class ParkingLot:', '6:     def __init__(self, num_levels: int, num_spots: dict):', '7:         self.levels = [Level(num_spots) for _ in range(num_levels)]', '8: ', '9:     def park_vehicle(self, vehicle: Vehicle):', '10:         for level in self.levels:', '11:             if level.park_vehicle(vehicle):', '12:                 return True', '13:         return False', '14: ', '15:     def remove_vehicle(self, vehicle: Vehicle):', '16:         for level in self.levels:', '17:             if level.remove_vehicle(vehicle):', '18:                 return True', '19:         return False'], 'test_parking_lot.py': ['1: import pytest', '2: from vehicle import VehicleSize, Vehicle, Motorcycle, Car, Bus', '3: from parking_spot import ParkingSpot, MotorcycleSpot, CompactSpot, LargeSpot', '4: from level import Level', '5: from parking_lot import ParkingLot', '6: ', '7: def test_vehicle():', "8:     vehicle = Vehicle('123', VehicleSize.COMPACT)", "9:     assert vehicle.license_plate == '123'", '10:     assert vehicle.size == VehicleSize.COMPACT', '11: ', '12: def test_motorcycle():', "13:     motorcycle = Motorcycle('123')", "14:     assert motorcycle.license_plate == '123'", '15:     assert motorcycle.size == VehicleSize.MOTORCYCLE', '16: ', '17: def test_car():', "18:     car = Car('123')", "19:     assert car.license_plate == '123'", '20:     assert car.size == VehicleSize.COMPACT', '21: ', '22: def test_bus():', "23:     bus = Bus('123')", "24:     assert bus.license_plate == '123'", '25:     assert bus.size == VehicleSize.LARGE', '26: ', '27: def test_parking_spot():', "28:     spot = ParkingSpot('1', 1)", "29:     assert spot.spot_number == '1'", '30:     assert spot.level == 1', '31:     assert spot.is_free()', '32: ', '33: def test_motorcycle_spot():', "34:     spot = MotorcycleSpot('1', 1)", "35:     assert spot.spot_number == '1'", '36:     assert spot.level == 1', '37:     assert spot.size == VehicleSize.MOTORCYCLE', '38: ', '39: def test_compact_spot():', "40:     spot = CompactSpot('1', 1)", "41:     assert spot.spot_number == '1'", '42:     assert spot.level == 1', '43:     assert spot.size == VehicleSize.COMPACT', '44: ', '45: def test_large_spot():', "46:     spot = LargeSpot('1', 1)", "47:     assert spot.spot_number == '1'", '48:     assert spot.level == 1', '49:     assert spot.size == VehicleSize.LARGE', '50: ', '51: def test_level():', "52:     level = Level({'MotorcycleSpot': 10, 'CompactSpot': 10, 'LargeSpot': 10})", '53:     assert len(level.spots) == 30', "54:     assert level.available_spots == {'MotorcycleSpot': 10, 'CompactSpot': 10, 'LargeSpot': 10}", '55: ', '56: def test_parking_lot():', "57:     lot = ParkingLot(3, {'MotorcycleSpot': 10, 'CompactSpot': 10, 'LargeSpot': 10})", '58:     assert len(lot.levels) == 3', '59: import pytest', '60: from unittest.mock import patch, call', '61: from main import main', '62: ', "63: @patch('builtins.print')", '64: def test_main(mock_print):', '65:     main()', '66:     expected_calls = [', "67:         call('Parked vehicle M1'),", "68:         call('Parked vehicle M2'),", "69:         call('Parked vehicle C1'),", "70:         call('Parked vehicle C2'),", "71:         call('Failed to park vehicle B1'),", '72:         call(\'Level 1 free spots: {"MotorcycleSpot": 8, "CompactSpot": 8, "LargeSpot": 10}\'),', '73:         call(\'Level 2 free spots: {"MotorcycleSpot": 10, "CompactSpot": 10, "LargeSpot": 10}\'),', '74:         call(\'Level 3 free spots: {"MotorcycleSpot": 10, "CompactSpot": 10, "LargeSpot": 10}\'),', "75:         call('Removed vehicle M1'),", "76:         call('Removed vehicle C1'),", "77:         call('Failed to remove vehicle B1'),", '78:         call(\'Level 1 free spots: {"MotorcycleSpot": 9, "CompactSpot": 9, "LargeSpot": 10}\'),', '79:         call(\'Level 2 free spots: {"MotorcycleSpot": 10, "CompactSpot": 10, "LargeSpot": 10}\'),', '80:         call(\'Level 3 free spots: {"MotorcycleSpot": 10, "CompactSpot": 10, "LargeSpot": 10}\')', '81:     ]', '82:     mock_print.assert_has_calls(expected_calls, any_order=False)'], 'main.py': ['1: from parking_lot import ParkingLot', '2: from vehicle import Motorcycle, Car, Bus', '3: ', '4: def main():', "5:     parking_lot = ParkingLot(3, {'MotorcycleSpot': 10, 'CompactSpot': 10, 'LargeSpot': 10})", "6:     motorcycle1 = Motorcycle('M1')", "7:     motorcycle2 = Motorcycle('M2')", "8:     car1 = Car('C1')", "9:     car2 = Car('C2')", "10:     bus1 = Bus('B1')", '11:     for vehicle in [motorcycle1, motorcycle2, car1, car2, bus1]:', '12:         if parking_lot.park_vehicle(vehicle):', "13:             print(f'Parked vehicle {vehicle.license_plate}')", '14:         else:', "15:             print(f'Failed to park vehicle {vehicle.license_plate}')", '16:     for i, level in enumerate(parking_lot.levels):', "17:         print(f'Level {i+1} free spots: {level.available_spots}')", '18:     for vehicle in [motorcycle1, car1, bus1]:', '19:         if parking_lot.remove_vehicle(vehicle):', "20:             print(f'Removed vehicle {vehicle.license_plate}')", '21:         else:', "22:             print(f'Failed to remove vehicle {vehicle.license_plate}')", '23:     for i, level in enumerate(parking_lot.levels):', "24:         print(f'Level {i+1} free spots: {level.available_spots}')", '25: ', "26: if __name__ == '__main__':", '27:     main()']}