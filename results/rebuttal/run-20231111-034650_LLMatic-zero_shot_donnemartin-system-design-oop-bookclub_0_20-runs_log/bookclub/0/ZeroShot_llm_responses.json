[{"id": "chatcmpl-8JZPrFtoYL1xsmobyJqrM7Vl61R8i", "object": "chat.completion", "created": 1699675063, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDATABASE = {\\n\\t'users': {},\\n\\t'clubs': {},\\n\\t'books': {},\\n\\t'discussions': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\temail: str\\n\\tclubs: list\\n\\tbooks_read: list\\n\\twish_list: list\\n\\tfollows: list\\n\\n@dataclass\\nclass Club:\\n\\tid: str\\n\\tname: str\\n\\tdescription: str\\n\\tmembers: list\\n\\tbooks: list\\n\\tmeetings: list\\n\\tis_private: bool\\n\\n@dataclass\\nclass Book:\\n\\tid: str\\n\\ttitle: str\\n\\tauthor: str\\n\\tsummary: str\\n\\n@dataclass\\nclass Discussion:\\n\\tid: str\\n\\tclub_id: str\\n\\tbook_id: str\\n\\tcomments: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDATABASE['users'][user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/club', methods=['POST'])\\ndef create_club():\\n\\tdata = request.get_json()\\n\\tclub = Club(**data)\\n\\tDATABASE['clubs'][club.id] = club\\n\\treturn jsonify(club), 201\\n\\n@app.route('/book', methods=['POST'])\\ndef create_book():\\n\\tdata = request.get_json()\\n\\tbook = Book(**data)\\n\\tDATABASE['books'][book.id] = book\\n\\treturn jsonify(book), 201\\n\\n@app.route('/discussion', methods=['POST'])\\ndef create_discussion():\\n\\tdata = request.get_json()\\n\\tdiscussion = Discussion(**data)\\n\\tDATABASE['discussions'][discussion.id] = discussion\\n\\treturn jsonify(discussion), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test User',\\n\\t\\t'email': 'test@example.com',\\n\\t\\t'clubs': [],\\n\\t\\t'books_read': [],\\n\\t\\t'wish_list': [],\\n\\t\\t'follows': []\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['name'] == 'Test User'\\n\\n\\ndef test_create_club(client):\\n\\tresponse = client.post('/club', json={\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test Club',\\n\\t\\t'description': 'This is a test club.',\\n\\t\\t'members': [],\\n\\t\\t'books': [],\\n\\t\\t'meetings': [],\\n\\t\\t'is_private': False\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['name'] == 'Test Club'\\n\\n\\ndef test_create_book(client):\\n\\tresponse = client.post('/book', json={\\n\\t\\t'id': '1',\\n\\t\\t'title': 'Test Book',\\n\\t\\t'author': 'Test Author',\\n\\t\\t'summary': 'This is a test book.'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['title'] == 'Test Book'\\n\\n\\ndef test_create_discussion(client):\\n\\tresponse = client.post('/discussion', json={\\n\\t\\t'id': '1',\\n\\t\\t'club_id': '1',\\n\\t\\t'book_id': '1',\\n\\t\\t'comments': []\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['id'] == '1'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1727, "completion_tokens": 959, "total_tokens": 2686}}]