[{"id": "chatcmpl-8JaZ7tC4wIIAfOB2e3O4qWbMDEVsl", "object": "chat.completion", "created": 1699679481, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tid = len(DB) + 1\\n\\tevent = Event(id, data['type'], data['date'], data['time'], data['theme'], data['color_scheme'])\\n\\tDB[id] = event\\n\\treturn jsonify({'id': id}), 201\\n\\n@app.route('/event/<int:id>', methods=['GET'])\\ndef get_event(id):\\n\\tevent = DB.get(id)\\n\\tif event is None:\\n\\t\\treturn jsonify({'error': 'Event not found'}), 404\\n\\treturn jsonify(event.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': 1}\\n\\n\\ndef test_get_event(client):\\n\\tapp.DB[1] = Event(1, 'Birthday', '2022-12-12', '18:00', 'Space', 'Blue')\\n\\tresponse = client.get('/event/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'}\\n\\n\\ndef test_get_event_not_found(client):\\n\\tresponse = client.get('/event/1')\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'error': 'Event not found'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1794, "completion_tokens": 582, "total_tokens": 2376}}]