[{"id": "chatcmpl-8Jki2ORrXmLx2jEx8y8C12tOGGcXn", "object": "chat.completion", "created": 1699718474, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\treviews: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\trecipes[recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\n@app.route('/recipe/<recipe_id>', methods=['GET'])\\ndef get_recipe(recipe_id):\\n\\trecipe = recipes.get(recipe_id)\\n\\tif recipe is None:\\n\\t\\treturn jsonify({'message': 'Recipe not found'}), 404\\n\\treturn jsonify(recipe), 200\\n\\n@app.route('/recipe/<recipe_id>', methods=['DELETE'])\\ndef delete_recipe(recipe_id):\\n\\trecipe = recipes.pop(recipe_id, None)\\n\\tif recipe is None:\\n\\t\\treturn jsonify({'message': 'Recipe not found'}), 404\\n\\treturn jsonify({'message': 'Recipe deleted'}), 200\\n\\n@app.route('/recipe/<recipe_id>', methods=['PUT'])\\ndef update_recipe(recipe_id):\\n\\tdata = request.get_json()\\n\\trecipe = recipes.get(recipe_id)\\n\\tif recipe is None:\\n\\t\\treturn jsonify({'message': 'Recipe not found'}), 404\\n\\trecipe.name = data.get('name', recipe.name)\\n\\trecipe.ingredients = data.get('ingredients', recipe.ingredients)\\n\\trecipe.instructions = data.get('instructions', recipe.instructions)\\n\\trecipe.images = data.get('images', recipe.images)\\n\\trecipe.categories = data.get('categories', recipe.categories)\\n\\treturn jsonify(recipe), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []}\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []}\\n\\ndef test_get_recipe(client):\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []})\\n\\tresponse = client.get('/recipe/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []}\\n\\ndef test_delete_recipe(client):\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []})\\n\\tresponse = client.delete('/recipe/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe deleted'}\\n\\ndef test_update_recipe(client):\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []})\\n\\tresponse = client.put('/recipe/1', json={'name': 'Updated Recipe'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'id': '1', 'name': 'Updated Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1639, "completion_tokens": 1099, "total_tokens": 2738}}]