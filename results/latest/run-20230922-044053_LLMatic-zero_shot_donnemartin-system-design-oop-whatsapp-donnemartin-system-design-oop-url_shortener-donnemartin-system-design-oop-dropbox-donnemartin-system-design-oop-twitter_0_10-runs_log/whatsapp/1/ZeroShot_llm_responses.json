[{"id": "chatcmpl-81X2ObPFMjQTJYOzPSAJpqWcCi6Hk", "object": "chat.completion", "created": 1695376016, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_socketio\\nflask_sqlalchemy\\nflask_login\\nflask_wtf\\nflask_migrate\\nemail_validator\\npasslib\\npyjwt\\npillow\\nemoji\\n\"\n    },\n    {\n      \"file_path\": \"app/__init__.py\",\n      \"file_contents\": \"from flask import Flask\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_login import LoginManager\\nfrom flask_migrate import Migrate\\nfrom flask_socketio import SocketIO\\n\\napp = Flask(__name__)\\napp.config.from_object('config')\\n\\ndb = SQLAlchemy(app)\\nmigrate = Migrate(app, db)\\nlogin = LoginManager(app)\\nlogin.login_view = 'login'\\nsocketio = SocketIO(app)\\n\\nfrom app import routes, models, errors\"\n    },\n    {\n      \"file_path\": \"app/models.py\",\n      \"file_contents\": \"from datetime import datetime\\nfrom app import db, login\\nfrom flask_login import UserMixin\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nfrom hashlib import md5\\n\\n\\nclass User(UserMixin, db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\temail = db.Column(db.String(120), index=True, unique=True)\\n\\tpassword_hash = db.Column(db.String(128))\\n\\tlast_seen = db.Column(db.DateTime, default=datetime.utcnow)\\n\\tstatus = db.Column(db.String(140))\\n\\tprofile_pic = db.Column(db.String(20), default='default.jpg')\\n\\tmessages_sent = db.relationship('Message', foreign_keys='Message.sender_id', backref='author', lazy='dynamic')\\n\\tmessages_received = db.relationship('Message', foreign_keys='Message.recipient_id', backref='recipient', lazy='dynamic')\\n\\tlast_message_read_time = db.Column(db.DateTime)\\n\\n\\tdef set_password(self, password):\\n\\t\\tself.password_hash = generate_password_hash(password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password_hash, password)\\n\\n\\tdef avatar(self, size):\\n\\t\\tdigest = md5(self.email.lower().encode('utf-8')).hexdigest()\\n\\t\\treturn 'https://www.gravatar.com/avatar/{}?d=identicon&s={}'.format(digest, size)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '<User {}>'.format(self.username)\\n\\n\\n@login.user_loader\\ndef load_user(id):\\n\\treturn User.query.get(int(id))\\n\\n\\nclass Message(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tsender_id = db.Column(db.Integer, db.ForeignKey('user.id'))\\n\\trecipient_id = db.Column(db.Integer, db.ForeignKey('user.id'))\\n\\tbody = db.Column(db.String(140))\\n\\timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)\\n\\tstatus = db.Column(db.String(10), default='unread')\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '<Message {}>'.format(self.body)\"\n    },\n    {\n      \"file_path\": \"app/routes.py\",\n      \"file_contents\": \"from flask import render_template, flash, redirect, url_for, request\\nfrom app import app, db, login\\nfrom app.forms import LoginForm, RegistrationForm, EditProfileForm, MessageForm\\nfrom flask_login import current_user, login_user, logout_user, login_required\\nfrom app.models import User, Message\\nfrom datetime import datetime\\n\\n\\n@app.route('/', methods=['GET', 'POST'])\\n@app.route('/index', methods=['GET', 'POST'])\\n@login_required\\ndef index():\\n\\tform = MessageForm()\\n\\tif form.validate_on_submit():\\n\\t\\tmsg = Message(body=form.message.data, author=current_user)\\n\\t\\tdb.session.add(msg)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your message is now live!')\\n\\t\\treturn redirect(url_for('index'))\\n\\tmessages = current_user.messages_received.order_by(Message.timestamp.desc())\\n\\treturn render_template('index.html', title='Home', form=form, messages=messages)\\n\\n\\n@app.route('/login', methods=['GET', 'POST'])\\ndef login():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('index'))\\n\\tform = LoginForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User.query.filter_by(email=form.email.data).first()\\n\\t\\tif user is None or not user.check_password(form.password.data):\\n\\t\\t\\tflash('Invalid email or password')\\n\\t\\t\\treturn redirect(url_for('login'))\\n\\t\\tlogin_user(user, remember=form.remember_me.data)\\n\\t\\tnext_page = request.args.get('next')\\n\\t\\tif not next_page or url_parse(next_page).netloc != '':\\n\\t\\t\\tnext_page = url_for('index')\\n\\t\\treturn redirect(next_page)\\n\\treturn render_template('login.html', title='Sign In', form=form)\\n\\n\\n@app.route('/logout')\\ndef logout():\\n\\tlogout_user()\\n\\treturn redirect(url_for('index'))\\n\\n\\n@app.route('/register', methods=['GET', 'POST'])\\ndef register():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('index'))\\n\\tform = RegistrationForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User(email=form.email.data)\\n\\t\\tuser.set_password(form.password.data)\\n\\t\\tdb.session.add(user)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Congratulations, you are now a registered user!')\\n\\t\\treturn redirect(url_for('login'))\\n\\treturn render_template('register.html', title='Register', form=form)\\n\\n\\n@app.route('/user/<email>')\\n@login_required\\ndef user(email):\\n\\tuser = User.query.filter_by(email=email).first_or_404()\\n\\tmessages = user.messages_received.order_by(Message.timestamp.desc())\\n\\treturn render_template('user.html', user=user, messages=messages)\\n\\n\\n@app.before_request\\ndef before_request():\\n\\tif current_user.is_authenticated:\\n\\t\\tcurrent_user.last_seen = datetime.utcnow()\\n\\t\\tdb.session.commit()\\n\\n\\n@app.route('/edit_profile', methods=['GET', 'POST'])\\n@login_required\\ndef edit_profile():\\n\\tform = EditProfileForm(current_user.email)\\n\\tif form.validate_on_submit():\\n\\t\\tcurrent_user.email = form.email.data\\n\\t\\tcurrent_user.about_me = form.about_me.data\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your changes have been saved.')\\n\\t\\treturn redirect(url_for('edit_profile'))\\n\\telif request.method == 'GET':\\n\\t\\tform.email.data = current_user.email\\n\\t\\tform.about_me.data = current_user.about_me\\n\\treturn render_template('edit_profile.html', title='Edit Profile', form=form)\"\n    },\n    {\n      \"file_path\": \"app/forms.py\",\n      \"file_contents\": \"from flask_wtf import FlaskForm\\nfrom wtforms import StringField, PasswordField, BooleanField, SubmitField, TextAreaField\\nfrom wtforms.validators import ValidationError, DataRequired, Email, EqualTo, Length\\nfrom app.models import User\\n\\n\\nclass LoginForm(FlaskForm):\\n\\temail = StringField('Email', validators=[DataRequired(), Email()])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tremember_me = BooleanField('Remember Me')\\n\\tsubmit = SubmitField('Sign In')\\n\\n\\nclass RegistrationForm(FlaskForm):\\n\\temail = StringField('Email', validators=[DataRequired(), Email()])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tpassword2 = PasswordField('Repeat Password', validators=[DataRequired(), EqualTo('password')])\\n\\tsubmit = SubmitField('Register')\\n\\n\\tdef validate_email(self, email):\\n\\t\\tuser = User.query.filter_by(email=email.data).first()\\n\\t\\tif user is not None:\\n\\t\\t\\traise ValidationError('Please use a different email address.')\\n\\n\\nclass EditProfileForm(FlaskForm):\\n\\temail = StringField('Email', validators=[DataRequired(), Email()])\\n\\tabout_me = TextAreaField('About me', validators=[Length(min=0, max=140)])\\n\\tsubmit = SubmitField('Submit')\\n\\n\\tdef __init__(self, original_email, *args, **kwargs):\\n\\t\\tsuper(EditProfileForm, self).__init__(*args, **kwargs)\\n\\t\\tself.original_email = original_email\\n\\n\\tdef validate_email(self, email):\\n\\t\\tif email.data != self.original_email:\\n\\t\\t\\tuser = User.query.filter_by(email=self.email.data).first()\\n\\t\\t\\tif user is not None:\\n\\t\\t\\t\\traise ValidationError('Please use a different email address.')\\n\\n\\nclass MessageForm(FlaskForm):\\n\\tmessage = TextAreaField('Message', validators=[DataRequired(), Length(min=0, max=140)])\\n\\tsubmit = SubmitField('Submit')\"\n    },\n    {\n      \"file_path\": \"app/errors.py\",\n      \"file_contents\": \"from flask import render_template\\nfrom app import app, db\\n\\n\\n@app.errorhandler(404)\\ndef not_found_error(error):\\n\\treturn render_template('404.html'), 404\\n\\n\\n@app.errorhandler(500)\\ndef internal_error(error):\\n\\tdb.session.rollback()\\n\\treturn render_template('500.html'), 500\"\n    },\n    {\n      \"file_path\": \"config.py\",\n      \"file_contents\": \"import os\\n\\nbasedir = os.path.abspath(os.path.dirname(__file__))\\n\\n\\nclass Config(object):\\n\\tSECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'\\n\\tSQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \\\\\\n\\t\\t'sqlite:///' + os.path.join(basedir, 'app.db')\\n\\tSQLALCHEMY_TRACK_MODIFICATIONS = False\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 2220, "prompt_tokens": 1430, "total_tokens": 3650}}]