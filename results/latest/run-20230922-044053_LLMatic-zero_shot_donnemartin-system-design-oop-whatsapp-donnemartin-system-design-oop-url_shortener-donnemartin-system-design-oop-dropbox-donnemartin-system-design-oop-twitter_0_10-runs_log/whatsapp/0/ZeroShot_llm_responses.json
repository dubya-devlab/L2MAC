[{"id": "chatcmpl-81UfjcDNxN4p3UeIQcqBw4GyXfeLh", "object": "chat.completion", "created": 1695366923, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_socketio\\nflask_sqlalchemy\\nflask_login\\nflask_wtf\\nflask_migrate\\nemail_validator\\npasslib\\npyjwt\\npillow\\nemoji\\n\"\n    },\n    {\n      \"file_path\": \"app/__init__.py\",\n      \"file_contents\": \"from flask import Flask\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_login import LoginManager\\nfrom flask_socketio import SocketIO\\n\\napp = Flask(__name__)\\napp.config.from_object('config')\\ndb = SQLAlchemy(app)\\nlogin_manager = LoginManager(app)\\nsocketio = SocketIO(app)\\n\\nfrom app import views, models\"\n    },\n    {\n      \"file_path\": \"app/models.py\",\n      \"file_contents\": \"from app import db, login_manager\\nfrom flask_login import UserMixin\\nfrom passlib.hash import pbkdf2_sha256\\nfrom datetime import datetime\\n\\n\\nclass User(UserMixin, db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\tlast_seen = db.Column(db.DateTime, default=datetime.utcnow)\\n\\tprofile_picture = db.Column(db.String(20), nullable=False, default='default.jpg')\\n\\tstatus_message = db.Column(db.String(120), nullable=True)\\n\\tprivacy_settings = db.Column(db.String(20), nullable=False, default='public')\\n\\n\\tdef set_password(self, password):\\n\\t\\tself.password = pbkdf2_sha256.hash(password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn pbkdf2_sha256.verify(password, self.password)\\n\\n@login_manager.user_loader\\ndef load_user(user_id):\\n\\treturn User.query.get(int(user_id))\"\n    },\n    {\n      \"file_path\": \"app/views.py\",\n      \"file_contents\": \"from flask import render_template, url_for, flash, redirect, request\\nfrom app import app, db, bcrypt\\nfrom app.forms import RegistrationForm, LoginForm\\nfrom app.models import User\\nfrom flask_login import login_user, current_user, logout_user, login_required\\n\\n\\n@app.route('/')\\n@app.route('/home')\\ndef home():\\n\\treturn render_template('home.html')\\n\\n@app.route('/register', methods=['GET', 'POST'])\\ndef register():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = RegistrationForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User(email=form.email.data)\\n\\t\\tuser.set_password(form.password.data)\\n\\t\\tdb.session.add(user)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your account has been created! You are now able to log in', 'success')\\n\\t\\treturn redirect(url_for('login'))\\n\\treturn render_template('register.html', title='Register', form=form)\\n\\n@app.route('/login', methods=['GET', 'POST'])\\ndef login():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = LoginForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User.query.filter_by(email=form.email.data).first()\\n\\t\\tif user and user.check_password(form.password.data):\\n\\t\\t\\tlogin_user(user, remember=form.remember.data)\\n\\t\\t\\treturn redirect(url_for('home'))\\n\\t\\telse:\\n\\t\\t\\tflash('Login Unsuccessful. Please check email and password', 'danger')\\n\\treturn render_template('login.html', title='Login', form=form)\"\n    },\n    {\n      \"file_path\": \"app/forms.py\",\n      \"file_contents\": \"from flask_wtf import FlaskForm\\nfrom wtforms import StringField, PasswordField, SubmitField, BooleanField\\nfrom wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError\\nfrom app.models import User\\n\\n\\nclass RegistrationForm(FlaskForm):\\n\\temail = StringField('Email', validators=[DataRequired(), Email()])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tconfirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\\n\\tsubmit = SubmitField('Sign Up')\\n\\n\\tdef validate_email(self, email):\\n\\t\\tuser = User.query.filter_by(email=email.data).first()\\n\\t\\tif user:\\n\\t\\t\\traise ValidationError('That email is taken. Please choose a different one.')\\n\\nclass LoginForm(FlaskForm):\\n\\temail = StringField('Email', validators=[DataRequired(), Email()])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tremember = BooleanField('Remember Me')\\n\\tsubmit = SubmitField('Login')\"\n    },\n    {\n      \"file_path\": \"config.py\",\n      \"file_contents\": \"import os\\n\\nBASEDIR = os.path.abspath(os.path.dirname(__file__))\\n\\nSQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(BASEDIR, 'app.db')\\nSQLALCHEMY_TRACK_MODIFICATIONS = False\\nSECRET_KEY = 'you-will-never-guess'\"\n    },\n    {\n      \"file_path\": \"run.py\",\n      \"file_contents\": \"from app import app, socketio\\n\\nif __name__ == '__main__':\\n\\tsocketio.run(app)\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1201, "prompt_tokens": 1430, "total_tokens": 2631}}]