[{"id": "chatcmpl-81VDtUpkeEq1Qttog9n2SCrk1G7gX", "object": "chat.completion", "created": 1695369041, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_login\\nflask_wtf\\nwtforms\\nrequests\\ngeopy\\npytest\\n\"\n    },\n    {\n      \"file_path\": \"app/__init__.py\",\n      \"file_contents\": \"from flask import Flask\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_login import LoginManager\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'your-secret-key'\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\\ndb = SQLAlchemy(app)\\nlogin_manager = LoginManager(app)\\n\\nfrom app import routes\"\n    },\n    {\n      \"file_path\": \"app/models.py\",\n      \"file_contents\": \"from datetime import datetime\\nfrom app import db, login_manager\\nfrom flask_login import UserMixin\\n\\n@login_manager.user_loader\\ndef load_user(user_id):\\n\\treturn User.query.get(int(user_id))\\n\\nclass User(db.Model, UserMixin):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(20), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(60), nullable=False)\\n\\turls = db.relationship('Url', backref='owner', lazy=True)\\n\\nclass Url(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\toriginal_url = db.Column(db.String(500), nullable=False)\\n\\tshort_url = db.Column(db.String(20), unique=True, nullable=False)\\n\\tclicks = db.Column(db.Integer, default=0)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\tclicks_data = db.relationship('Click', backref='url', lazy=True)\\n\\nclass Click(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\ttimestamp = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\\n\\tlocation = db.Column(db.String(100), nullable=False)\\n\\turl_id = db.Column(db.Integer, db.ForeignKey('url.id'), nullable=False)\"\n    },\n    {\n      \"file_path\": \"app/forms.py\",\n      \"file_contents\": \"from flask_wtf import FlaskForm\\nfrom wtforms import StringField, PasswordField, SubmitField\\nfrom wtforms.validators import DataRequired, Length, EqualTo, ValidationError\\nfrom app.models import User\\n\\nclass RegistrationForm(FlaskForm):\\n\\tusername = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tconfirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\\n\\tsubmit = SubmitField('Sign Up')\\n\\n\\tdef validate_username(self, username):\\n\\t\\tuser = User.query.filter_by(username=username.data).first()\\n\\t\\tif user:\\n\\t\\t\\traise ValidationError('That username is taken. Please choose a different one.')\\n\\nclass LoginForm(FlaskForm):\\n\\tusername = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tsubmit = SubmitField('Login')\\n\\nclass UrlForm(FlaskForm):\\n\\toriginal_url = StringField('Original URL', validators=[DataRequired()])\\n\\tshort_url = StringField('Short URL', validators=[Length(max=20)])\\n\\tsubmit = SubmitField('Shorten')\"\n    },\n    {\n      \"file_path\": \"app/routes.py\",\n      \"file_contents\": \"from flask import render_template, url_for, flash, redirect, request\\nfrom app import app, db\\nfrom app.forms import RegistrationForm, LoginForm, UrlForm\\nfrom app.models import User, Url, Click\\nfrom flask_login import login_user, current_user, logout_user, login_required\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nimport requests\\nfrom geopy.geocoders import Nominatim\\nimport string\\nimport random\\n\\n@app.route('/', methods=['GET', 'POST'])\\ndef home():\\n\\tform = UrlForm()\\n\\tif form.validate_on_submit():\\n\\t\\toriginal_url = form.original_url.data\\n\\t\\tshort_url = form.short_url.data\\n\\t\\tif not short_url:\\n\\t\\t\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=6))\\n\\t\\tnew_url = Url(original_url=original_url, short_url=short_url, owner=current_user)\\n\\t\\tdb.session.add(new_url)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your URL has been shortened!', 'success')\\n\\t\\treturn redirect(url_for('home'))\\n\\treturn render_template('home.html', title='Home', form=form)\\n\\n@app.route('/register', methods=['GET', 'POST'])\\ndef register():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = RegistrationForm()\\n\\tif form.validate_on_submit():\\n\\t\\thashed_password = generate_password_hash(form.password.data)\\n\\t\\tuser = User(username=form.username.data, password=hashed_password)\\n\\t\\tdb.session.add(user)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your account has been created! You are now able to log in', 'success')\\n\\t\\treturn redirect(url_for('login'))\\n\\treturn render_template('register.html', title='Register', form=form)\\n\\n@app.route('/login', methods=['GET', 'POST'])\\ndef login():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = LoginForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User.query.filter_by(username=form.username.data).first()\\n\\t\\tif user and check_password_hash(user.password, form.password.data):\\n\\t\\t\\tlogin_user(user)\\n\\t\\t\\treturn redirect(url_for('home'))\\n\\t\\telse:\\n\\t\\t\\tflash('Login Unsuccessful. Please check username and password', 'danger')\\n\\treturn render_template('login.html', title='Login', form=form)\\n\\n@app.route('/logout')\\ndef logout():\\n\\tlogout_user()\\n\\treturn redirect(url_for('home'))\\n\\n@app.route('/<short_url>')\\ndef redirect_to_url(short_url):\\n\\turl = Url.query.filter_by(short_url=short_url).first_or_404()\\n\\turl.clicks += 1\\n\\tdb.session.commit()\\n\\tgeolocator = Nominatim(user_agent='url_shortener')\\n\\tlocation = geolocator.geocode(request.remote_addr)\\n\\tclick = Click(location=location, url=url)\\n\\tdb.session.add(click)\\n\\tdb.session.commit()\\n\\treturn redirect(url.original_url)\\n\\n@app.route('/dashboard')\\n@login_required\\ndef dashboard():\\n\\turls = Url.query.filter_by(owner=current_user)\\n\\treturn render_template('dashboard.html', title='Dashboard', urls=urls)\"\n    },\n    {\n      \"file_path\": \"app/templates/home.html\",\n      \"file_contents\": \"{% extends 'layout.html' %}\\n{% block content %}\\n\\t<div class='content-section'>\\n\\t\\t<form method='POST'>\\n\\t\\t\\t{{ form.hidden_tag() }}\\n\\t\\t\\t<fieldset class='form-group'>\\n\\t\\t\\t\\t{{ form.original_url.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.original_url(class='form-control form-control-lg') }}\\n\\t\\t\\t\\t{{ form.short_url.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.short_url(class='form-control form-control-lg') }}\\n\\t\\t\\t</fieldset>\\n\\t\\t\\t<div class='form-group'>\\n\\t\\t\\t\\t{{ form.submit(class='btn btn-outline-info') }}\\n\\t\\t\\t</div>\\n\\t\\t</form>\\n\\t</div>\\n{% endblock content %}\"\n    },\n    {\n      \"file_path\": \"app/templates/register.html\",\n      \"file_contents\": \"{% extends 'layout.html' %}\\n{% block content %}\\n\\t<div class='content-section'>\\n\\t\\t<form method='POST'>\\n\\t\\t\\t{{ form.hidden_tag() }}\\n\\t\\t\\t<fieldset class='form-group'>\\n\\t\\t\\t\\t{{ form.username.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.username(class='form-control form-control-lg') }}\\n\\t\\t\\t\\t{{ form.password.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.password(class='form-control form-control-lg') }}\\n\\t\\t\\t\\t{{ form.confirm_password.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.confirm_password(class='form-control form-control-lg') }}\\n\\t\\t\\t</fieldset>\\n\\t\\t\\t<div class='form-group'>\\n\\t\\t\\t\\t{{ form.submit(class='btn btn-outline-info') }}\\n\\t\\t\\t</div>\\n\\t\\t</form>\\n\\t</div>\\n{% endblock content %}\"\n    },\n    {\n      \"file_path\": \"app/templates/login.html\",\n      \"file_contents\": \"{% extends 'layout.html' %}\\n{% block content %}\\n\\t<div class='content-section'>\\n\\t\\t<form method='POST'>\\n\\t\\t\\t{{ form.hidden_tag() }}\\n\\t\\t\\t<fieldset class='form-group'>\\n\\t\\t\\t\\t{{ form.username.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.username(class='form-control form-control-lg') }}\\n\\t\\t\\t\\t{{ form.password.label(class='form-control-label') }}\\n\\t\\t\\t\\t{{ form.password(class='form-control form-control-lg') }}\\n\\t\\t\\t</fieldset>\\n\\t\\t\\t<div class='form-group'>\\n\\t\\t\\t\\t{{ form.submit(class='btn btn-outline-info') }}\\n\\t\\t\\t</div>\\n\\t\\t</form>\\n\\t</div>\\n{% endblock content %}\"\n    },\n    {\n      \"file_path\": \"app/templates/dashboard.html\",\n      \"file_contents\": \"{% extends 'layout.html' %}\\n{% block content %}\\n\\t<div class='content-section'>\\n\\t\\t<h2 class='content-section-heading'>Your URLs</h2>\\n\\t\\t{% for url in urls %}\\n\\t\\t\\t<div class='media'>\\n\\t\\t\\t\\t<div class='media-body'>\\n\\t\\t\\t\\t\\t<h4 class='media-heading'><a href='{{ url_for('redirect_to_url', short_url=url.short_url) }}'>{{ url.short_url }}</a></h4>\\n\\t\\t\\t\\t\\t<p>{{ url.original_url }}</p>\\n\\t\\t\\t\\t\\t<p>Clicks: {{ url.clicks }}</p>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t{% endfor %}\\n\\t</div>\\n{% endblock content %}\"\n    },\n    {\n      \"file_path\": \"app/templates/layout.html\",\n      \"file_contents\": \"<!DOCTYPE html>\\n<html lang='en'>\\n<head>\\n\\t<meta charset='UTF-8'>\\n\\t<title>URL Shortener</title>\\n\\t<link rel='stylesheet' href='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css'>\\n</head>\\n<body>\\n\\t<nav class='navbar navbar-expand-lg navbar-light bg-light'>\\n\\t\\t<a class='navbar-brand' href='{{ url_for('home') }}'>URL Shortener</a>\\n\\t\\t<div class='collapse navbar-collapse' id='navbarNav'>\\n\\t\\t\\t<ul class='navbar-nav ml-auto'>\\n\\t\\t\\t\\t{% if current_user.is_authenticated %}\\n\\t\\t\\t\\t\\t<li class='nav-item'>\\n\\t\\t\\t\\t\\t\\t<a class='nav-link' href='{{ url_for('logout') }}'>Logout</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t<li class='nav-item'>\\n\\t\\t\\t\\t\\t\\t<a class='nav-link' href='{{ url_for('dashboard') }}'>Dashboard</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t{% else %}\\n\\t\\t\\t\\t\\t<li class='nav-item'>\\n\\t\\t\\t\\t\\t\\t<a class='nav-link' href='{{ url_for('login') }}'>Login</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t\\t<li class='nav-item'>\\n\\t\\t\\t\\t\\t\\t<a class='nav-link' href='{{ url_for('register') }}'>Register</a>\\n\\t\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t{% endif %}\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</nav>\\n\\t<div class='container'>\\n\\t\\t{% with messages = get_flashed_messages(with_categories=true) %}\\n\\t\\t\\t{% if messages %}\\n\\t\\t\\t\\t{% for category, message in messages %}\\n\\t\\t\\t\\t\\t<div class='alert alert-{{ category }}'>\\n\\t\\t\\t\\t\\t\\t{{ message }}\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t{% endfor %}\\n\\t\\t\\t{% endif %}\\n\\t\\t{% endwith %}\\n\\t\\t{% block content %}{% endblock %}\\n\\t</div>\\n</body>\\n</html>\"\n    },\n    {\n      \"file_path\": \"run.py\",\n      \"file_contents\": \"from app import app\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"tests/test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom app.models import User, Url, Click\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_home_page(client):\\n\\tresponse = client.get('/')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_register_page(client):\\n\\tresponse = client.get('/register')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_login_page(client):\\n\\tresponse = client.get('/login')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_dashboard_page(client):\\n\\tresponse = client.get('/dashboard')\\n\\tassert response.status_code == 302\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 3175, "prompt_tokens": 1428, "total_tokens": 4603}}]