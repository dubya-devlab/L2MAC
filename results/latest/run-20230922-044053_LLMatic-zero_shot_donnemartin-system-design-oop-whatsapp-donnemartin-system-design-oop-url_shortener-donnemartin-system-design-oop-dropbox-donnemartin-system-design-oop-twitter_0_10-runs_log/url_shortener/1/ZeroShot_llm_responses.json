[{"id": "chatcmpl-81XOk8us4B7W3vgFf70Lpf0lJwzYx", "object": "chat.completion", "created": 1695377402, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_login\\nflask_wtf\\nflask_migrate\\ngevent\\nrequests\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app/__init__.py\",\n      \"file_contents\": \"from flask import Flask\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_login import LoginManager\\n\\napp = Flask(__name__)\\napp.config['SECRET_KEY'] = 'your-secret-key'\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\\n\\ndb = SQLAlchemy(app)\\nlogin_manager = LoginManager(app)\\nlogin_manager.login_view = 'login'\\nlogin_manager.login_message_category = 'info'\\n\\nfrom app import routes\"\n    },\n    {\n      \"file_path\": \"app/models.py\",\n      \"file_contents\": \"from datetime import datetime\\nfrom app import db, login_manager\\nfrom flask_login import UserMixin\\n\\n@login_manager.user_loader\\ndef load_user(user_id):\\n\\treturn User.query.get(int(user_id))\\n\\nclass User(db.Model, UserMixin):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(20), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(60), nullable=False)\\n\\turls = db.relationship('Url', backref='creator', lazy=True)\\n\\nclass Url(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\toriginal_url = db.Column(db.String(500), nullable=False)\\n\\tshort_url = db.Column(db.String(20), unique=True, nullable=False)\\n\\tclicks = db.Column(db.Integer, default=0)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\tcreated_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\\n\\texpires_at = db.Column(db.DateTime)\\n\\tclicks_data = db.relationship('Click', backref='url', lazy=True)\\n\\nclass Click(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\turl_id = db.Column(db.Integer, db.ForeignKey('url.id'), nullable=False)\\n\\tclicked_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow)\\n\\tclicker_ip = db.Column(db.String(100))\"\n    },\n    {\n      \"file_path\": \"app/forms.py\",\n      \"file_contents\": \"from flask_wtf import FlaskForm\\nfrom wtforms import StringField, PasswordField, SubmitField, BooleanField\\nfrom wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError\\nfrom app.models import User\\n\\nclass RegistrationForm(FlaskForm):\\n\\tusername = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tconfirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\\n\\tsubmit = SubmitField('Sign Up')\\n\\n\\tdef validate_username(self, username):\\n\\t\\tuser = User.query.filter_by(username=username.data).first()\\n\\t\\tif user:\\n\\t\\t\\traise ValidationError('That username is taken. Please choose a different one.')\\n\\nclass LoginForm(FlaskForm):\\n\\tusername = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])\\n\\tpassword = PasswordField('Password', validators=[DataRequired()])\\n\\tremember = BooleanField('Remember Me')\\n\\tsubmit = SubmitField('Login')\\n\\nclass UrlForm(FlaskForm):\\n\\toriginal_url = StringField('Original URL', validators=[DataRequired()])\\n\\tshort_url = StringField('Short URL')\\n\\texpires_at = StringField('Expires At')\\n\\tsubmit = SubmitField('Shorten')\"\n    },\n    {\n      \"file_path\": \"app/routes.py\",\n      \"file_contents\": \"from flask import render_template, url_for, flash, redirect, request, abort\\nfrom app import app, db, bcrypt\\nfrom app.forms import RegistrationForm, LoginForm, UrlForm\\nfrom app.models import User, Url, Click\\nfrom flask_login import login_user, current_user, logout_user, login_required\\nimport requests\\nimport string\\nimport random\\nfrom datetime import datetime\\n\\n@app.route('/', methods=['GET', 'POST'])\\ndef home():\\n\\tform = UrlForm()\\n\\tif form.validate_on_submit():\\n\\t\\toriginal_url = form.original_url.data\\n\\t\\tshort_url = form.short_url.data\\n\\t\\texpires_at = form.expires_at.data\\n\\t\\tif not short_url:\\n\\t\\t\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=6))\\n\\t\\tif not expires_at:\\n\\t\\t\\texpires_at = None\\n\\t\\telse:\\n\\t\\t\\texpires_at = datetime.strptime(expires_at, '%Y-%m-%d %H:%M:%S')\\n\\t\\turl = Url(original_url=original_url, short_url=short_url, creator=current_user, expires_at=expires_at)\\n\\t\\tdb.session.add(url)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your URL has been shortened!', 'success')\\n\\t\\treturn redirect(url_for('home'))\\n\\treturn render_template('home.html', title='Home', form=form)\\n\\n@app.route('/register', methods=['GET', 'POST'])\\ndef register():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = RegistrationForm()\\n\\tif form.validate_on_submit():\\n\\t\\thashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')\\n\\t\\tuser = User(username=form.username.data, password=hashed_password)\\n\\t\\tdb.session.add(user)\\n\\t\\tdb.session.commit()\\n\\t\\tflash('Your account has been created! You are now able to log in', 'success')\\n\\t\\treturn redirect(url_for('login'))\\n\\treturn render_template('register.html', title='Register', form=form)\\n\\n@app.route('/login', methods=['GET', 'POST'])\\ndef login():\\n\\tif current_user.is_authenticated:\\n\\t\\treturn redirect(url_for('home'))\\n\\tform = LoginForm()\\n\\tif form.validate_on_submit():\\n\\t\\tuser = User.query.filter_by(username=form.username.data).first()\\n\\t\\tif user and bcrypt.check_password_hash(user.password, form.password.data):\\n\\t\\t\\tlogin_user(user, remember=form.remember.data)\\n\\t\\t\\tnext_page = request.args.get('next')\\n\\t\\t\\treturn redirect(next_page) if next_page else redirect(url_for('home'))\\n\\t\\telse:\\n\\t\\t\\tflash('Login Unsuccessful. Please check username and password', 'danger')\\n\\treturn render_template('login.html', title='Login', form=form)\\n\\n@app.route('/logout')\\ndef logout():\\n\\tlogout_user()\\n\\treturn redirect(url_for('home'))\\n\\n@app.route('/account')\\n@login_required\\ndef account():\\n\\treturn render_template('account.html', title='Account')\\n\\n@app.route('/<short_url>')\\ndef redirect_to_url(short_url):\\n\\turl = Url.query.filter_by(short_url=short_url).first()\\n\\tif url:\\n\\t\\turl.clicks += 1\\n\\t\\tclick = Click(url=url, clicker_ip=request.remote_addr)\\n\\t\\tdb.session.add(click)\\n\\t\\tdb.session.commit()\\n\\t\\treturn redirect(url.original_url)\\n\\telse:\\n\\t\\tabort(404)\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1675, "prompt_tokens": 1428, "total_tokens": 3103}}]