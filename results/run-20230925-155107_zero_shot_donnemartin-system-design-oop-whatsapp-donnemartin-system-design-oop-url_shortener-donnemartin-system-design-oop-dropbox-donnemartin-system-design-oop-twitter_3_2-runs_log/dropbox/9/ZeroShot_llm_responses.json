[{"id": "chatcmpl-82hI65VgYQOuU3d7h4TCE16ZXwdko", "object": "chat.completion", "created": 1695653758, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom file import File\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nfiles = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['name'], data['email'], data['password'])\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users and users[email].password == password:\\n\\t\\treturn jsonify(users[email].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(data['name'], data['type'], data['size'], data['content'])\\n\\tfiles[file.name] = file\\n\\treturn jsonify(file.to_dict()), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tname = request.args.get('name')\\n\\tif name in files:\\n\\t\\treturn jsonify(files[name].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"class User:\\n\\tdef __init__(self, name, email, password):\\n\\t\\tself.name = name\\n\\t\\tself.email = email\\n\\t\\tself.password = password\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'password': self.password\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"file.py\",\n      \"file_contents\": \"class File:\\n\\tdef __init__(self, name, type, size, content):\\n\\t\\tself.name = name\\n\\t\\tself.type = type\\n\\t\\tself.size = size\\n\\t\\tself.content = content\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'type': self.type,\\n\\t\\t\\t'size': self.size,\\n\\t\\t\\t'content': self.content\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom file import File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'Test File', 'type': 'text/plain', 'size': 100, 'content': 'Hello, World!'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'Test File', 'type': 'text/plain', 'size': 100, 'content': 'Hello, World!'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download', query_string={'name': 'Test File'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Test File', 'type': 'text/plain', 'size': 100, 'content': 'Hello, World!'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 982, "prompt_tokens": 1475, "total_tokens": 2457}}]