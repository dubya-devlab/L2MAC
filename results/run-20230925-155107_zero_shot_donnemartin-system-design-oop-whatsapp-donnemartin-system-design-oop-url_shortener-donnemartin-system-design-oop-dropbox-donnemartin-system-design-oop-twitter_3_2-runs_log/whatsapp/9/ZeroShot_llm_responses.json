[{"id": "chatcmpl-82hGtAmhNWyB1QoD7Dwbul5hFPCkF", "object": "chat.completion", "created": 1695653683, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn jsonify({'error': 'Invalid credentials'}), 401\\n\\n@app.route('/chat', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"import uuid\\n\\nclass User:\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.email = email\\n\\t\\tself.password = password\\n\\t\\tself.profile_picture = None\\n\\t\\tself.status_message = None\\n\\t\\tself.privacy_settings = {'last_seen': 'everyone', 'profile_picture': 'everyone', 'status_message': 'everyone'}\\n\\t\\tself.blocked_users = []\\n\\t\\tself.groups = []\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'profile_picture': self.profile_picture,\\n\\t\\t\\t'status_message': self.status_message,\\n\\t\\t\\t'privacy_settings': self.privacy_settings,\\n\\t\\t\\t'blocked_users': [user.id for user in self.blocked_users],\\n\\t\\t\\t'groups': [group.id for group in self.groups]\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"import uuid\\n\\nclass Chat:\\n\\tdef __init__(self, name):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.name = name\\n\\t\\tself.participants = []\\n\\t\\tself.admins = []\\n\\t\\tself.messages = []\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'participants': [participant.id for participant in self.participants],\\n\\t\\t\\t'admins': [admin.id for admin in self.admins],\\n\\t\\t\\t'messages': [message.to_dict() for message in self.messages]\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"message.py\",\n      \"file_contents\": \"import uuid\\nfrom datetime import datetime\\n\\nclass Message:\\n\\tdef __init__(self, sender, content):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.timestamp = datetime.now()\\n\\t\\tself.sender = sender\\n\\t\\tself.content = content\\n\\t\\tself.read_receipts = []\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'timestamp': self.timestamp.isoformat(),\\n\\t\\t\\t'sender': self.sender.id,\\n\\t\\t\\t'content': self.content,\\n\\t\\t\\t'read_receipts': [receipt.to_dict() for receipt in self.read_receipts]\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"read_receipt.py\",\n      \"file_contents\": \"from datetime import datetime\\n\\nclass ReadReceipt:\\n\\tdef __init__(self, reader):\\n\\t\\tself.timestamp = datetime.now()\\n\\t\\tself.reader = reader\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'timestamp': self.timestamp.isoformat(),\\n\\t\\t\\t'reader': self.reader.id\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['email'] == 'test@example.com'\\n\\n\\ndef test_login(client):\\n\\tuser = User('test@example.com', 'password')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tdata = response.get_json()\\n\\tassert data['id'] == user.id\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/chat', json={'name': 'Test Chat'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['name'] == 'Test Chat'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1239, "prompt_tokens": 1344, "total_tokens": 2583}}]