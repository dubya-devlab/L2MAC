[{"id": "chatcmpl-82gv4ydSNDpgQNwlDi5F7gsABcKK5", "object": "chat.completion", "created": 1695652330, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"main.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration_date: datetime\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser_id = str(uuid.uuid4())\\n\\tnew_user = User(id=user_id, username=data['username'], password=data['password'], urls={})\\n\\tusers[user_id] = new_user\\n\\treturn jsonify({'message': 'User registered successfully', 'user_id': user_id}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.username == data['username'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify({'message': 'Logged in successfully', 'user_id': user.id}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/shorten_url', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\turl_id = str(uuid.uuid4())\\n\\tshort_url = f'http://short.ly/{url_id}'\\n\\tnew_url = URL(id=url_id, original_url=data['original_url'], short_url=short_url, user_id=data['user_id'], clicks=0, click_data=[], expiration_date=data['expiration_date'])\\n\\turls[url_id] = new_url\\n\\tusers[data['user_id']].urls[url_id] = new_url\\n\\treturn jsonify({'message': 'URL shortened successfully', 'short_url': short_url}), 201\\n\\n@app.route('/<url_id>', methods=['GET'])\\ndef redirect_url(url_id):\\n\\tif url_id in urls:\\n\\t\\turl = urls[url_id]\\n\\t\\tif datetime.now() <= url.expiration_date:\\n\\t\\t\\turl.clicks += 1\\n\\t\\t\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\t\\t\\treturn redirect(url.original_url, code=302)\\n\\treturn jsonify({'message': 'URL expired or does not exist'}), 404\\n\\n@app.route('/analytics/<user_id>', methods=['GET'])\\ndef analytics(user_id):\\n\\tif user_id in users:\\n\\t\\tuser = users[user_id]\\n\\t\\tanalytics_data = {}\\n\\t\\tfor url in user.urls.values():\\n\\t\\t\\tanalytics_data[url.id] = {'original_url': url.original_url, 'short_url': url.short_url, 'clicks': url.clicks, 'click_data': url.click_data}\\n\\t\\treturn jsonify(analytics_data), 200\\n\\treturn jsonify({'message': 'User does not exist'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_main.py\",\n      \"file_contents\": \"import pytest\\nimport main\\nfrom main import app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'http://example.com', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in json.loads(response.data)\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'http://example.com', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\turl_id = short_url.split('/')[-1]\\n\\tresponse = client.get(f'/{url_id}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_analytics(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tclient.post('/shorten_url', json={'original_url': 'http://example.com', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tresponse = client.get(f'/analytics/{user_id}')\\n\\tassert response.status_code == 200\\n\\tassert len(json.loads(response.data)) == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1318, "prompt_tokens": 1342, "total_tokens": 2660}}]