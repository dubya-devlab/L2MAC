[{"id": "chatcmpl-82hEKOvMXLvxD9RUMRjB3UXdMoqgQ", "object": "chat.completion", "created": 1695653524, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"main.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom url_shortener import URLShortener\\nfrom user import User\\nfrom admin import Admin\\n\\napp = Flask(__name__)\\nurl_shortener = URLShortener()\\nusers = {}\\nadmins = {}\\n\\n@app.route('/shorten_url', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\turl = data.get('url')\\n\\tcustom_alias = data.get('custom_alias')\\n\\tuser_id = data.get('user_id')\\n\\texpiration_date = data.get('expiration_date')\\n\\tshort_url = url_shortener.shorten_url(url, custom_alias, user_id, expiration_date)\\n\\treturn jsonify({'short_url': short_url})\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\turl = url_shortener.get_original_url(short_url)\\n\\tif url:\\n\\t\\treturn redirect(url)\\n\\telse:\\n\\t\\treturn 'URL not found or expired', 404\\n\\n@app.route('/user/register', methods=['POST'])\\ndef register_user():\\n\\tdata = request.get_json()\\n\\tuser_id = data.get('user_id')\\n\\tuser = User(user_id)\\n\\tusers[user_id] = user\\n\\treturn 'User registered successfully'\\n\\n@app.route('/user/<user_id>/urls', methods=['GET'])\\ndef get_user_urls(user_id):\\n\\tuser = users.get(user_id)\\n\\tif user:\\n\\t\\treturn jsonify(user.get_urls())\\n\\telse:\\n\\t\\treturn 'User not found', 404\\n\\n@app.route('/admin/register', methods=['POST'])\\ndef register_admin():\\n\\tdata = request.get_json()\\n\\tadmin_id = data.get('admin_id')\\n\\tadmin = Admin(admin_id)\\n\\tadmins[admin_id] = admin\\n\\treturn 'Admin registered successfully'\\n\\n@app.route('/admin/<admin_id>/urls', methods=['GET'])\\ndef get_all_urls(admin_id):\\n\\tadmin = admins.get(admin_id)\\n\\tif admin:\\n\\t\\treturn jsonify(url_shortener.get_all_urls())\\n\\telse:\\n\\t\\treturn 'Admin not found', 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"url_shortener.py\",\n      \"file_contents\": \"import string\\nimport random\\nfrom datetime import datetime, timedelta\\n\\nclass URLShortener:\\n\\tdef __init__(self):\\n\\t\\tself.urls = {}\\n\\n\\tdef shorten_url(self, url, custom_alias=None, user_id=None, expiration_date=None):\\n\\t\\tif custom_alias:\\n\\t\\t\\tshort_url = custom_alias\\n\\t\\telse:\\n\\t\\t\\tshort_url = ''.join(random.choices(string.ascii_letters + string.digits, k=6))\\n\\t\\tself.urls[short_url] = {'url': url, 'user_id': user_id, 'clicks': 0, 'click_data': [], 'expiration_date': expiration_date}\\n\\t\\treturn short_url\\n\\n\\tdef get_original_url(self, short_url):\\n\\t\\turl_data = self.urls.get(short_url)\\n\\t\\tif url_data and (not url_data['expiration_date'] or datetime.now() < url_data['expiration_date']):\\n\\t\\t\\turl_data['clicks'] += 1\\n\\t\\t\\turl_data['click_data'].append({'click_time': datetime.now().isoformat()})\\n\\t\\t\\treturn url_data['url']\\n\\t\\telse:\\n\\t\\t\\treturn None\\n\\n\\tdef get_all_urls(self):\\n\\t\\treturn self.urls\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"class User:\\n\\tdef __init__(self, user_id):\\n\\t\\tself.user_id = user_id\\n\\t\\tself.urls = []\\n\\n\\tdef add_url(self, short_url):\\n\\t\\tself.urls.append(short_url)\\n\\n\\tdef get_urls(self):\\n\\t\\treturn self.urls\"\n    },\n    {\n      \"file_path\": \"admin.py\",\n      \"file_contents\": \"class Admin:\\n\\tdef __init__(self, admin_id):\\n\\t\\tself.admin_id = admin_id\"\n    },\n    {\n      \"file_path\": \"test_main.py\",\n      \"file_contents\": \"import pytest\\nimport main\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tmain.app.config['TESTING'] = True\\n\\twith main.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten_url', data=json.dumps({'url': 'https://www.google.com'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'short_url' in response.get_json()\\n\\n\\ndef test_redirect_to_url(client):\\n\\tresponse = client.post('/shorten_url', data=json.dumps({'url': 'https://www.google.com'}), content_type='application/json')\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_register_user(client):\\n\\tresponse = client.post('/user/register', data=json.dumps({'user_id': 'test_user'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.data == b'User registered successfully'\\n\\n\\ndef test_get_user_urls(client):\\n\\tresponse = client.post('/user/register', data=json.dumps({'user_id': 'test_user'}), content_type='application/json')\\n\\tresponse = client.get('/user/test_user/urls')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_register_admin(client):\\n\\tresponse = client.post('/admin/register', data=json.dumps({'admin_id': 'test_admin'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.data == b'Admin registered successfully'\\n\\n\\ndef test_get_all_urls(client):\\n\\tresponse = client.post('/admin/register', data=json.dumps({'admin_id': 'test_admin'}), content_type='application/json')\\n\\tresponse = client.get('/admin/test_admin/urls')\\n\\tassert response.status_code == 200\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1400, "prompt_tokens": 1342, "total_tokens": 2742}}]