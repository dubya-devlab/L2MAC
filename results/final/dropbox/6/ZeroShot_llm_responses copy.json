[{"id": "chatcmpl-82gsP4myEGKBUX3D06P1EUw6yv8yi", "object": "chat.completion", "created": 1695652165, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom file import File\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nfiles = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['name'], data['email'], data['password'])\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users and users[email].password == password:\\n\\t\\treturn jsonify(users[email].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(data['name'], data['type'], data['size'], data['content'])\\n\\tfiles[file.name] = file\\n\\treturn jsonify(file.to_dict()), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tname = request.args.get('name')\\n\\tif name in files:\\n\\t\\treturn jsonify(files[name].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'name': self.name, 'email': self.email}\"\n    },\n    {\n      \"file_path\": \"file.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\ttype: str\\n\\tsize: int\\n\\tcontent: str\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'name': self.name, 'type': self.type, 'size': self.size, 'content': self.content}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom file import File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com'}\\n\\n\\ndef test_login(client):\\n\\tapp.users['test@example.com'] = User('Test User', 'test@example.com', 'password')\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com'}\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'test.txt', 'type': 'text/plain', 'size': 4, 'content': 'Test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'test.txt', 'type': 'text/plain', 'size': 4, 'content': 'Test'}\\n\\n\\ndef test_download(client):\\n\\tapp.files['test.txt'] = File('test.txt', 'text/plain', 4, 'Test')\\n\\tresponse = client.get('/download', query_string={'name': 'test.txt'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'test.txt', 'type': 'text/plain', 'size': 4, 'content': 'Test'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 954, "prompt_tokens": 1475, "total_tokens": 2429}}]