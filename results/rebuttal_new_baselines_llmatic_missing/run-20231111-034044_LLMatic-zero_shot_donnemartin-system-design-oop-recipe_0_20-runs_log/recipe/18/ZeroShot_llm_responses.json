[{"id": "chatcmpl-8JlAv2ZUA4rgYv4k6zGx4Hcydas0O", "object": "chat.completion", "created": 1699720265, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\tfollows: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\treviews: list\\n\\n@dataclass\\nclass Review:\\n\\tid: str\\n\\tuser_id: str\\n\\trecipe_id: str\\n\\trating: int\\n\\tcomment: str\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDB[user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\tDB[recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\n@app.route('/review', methods=['POST'])\\ndef create_review():\\n\\tdata = request.get_json()\\n\\treview = Review(**data)\\n\\tDB[review.id] = review\\n\\treturn jsonify(review), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Recipe, Review\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User(id='1', name='Test User', recipes=[], favorites=[], follows=[])\\n\\n@pytest.fixture\\ndef recipe():\\n\\treturn Recipe(id='1', name='Test Recipe', ingredients=[], instructions=[], images=[], categories=[], reviews=[])\\n\\n@pytest.fixture\\ndef review():\\n\\treturn Review(id='1', user_id='1', recipe_id='1', rating=5, comment='Great recipe!')\\n\\n\\ndef test_create_user(client, user):\\n\\tresponse = client.post('/user', json=user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user.__dict__\\n\\n\\ndef test_create_recipe(client, recipe):\\n\\tresponse = client.post('/recipe', json=recipe.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == recipe.__dict__\\n\\n\\ndef test_create_review(client, review):\\n\\tresponse = client.post('/review', json=review.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == review.__dict__\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1639, "completion_tokens": 667, "total_tokens": 2306}}]