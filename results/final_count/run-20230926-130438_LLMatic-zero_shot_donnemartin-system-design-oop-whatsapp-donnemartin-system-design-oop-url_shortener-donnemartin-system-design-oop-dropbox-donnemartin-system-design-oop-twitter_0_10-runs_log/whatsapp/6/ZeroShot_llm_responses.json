[{"id": "chatcmpl-83Rdq4ZyxTTXp5JmSvN9GX1HmzZ4K", "object": "chat.completion", "created": 1695831930, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/users/<user_id>/chats', methods=['POST'])\\ndef create_chat(user_id):\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\tusers[user_id].chats.append(chat.id)\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/users/<user_id>/chats/<chat_id>/messages', methods=['POST'])\\ndef send_message(user_id, chat_id):\\n\\tdata = request.get_json()\\n\\tmessage = users[user_id].send_message(chats[chat_id], data['content'])\\n\\treturn jsonify(message.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nfrom uuid import uuid4\\nfrom message import Message\\n\\n@dataclass\\nclass User:\\n\\tid: str = field(default_factory=lambda: str(uuid4()))\\n\\temail: str\\n\\tpassword: str\\n\\tchats: List[str] = field(default_factory=list)\\n\\n\\tdef send_message(self, chat, content):\\n\\t\\tmessage = Message(self.id, chat.id, content)\\n\\t\\tchat.messages.append(message)\\n\\t\\treturn message\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'email': self.email, 'chats': self.chats}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nfrom uuid import uuid4\\n\\n@dataclass\\nclass Chat:\\n\\tid: str = field(default_factory=lambda: str(uuid4()))\\n\\tname: str\\n\\tmessages: List['Message'] = field(default_factory=list)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'name': self.name, 'messages': [message.to_dict() for message in self.messages]}\"\n    },\n    {\n      \"file_path\": \"message.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nfrom uuid import uuid4\\n\\n@dataclass\\nclass Message:\\n\\tid: str = field(default_factory=lambda: str(uuid4()))\\n\\tuser_id: str\\n\\tchat_id: str\\n\\tcontent: str\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'user_id': self.user_id, 'chat_id': self.chat_id, 'content': self.content}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\nfrom message import Message\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\tassert response.get_json()['email'] == 'test@test.com'\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'email': 'test@test.com', 'password': 'password'})\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert 'id' in response.get_json()\\n\\tassert response.get_json()['email'] == 'test@test.com'\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'password'})\\n\\tuser_id = response.get_json()['id']\\n\\tresponse = client.post(f'/users/{user_id}/chats', json={'name': 'Test Chat'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\tassert response.get_json()['name'] == 'Test Chat'\\n\\n\\ndef test_send_message(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'password'})\\n\\tuser_id = response.get_json()['id']\\n\\tresponse = client.post(f'/users/{user_id}/chats', json={'name': 'Test Chat'})\\n\\tchat_id = response.get_json()['id']\\n\\tresponse = client.post(f'/users/{user_id}/chats/{chat_id}/messages', json={'content': 'Hello, world!'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\tassert response.get_json()['content'] == 'Hello, world!'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1256, "prompt_tokens": 1508, "total_tokens": 2764}}]