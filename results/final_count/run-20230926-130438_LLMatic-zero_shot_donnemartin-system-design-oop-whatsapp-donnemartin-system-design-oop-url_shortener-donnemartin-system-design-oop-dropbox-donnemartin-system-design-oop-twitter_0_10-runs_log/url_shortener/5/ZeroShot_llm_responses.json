[{"id": "chatcmpl-83PobQsqxmax508H8G7lsJePefXaT", "object": "chat.completion", "created": 1695824909, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration_date: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('original_url')\\n\\tcustom_url = data.get('custom_url')\\n\\tuser_id = data.get('user_id')\\n\\texpiration_date = data.get('expiration_date')\\n\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Generate short URL\\n\\tshort_url = custom_url if custom_url else str(uuid.uuid4())[:8]\\n\\n\\t# Check if short URL already exists\\n\\tif short_url in DB:\\n\\t\\treturn jsonify({'error': 'Short URL already exists'}), 400\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, short_url, user_id, 0, [], expiration_date)\\n\\tDB[short_url] = url\\n\\n\\treturn jsonify({'short_url': short_url}), 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL has expired\\n\\tif url.expiration_date and url.expiration_date < datetime.now():\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\n\\treturn redirect(url.original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tuser_id = request.args.get('user_id')\\n\\tif not user_id:\\n\\t\\treturn jsonify({'error': 'User ID required'}), 400\\n\\n\\t# Get all URLs for the user\\n\\tuser_urls = [url for url in DB.values() if url.user_id == user_id]\\n\\n\\t# Prepare analytics data\\n\\tanalytics_data = []\\n\\tfor url in user_urls:\\n\\t\\tanalytics_data.append({\\n\\t\\t\\t'original_url': url.original_url,\\n\\t\\t\\t'short_url': url.short_url,\\n\\t\\t\\t'clicks': url.clicks,\\n\\t\\t\\t'click_data': url.click_data\\n\\t\\t})\\n\\n\\treturn jsonify(analytics_data), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport uuid\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\t# Clear DB after each test\\n\\tapp.DB.clear()\\n\\n\\ndef test_shorten_url(client):\\n\\t# Test valid URL\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'short_url' in response.get_json()\\n\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'original_url': 'invalid_url'})\\n\\tassert response.status_code == 400\\n\\tassert 'error' in response.get_json()\\n\\n\\t# Test custom URL\\n\\tcustom_url = str(uuid.uuid4())[:8]\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com', 'custom_url': custom_url})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['short_url'] == custom_url\\n\\n\\t# Test duplicate custom URL\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com', 'custom_url': custom_url})\\n\\tassert response.status_code == 400\\n\\tassert 'error' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\t# Test non-existent URL\\n\\tresponse = client.get('/non_existent_url')\\n\\tassert response.status_code == 404\\n\\tassert 'error' in response.get_json()\\n\\n\\t# Test valid URL\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get('/' + short_url)\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\t# Test without user ID\\n\\tresponse = client.get('/analytics')\\n\\tassert response.status_code == 400\\n\\tassert 'error' in response.get_json()\\n\\n\\t# Test with user ID\\n\\tuser_id = str(uuid.uuid4())\\n\\tclient.post('/shorten', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tresponse = client.get('/analytics', query_string={'user_id': user_id})\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1288, "prompt_tokens": 1523, "total_tokens": 2811}}]