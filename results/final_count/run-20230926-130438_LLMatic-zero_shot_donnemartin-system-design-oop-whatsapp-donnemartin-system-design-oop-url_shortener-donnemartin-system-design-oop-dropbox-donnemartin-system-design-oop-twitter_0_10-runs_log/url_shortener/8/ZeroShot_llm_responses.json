[{"id": "chatcmpl-83a13uVkITZ35EoiqX7AIXrsPZzzs", "object": "chat.completion", "created": 1695864121, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tcreated_at: datetime\\n\\texpires_at: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpires_at = data.get('expires_at')\\n\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL is already in use'}), 400\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=shortened_url, clicks=0, created_at=datetime.now(), expires_at=expires_at)\\n\\tDB[shortened_url] = url\\n\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_to_url(shortened_url):\\n\\turl = DB.get(shortened_url)\\n\\n\\t# Check if URL exists and has not expired\\n\\tif not url or datetime.now() > url.expires_at:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n\\t# Increment click count and redirect\\n\\turl.clicks += 1\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expires_at', [\\n\\t('http://example.com', 'exmpl', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('http://google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expires_at):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': url, 'shortened': shortened, 'expires_at': expires_at}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'shortened_url': shortened}\\n\\n@pytest.mark.parametrize('shortened, url', [\\n\\t('exmpl', 'http://example.com'),\\n\\t('goog', 'http://google.com'),\\n])\\ndef test_redirect_to_url(client, reset_db, shortened, url):\\n\\texpires_at = (datetime.now() + timedelta(days=1)).isoformat()\\n\\tclient.post('/shorten', data=json.dumps({'url': url, 'shortened': shortened, 'expires_at': expires_at}), content_type='application/json')\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == url\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 830, "prompt_tokens": 1523, "total_tokens": 2353}}]