[{"id": "chatcmpl-83RzKHviLaJPNXtB5M8yuFtVasOuL", "object": "chat.completion", "created": 1695833262, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept requests.exceptions.RequestException as err:\\n\\t\\treturn jsonify({'error': str(err)}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use.'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, user, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully.'}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found.'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired.'}), 400\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tshortened_url = data.get('shortened')\\n\\turl = DB.get(shortened_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found.'}), 404\\n\\t\\n\\treturn jsonify({'clicks': url.clicks, 'click_data': url.click_data}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'shortened': 'ggl', 'user': 'test', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'URL shortened successfully.' in response.data\\n\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'shortened': 'ggl', 'user': 'test', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert b'Shortened URL already in use.' in response.data\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.get('/ggl')\\n\\tassert response.status_code == 302\\n\\n\\tresponse = client.get('/nonexistent')\\n\\tassert response.status_code == 404\\n\\tassert b'URL not found.' in response.data\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.get('/analytics', data=json.dumps({'shortened': 'ggl'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'clicks' in response.data\\n\\tassert b'click_data' in response.data\\n\\n\\tresponse = client.get('/analytics', data=json.dumps({'shortened': 'nonexistent'}), content_type='application/json')\\n\\tassert response.status_code == 404\\n\\tassert b'URL not found.' in response.data\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1015, "prompt_tokens": 1523, "total_tokens": 2538}}]