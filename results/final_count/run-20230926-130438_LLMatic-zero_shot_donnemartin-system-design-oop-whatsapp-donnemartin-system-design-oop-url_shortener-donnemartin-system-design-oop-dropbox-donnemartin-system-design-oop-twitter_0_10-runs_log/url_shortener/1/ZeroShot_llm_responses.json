[{"id": "chatcmpl-832appgmH57waZXT7KGkVE26AUWjm", "object": "chat.completion", "created": 1695735643, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, user, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully'}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Redirect to original URL\\n\\turl.clicks.append({'time': datetime.now().isoformat()})\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tuser = request.args.get('user')\\n\\turls = [url for url in DB.values() if url.user == user]\\n\\treturn jsonify({'urls': urls}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef setup_db():\\n\\tapp.DB = {}\\n\\turl = app.URL('https://www.google.com', 'google', 'test_user', [], datetime.now() + timedelta(days=1))\\n\\tapp.DB['google'] = url\\n\\n\\turl = app.URL('https://www.facebook.com', 'fb', 'test_user', [], datetime.now() - timedelta(days=1))\\n\\tapp.DB['fb'] = url\\n\\n\\tyield\\n\\n\\tapp.DB = {}\\n\\n\\ndef test_shorten_url(client, setup_db):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.twitter.com', 'shortened': 'twitter', 'user': 'test_user', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 200\\n\\tassert 'message' in response.get_json()\\n\\tassert response.get_json()['message'] == 'URL shortened successfully'\\n\\n\\ndef test_redirect_url(client, setup_db):\\n\\tresponse = client.get('/google')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_expired_url(client, setup_db):\\n\\tresponse = client.get('/fb')\\n\\tassert response.status_code == 400\\n\\tassert 'error' in response.get_json()\\n\\tassert response.get_json()['error'] == 'URL has expired'\\n\\n\\ndef test_get_analytics(client, setup_db):\\n\\tresponse = client.get('/analytics?user=test_user')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\\n\\tassert len(response.get_json()['urls']) == 2\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 973, "prompt_tokens": 1523, "total_tokens": 2496}}]