[{"id": "chatcmpl-83F9qYxcigY8X0CnUEhuJrFjCPv4A", "object": "chat.completion", "created": 1695783942, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom typing import Dict, List\\nimport datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {\\n\\t'users': {},\\n\\t'urls': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: Dict[str, str]\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: List[datetime.datetime]\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\tuser_id = data.get('user_id')\\n\\toriginal_url = data.get('original_url')\\n\\tshort_url = data.get('short_url', str(uuid.uuid4())[:8])\\n\\t\\n\\t# Check if the short_url is already in use\\n\\tfor url in DB['urls'].values():\\n\\t\\tif url.short_url == short_url:\\n\\t\\t\\treturn jsonify({'error': 'Short URL already in use'}), 400\\n\\t\\n\\turl = URL(id=str(uuid.uuid4()), original_url=original_url, short_url=short_url, user_id=user_id, clicks=[])\\n\\tDB['urls'][url.id] = url\\n\\tif user_id:\\n\\t\\tDB['users'][user_id].urls[url.id] = url.short_url\\n\\t\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\tfor url in DB['urls'].values():\\n\\t\\tif url.short_url == short_url:\\n\\t\\t\\turl.clicks.append(datetime.datetime.now())\\n\\t\\t\\treturn redirect(url.original_url)\\n\\t\\n\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tuser_id = data.get('user_id')\\n\\t\\n\\tif user_id not in DB['users']:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\t\\n\\tanalytics = {}\\n\\tfor url_id, short_url in DB['users'][user_id].urls.items():\\n\\t\\turl = DB['urls'][url_id]\\n\\t\\tanalytics[short_url] = len(url.clicks)\\n\\t\\n\\treturn jsonify(analytics), 200\\n\\n@app.route('/users', methods=['POST'])\\ndef create_user():\\n\\tuser = User(id=str(uuid.uuid4()), urls={})\\n\\tDB['users'][user.id] = user\\n\\treturn jsonify({'user_id': user.id}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n\\ndef test_redirect_to_url(client):\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tuser_id = client.post('/users').get_json()['user_id']\\n\\tclient.post('/shorten', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tresponse = client.get('/analytics', json={'user_id': user_id})\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/users')\\n\\tassert response.status_code == 201\\n\\tassert 'user_id' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 979, "prompt_tokens": 1523, "total_tokens": 2502}}]