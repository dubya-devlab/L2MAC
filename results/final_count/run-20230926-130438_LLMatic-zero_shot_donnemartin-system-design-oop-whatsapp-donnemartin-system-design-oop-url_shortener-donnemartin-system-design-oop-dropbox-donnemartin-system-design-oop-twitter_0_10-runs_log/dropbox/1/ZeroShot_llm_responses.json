[{"id": "chatcmpl-832n95OapFcbNKb2GSC7vh8iRMCSd", "object": "chat.completion", "created": 1695736407, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom file_manager import FileManager\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nfiles = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['name'], data['email'], data['password'])\\n\\tusers[data['email']] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users and users[email].password == password:\\n\\t\\treturn jsonify(users[email].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tif email in users:\\n\\t\\treturn jsonify(users[email].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile_manager = FileManager(data['file'], data['user_email'])\\n\\tfiles[data['file']['name']] = file_manager\\n\\treturn jsonify(file_manager.to_dict()), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\tfile_name = data['file_name']\\n\\tif file_name in files:\\n\\t\\treturn jsonify(files[file_name].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'name': self.name, 'email': self.email, 'password': self.password}\"\n    },\n    {\n      \"file_path\": \"file_manager.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass FileManager:\\n\\tfile: dict\\n\\tuser_email: str\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'file': self.file, 'user_email': self.user_email}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom file_manager import FileManager\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile', json={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'file': {'name': 'test.txt', 'content': 'Hello, World!'}, 'user_email': 'test@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'file': {'name': 'test.txt', 'content': 'Hello, World!'}, 'user_email': 'test@example.com'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download', json={'file_name': 'test.txt'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'file': {'name': 'test.txt', 'content': 'Hello, World!'}, 'user_email': 'test@example.com'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1064, "prompt_tokens": 1611, "total_tokens": 2675}}]