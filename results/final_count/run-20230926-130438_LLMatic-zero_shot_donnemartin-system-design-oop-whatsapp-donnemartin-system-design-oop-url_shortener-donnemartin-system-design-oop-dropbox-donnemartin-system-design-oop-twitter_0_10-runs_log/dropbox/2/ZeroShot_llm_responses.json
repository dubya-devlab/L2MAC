[{"id": "chatcmpl-83GhAaWAsW8vDxFMnKdXgTsyPycWM", "object": "chat.completion", "created": 1695789852, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: list = []\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'Email already registered'}), 400\\n\\tusers[data['email']] = User(data['name'], data['email'], data['password'])\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify({'name': user.name, 'email': user.email, 'storage_used': user.storage_used}), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tfile = File(data['name'], data['size'], data['email'])\\n\\tfiles[data['name']] = file\\n\\tuser.storage_used += data['size']\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 200\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\tfile = files.get(data['name'])\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify({'message': 'File downloaded successfully', 'file': file.__dict__}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile', json={'email': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'name' in response.get_json()\\n\\tassert 'email' in response.get_json()\\n\\tassert 'storage_used' in response.get_json()\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'file1', 'size': 100, 'email': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download', json={'name': 'file1'})\\n\\tassert response.status_code == 200\\n\\tassert 'file' in response.get_json()\\n\\tassert 'message' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 974, "prompt_tokens": 1611, "total_tokens": 2585}}]