[{"id": "chatcmpl-83NSzgD6zcba7PBcAJNd2FUOnLEFO", "object": "chat.completion", "created": 1695815881, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom file_manager import FileManager\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nfiles = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['name'], data['email'], data['password'])\\n\\tusers[data['email']] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users and users[email].password == password:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = FileManager(data['filename'], data['content'], data['user'])\\n\\tfiles[data['filename']] = file\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"class User:\\n\\tdef __init__(self, name, email, password):\\n\\t\\tself.name = name\\n\\t\\tself.email = email\\n\\t\\tself.password = password\"\n    },\n    {\n      \"file_path\": \"file_manager.py\",\n      \"file_contents\": \"class FileManager:\\n\\tdef __init__(self, filename, content, user):\\n\\t\\tself.filename = filename\\n\\t\\tself.content = content\\n\\t\\tself.user = user\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Login successful'}\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'filename': 'test.txt', 'content': 'Hello, World!', 'user': 'test@test.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 683, "prompt_tokens": 1611, "total_tokens": 2294}}]