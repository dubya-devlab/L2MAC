[{"id": "chatcmpl-83Lh9ekI5xBR3tUebNQEzvX8sMvtw", "object": "chat.completion", "created": 1695809071, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[data['email']] = {'name': data['name'], 'password': data['password'], 'files': []}\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['email'] not in users or users[data['email']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tif data['email'] not in users:\\n\\t\\treturn jsonify({'message': 'User does not exist'}), 400\\n\\tfiles[data['filename']] = {'content': data['content'], 'owner': data['email']}\\n\\tusers[data['email']]['files'].append(data['filename'])\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 200\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfilename = request.args.get('filename')\\n\\tif filename not in files:\\n\\t\\treturn jsonify({'message': 'File does not exist'}), 400\\n\\treturn jsonify({'content': files[filename]['content']}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['message'] == 'User registered successfully'\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['message'] == 'Logged in successfully'\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'email': 'test@test.com', 'filename': 'test.txt', 'content': 'Hello, World!'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['message'] == 'File uploaded successfully'\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download?filename=test.txt')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['content'] == 'Hello, World!'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 739, "prompt_tokens": 1611, "total_tokens": 2350}}]