[{"id": "chatcmpl-8327flD9L3fCkO4PJ1LBlFSJ8FffB", "object": "chat.completion", "created": 1695733835, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: list = None\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'Email already registered'}), 400\\n\\tusers[data['email']] = User(**data)\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'Login successful'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify(user.__dict__), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['owner'])\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tif user.storage_used + data['size'] > 1000:\\n\\t\\treturn jsonify({'message': 'Storage limit exceeded'}), 400\\n\\tuser.storage_used += data['size']\\n\\tfiles[data['name']] = File(**data)\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 200\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfile_name = request.args.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify(file.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Login successful'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile?email=test@test.com')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Test', 'email': 'test@test.com', 'password': 'test123', 'storage_used': 0}\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'file1', 'size': 100, 'owner': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download?file_name=file1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'file1', 'size': 100, 'owner': 'test@test.com', 'versions': None}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 963, "prompt_tokens": 1611, "total_tokens": 2574}}]