[{"id": "chatcmpl-83aFmC6kjh0Gt9l040umlWbzkzupz", "object": "chat.completion", "created": 1695865034, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom file_manager import FileManager\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User()\\n\\tresponse = user.register(data)\\n\\treturn jsonify(response)\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User()\\n\\tresponse = user.login(data)\\n\\treturn jsonify(response)\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile_manager = FileManager()\\n\\tresponse = file_manager.upload(data)\\n\\treturn jsonify(response)\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\tfile_manager = FileManager()\\n\\tresponse = file_manager.download(data)\\n\\treturn jsonify(response)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"class User:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef register(self, data):\\n\\t\\tname = data.get('name')\\n\\t\\temail = data.get('email')\\n\\t\\tpassword = data.get('password')\\n\\t\\tif not name or not email or not password:\\n\\t\\t\\treturn {'status': 'error', 'message': 'Missing required fields'}\\n\\t\\tif email in self.users:\\n\\t\\t\\treturn {'status': 'error', 'message': 'User already exists'}\\n\\t\\tself.users[email] = {'name': name, 'password': password}\\n\\t\\treturn {'status': 'success', 'message': 'User registered successfully'}\\n\\n\\tdef login(self, data):\\n\\t\\temail = data.get('email')\\n\\t\\tpassword = data.get('password')\\n\\t\\tif not email or not password:\\n\\t\\t\\treturn {'status': 'error', 'message': 'Missing required fields'}\\n\\t\\tif email not in self.users or self.users[email]['password'] != password:\\n\\t\\t\\treturn {'status': 'error', 'message': 'Invalid credentials'}\\n\\t\\treturn {'status': 'success', 'message': 'User logged in successfully'}\"\n    },\n    {\n      \"file_path\": \"file_manager.py\",\n      \"file_contents\": \"class FileManager:\\n\\tdef __init__(self):\\n\\t\\tself.files = {}\\n\\n\\tdef upload(self, data):\\n\\t\\tfile = data.get('file')\\n\\t\\tif not file:\\n\\t\\t\\treturn {'status': 'error', 'message': 'No file provided'}\\n\\t\\tself.files[file['name']] = file['content']\\n\\t\\treturn {'status': 'success', 'message': 'File uploaded successfully'}\\n\\n\\tdef download(self, data):\\n\\t\\tfile_name = data.get('file_name')\\n\\t\\tif not file_name:\\n\\t\\t\\treturn {'status': 'error', 'message': 'No file name provided'}\\n\\t\\tif file_name not in self.files:\\n\\t\\t\\treturn {'status': 'error', 'message': 'File not found'}\\n\\t\\treturn {'status': 'success', 'message': 'File downloaded successfully', 'file': {'name': file_name, 'content': self.files[file_name]}}\"\n    },\n    {\n      \"file_path\": \"test_user.py\",\n      \"file_contents\": \"import pytest\\nfrom user import User\\n\\ndef test_register():\\n\\tuser = User()\\n\\tresponse = user.register({'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'User registered successfully'\\n\\n\\tresponse = user.register({'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'User already exists'\\n\\n\\tresponse = user.register({'name': 'Test', 'email': '', 'password': 'test123'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Missing required fields'\\n\\n\\tresponse = user.register({'name': '', 'email': 'test@test.com', 'password': ''})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Missing required fields'\\n\\ndef test_login():\\n\\tuser = User()\\n\\tuser.register({'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\n\\tresponse = user.login({'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'User logged in successfully'\\n\\n\\tresponse = user.login({'email': 'test@test.com', 'password': 'wrongpassword'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Invalid credentials'\\n\\n\\tresponse = user.login({'email': '', 'password': 'test123'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Missing required fields'\\n\\n\\tresponse = user.login({'email': 'test@test.com', 'password': ''})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Missing required fields'}\"\n    },\n    {\n      \"file_path\": \"test_file_manager.py\",\n      \"file_contents\": \"import pytest\\nfrom file_manager import FileManager\\n\\ndef test_upload():\\n\\tfile_manager = FileManager()\\n\\tresponse = file_manager.upload({'file': {'name': 'test.txt', 'content': 'Hello, World!'}})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'File uploaded successfully'\\n\\n\\tresponse = file_manager.upload({})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'No file provided'}\\n\\ndef test_download():\\n\\tfile_manager = FileManager()\\n\\tfile_manager.upload({'file': {'name': 'test.txt', 'content': 'Hello, World!'}})\\n\\n\\tresponse = file_manager.download({'file_name': 'test.txt'})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'File downloaded successfully'\\n\\tassert response['file']['name'] == 'test.txt'\\n\\tassert response['file']['content'] == 'Hello, World!'\\n\\n\\tresponse = file_manager.download({'file_name': 'nonexistent.txt'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'File not found'\\n\\n\\tresponse = file_manager.download({})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'No file name provided'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1579, "prompt_tokens": 1611, "total_tokens": 3190}}]