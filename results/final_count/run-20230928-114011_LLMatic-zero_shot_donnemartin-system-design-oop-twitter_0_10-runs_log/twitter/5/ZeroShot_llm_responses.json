[{"id": "chatcmpl-83lCJujMoCFXLUkR79aiHchjmnejW", "object": "chat.completion", "created": 1695907103, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[username] = {'email': email, 'password': password, 'profile': {}, 'posts': [], 'following': [], 'followers': [], 'notifications': []}\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username]['password'] != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.register()\\n\\tassert response.status_code == 200\\n\\tassert 'User registered successfully' in response.get_data(as_text=True)\\n\\n\\tresponse = app.register()\\n\\tassert response.status_code == 400\\n\\tassert 'User already exists' in response.get_data(as_text=True)\\n\\n\\tapp.users = {}\\n\\n\\ndef test_login():\\n\\tapp.users = {'test': {'password': 'test'}}\\n\\tresponse = app.login()\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_data(as_text=True)\\n\\n\\tresponse = app.login()\\n\\tassert response.status_code == 400\\n\\tassert 'Invalid username or password' in response.get_data(as_text=True)\\n\\n\\tapp.users = {}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 555, "prompt_tokens": 1637, "total_tokens": 2192}}]