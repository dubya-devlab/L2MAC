[{"id": "chatcmpl-8JwIRcrfHTW4fpw8u3x9xDQWMg3pr", "object": "chat.completion", "created": 1699763015, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@dataclass\\nclass Message:\\n\\tfrom_user: str\\n\\tto_user: str\\n\\tmessage: str\\n\\tread: bool = False\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\tmessage = Message(**data)\\n\\tmessages.setdefault(message.from_user, []).append(message)\\n\\treturn jsonify({'message': 'Message sent successfully'}), 201\\n\\n@app.route('/message', methods=['GET'])\\ndef get_messages():\\n\\tfrom_user = request.args.get('from_user')\\n\\tto_user = request.args.get('to_user')\\n\\tuser_messages = messages.get(from_user, [])\\n\\tfiltered_messages = [message for message in user_messages if message.to_user == to_user]\\n\\treturn jsonify([message.__dict__ for message in filtered_messages]), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport json\\nfrom app import app, User, Message, users, messages\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\n@pytest.fixture\\ndef sample_message(sample_user):\\n\\treturn Message(sample_user.email, 'recipient@example.com', 'Hello, World!')\\n\\ndef test_register(client, sample_user):\\n\\tresponse = client.post('/register', data=json.dumps(sample_user.__dict__), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert users[sample_user.email] == sample_user\\n\\ndef test_login(client, sample_user):\\n\\tusers[sample_user.email] = sample_user\\n\\tresponse = client.post('/login', data=json.dumps({'email': sample_user.email, 'password': sample_user.password}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\ndef test_send_message(client, sample_user, sample_message):\\n\\tusers[sample_user.email] = sample_user\\n\\tresponse = client.post('/message', data=json.dumps(sample_message.__dict__), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert messages[sample_user.email][0] == sample_message\\n\\ndef test_get_messages(client, sample_user, sample_message):\\n\\tusers[sample_user.email] = sample_user\\n\\tmessages[sample_user.email] = [sample_message]\\n\\tresponse = client.get(f'/message?from_user={sample_user.email}&to_user={sample_message.to_user}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()[0] == sample_message.__dict__\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 888, "total_tokens": 2266}}]