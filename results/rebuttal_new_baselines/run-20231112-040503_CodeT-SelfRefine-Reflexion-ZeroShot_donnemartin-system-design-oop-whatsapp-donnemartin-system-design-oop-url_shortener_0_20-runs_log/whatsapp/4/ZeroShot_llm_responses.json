[{"id": "chatcmpl-8Jx4MnAUjQWRkhDtnPQJC1U9tkfEl", "object": "chat.completion", "created": 1699765986, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or password'}), 400\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'error': 'Email already registered'}), 400\\n\\tusers[data['email']] = {'password': data['password']}\\n\\treturn jsonify({'success': 'User registered'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or password'}), 400\\n\\tif data['email'] not in users or users[data['email']]['password'] != data['password']:\\n\\t\\treturn jsonify({'error': 'Invalid email or password'}), 400\\n\\treturn jsonify({'success': 'User logged in'}), 200\\n\\n@app.route('/send_message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\tif 'sender' not in data or 'receiver' not in data or 'message' not in data:\\n\\t\\treturn jsonify({'error': 'Missing sender, receiver or message'}), 400\\n\\tif data['sender'] not in users or data['receiver'] not in users:\\n\\t\\treturn jsonify({'error': 'Invalid sender or receiver'}), 400\\n\\tmessages.setdefault(data['sender'], []).append({'to': data['receiver'], 'message': data['message']})\\n\\treturn jsonify({'success': 'Message sent'}), 200\\n\\n@app.route('/get_messages', methods=['GET'])\\ndef get_messages():\\n\\tuser = request.args.get('user')\\n\\tif user not in users:\\n\\t\\treturn jsonify({'error': 'Invalid user'}), 400\\n\\treturn jsonify({'messages': messages.get(user, [])}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'success': 'User registered'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'error': 'Email already registered'}\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'success': 'User logged in'}\\n\\n\\tresponse = client.post('/login', json={'email': 'wrong@test.com', 'password': 'test'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'error': 'Invalid email or password'}\\n\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'wrong'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'error': 'Invalid email or password'}\\n\\ndef test_send_message(client):\\n\\tresponse = client.post('/send_message', json={'sender': 'test@test.com', 'receiver': 'test2@test.com', 'message': 'Hello'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'error': 'Invalid sender or receiver'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test2@test.com', 'password': 'test2'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'success': 'User registered'}\\n\\n\\tresponse = client.post('/send_message', json={'sender': 'test@test.com', 'receiver': 'test2@test.com', 'message': 'Hello'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'success': 'Message sent'}\\n\\ndef test_get_messages(client):\\n\\tresponse = client.get('/get_messages?user=test@test.com')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'messages': [{'to': 'test2@test.com', 'message': 'Hello'}]}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 1119, "total_tokens": 2497}}]