[{"id": "chatcmpl-8K1o8oQlhpsxUuPxLPAzOtjdanvdo", "object": "chat.completion", "created": 1699784200, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'message': 'Missing email or password'}), 400\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'Email already registered'}), 400\\n\\tusers[data['email']] = {'password': data['password']}\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'message': 'Missing email or password'}), 400\\n\\tif data['email'] not in users or users[data['email']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'User logged in successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Email already registered'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User logged in successfully'}\\n\\n\\tresponse = client.post('/login', json={'email': 'wrong@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Invalid email or password'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 611, "total_tokens": 1989}}, {"id": "chatcmpl-8K1oXTqvloiupX5jrAa4KWLpitOXB", "object": "chat.completion", "created": 1699784225, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@dataclass\\nclass Message:\\n\\tfrom_user: str\\n\\tto_user: str\\n\\tmessage: str\\n\\tread: bool = False\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/send_message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\tmessage = Message(**data)\\n\\tmessages.setdefault(message.to_user, []).append(message)\\n\\treturn jsonify({'message': 'Message sent successfully'}), 201\\n\\n@app.route('/read_messages', methods=['GET'])\\ndef read_messages():\\n\\temail = request.args.get('email')\\n\\tuser_messages = messages.get(email, [])\\n\\tfor message in user_messages:\\n\\t\\tmessage.read = True\\n\\treturn jsonify([message.__dict__ for message in user_messages]), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_send_message(client):\\n\\tclient.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tclient.post('/register', json={'name': 'Test User 2', 'email': 'test2@example.com', 'password': 'password'})\\n\\tresponse = client.post('/send_message', json={'from_user': 'test@example.com', 'to_user': 'test2@example.com', 'message': 'Hello'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Message sent successfully'}\\n\\n\\ndef test_read_messages(client):\\n\\tclient.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tclient.post('/register', json={'name': 'Test User 2', 'email': 'test2@example.com', 'password': 'password'})\\n\\tclient.post('/send_message', json={'from_user': 'test@example.com', 'to_user': 'test2@example.com', 'message': 'Hello'})\\n\\tresponse = client.get('/read_messages?email=test2@example.com')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == [{'from_user': 'test@example.com', 'to_user': 'test2@example.com', 'message': 'Hello', 'read': True}]\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 985, "total_tokens": 2363}}, {"id": "chatcmpl-8K1pI9AKUnIVdT0yBymkSreOr9F7C", "object": "chat.completion", "created": 1699784272, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = user.User(data['email'], data['password'])\\n\\tuser.users_db[new_user.email] = new_user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser_in_db = user.users_db.get(data['email'])\\n\\tif not user_in_db or user_in_db.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\nusers_db = {}\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tpassword: str\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport user\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\tassert 'test@test.com' in user.users_db\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_login_fail(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'wrongpassword'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid email or password'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 544, "total_tokens": 1922}}]