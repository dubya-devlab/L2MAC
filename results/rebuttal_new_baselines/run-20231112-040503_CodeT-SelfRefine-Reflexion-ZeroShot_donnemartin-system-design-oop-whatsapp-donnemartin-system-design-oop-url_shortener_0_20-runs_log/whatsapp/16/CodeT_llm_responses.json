[{"id": "chatcmpl-8K0vy6oeMs3YgZovFy37enRmn4BNV", "object": "chat.completion", "created": 1699780842, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstatus_message: str\\n\\tprivacy_settings: dict\\n\\tcontacts: list\\n\\tblocked_contacts: list\\n\\tgroups: list\\n\\tmessages: list\\n\\tstatus: list\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'Email already exists.'}), 400\\n\\tuser = User(data['email'], data['password'], '', '', {}, [], [], [], [], [])\\n\\tusers[data['email']] = user\\n\\treturn jsonify({'message': 'User created successfully.'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['email'] not in users or users[data['email']].password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password.'}), 400\\n\\tsessions[data['email']] = True\\n\\treturn jsonify({'message': 'Logged in successfully.'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\tif data['email'] not in sessions:\\n\\t\\treturn jsonify({'message': 'User not logged in.'}), 400\\n\\tdel sessions[data['email']]\\n\\treturn jsonify({'message': 'Logged out successfully.'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\nfrom flask import Flask\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_signup(client):\\n\\tresponse = client.post('/signup', data=json.dumps({'email': 'test@test.com', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created successfully.'\\n\\n\\tresponse = client.post('/signup', data=json.dumps({'email': 'test@test.com', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['message'] == 'Email already exists.'\\n\\ndef test_login_logout(client):\\n\\tresponse = client.post('/login', data=json.dumps({'email': 'test@test.com', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged in successfully.'\\n\\n\\tresponse = client.post('/logout', data=json.dumps({'email': 'test@test.com'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged out successfully.'\\n\\n\\tresponse = client.post('/login', data=json.dumps({'email': 'wrong@test.com', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['message'] == 'Invalid email or password.'\\n\\n\\tresponse = client.post('/logout', data=json.dumps({'email': 'wrong@test.com'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['message'] == 'User not logged in.'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 846, "total_tokens": 2224}}, {"id": "chatcmpl-8K0wilzX9qn8l8dsezf2tFzxGMEHK", "object": "chat.completion", "created": 1699780888, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn {\\n\\t\\t'name': 'Test User',\\n\\t\\t'email': 'test@example.com',\\n\\t\\t'password': 'password'\\n\\t}\\n\\n\\ndef test_signup(client, sample_user):\\n\\tresponse = client.post('/signup', data=json.dumps(sample_user), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert b'User created successfully' in response.data\\n\\n\\ndef test_login(client, sample_user):\\n\\tclient.post('/signup', data=json.dumps(sample_user), content_type='application/json')\\n\\tresponse = client.post('/login', data=json.dumps(sample_user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'Logged in successfully' in response.data\\n\\n\\ndef test_logout(client, sample_user):\\n\\tclient.post('/signup', data=json.dumps(sample_user), content_type='application/json')\\n\\tclient.post('/login', data=json.dumps(sample_user), content_type='application/json')\\n\\tresponse = client.post('/logout', data=json.dumps({'email': sample_user['email']}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'Logged out successfully' in response.data\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 699, "total_tokens": 2077}}, {"id": "chatcmpl-8K0xCdeU5l6DMGPJnU2TkTn8lu3um", "object": "chat.completion", "created": 1699780918, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/chat', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chat/<chat_id>/message', methods=['POST'])\\ndef send_message(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn {'message': 'Chat not found'}, 404\\n\\tmessage = chat.send_message(data['user_id'], data['content'])\\n\\treturn jsonify(message.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nimport uuid\\n\\n@dataclass\\n\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.email = email\\n\\t\\tself.password = password\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'email': self.email}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nimport uuid\\n\\n@dataclass\\n\\nclass Message:\\n\\tid: str\\n\\tuser_id: str\\n\\tcontent: str\\n\\n\\tdef __init__(self, user_id, content):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.user_id = user_id\\n\\t\\tself.content = content\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'user_id': self.user_id, 'content': self.content}\\n\\n@dataclass\\n\\nclass Chat:\\n\\tid: str\\n\\tname: str\\n\\tmessages: list\\n\\n\\tdef __init__(self, name):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.name = name\\n\\t\\tself.messages = []\\n\\n\\tdef send_message(self, user_id, content):\\n\\t\\tmessage = Message(user_id, content)\\n\\t\\tself.messages.append(message)\\n\\t\\treturn message\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'name': self.name, 'messages': [message.to_dict() for message in self.messages]}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['email'] == 'test@test.com'\\n\\n\\ndef test_login(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tdata = response.get_json()\\n\\tassert data['id'] == user.id\\n\\tassert data['email'] == 'test@test.com'\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/chat', json={'name': 'Test Chat'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['name'] == 'Test Chat'\\n\\tassert data['messages'] == []\\n\\n\\ndef test_send_message(client):\\n\\tchat = Chat('Test Chat')\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.post(f'/chat/{chat.id}/message', json={'user_id': '1', 'content': 'Hello, world!'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['user_id'] == '1'\\n\\tassert data['content'] == 'Hello, world!'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 1175, "total_tokens": 2553}}]