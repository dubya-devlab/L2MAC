[{"id": "chatcmpl-8Jy7icUHh7LqkUi3qNUOTddvM4nFd", "object": "chat.completion", "created": 1699770038, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn {\\n\\t\\t'name': 'Test User',\\n\\t\\t'email': 'test@example.com',\\n\\t\\t'password': 'password'\\n\\t}\\n\\n\\ndef test_signup(client, sample_user):\\n\\tresponse = client.post('/signup', data=json.dumps(sample_user), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert b'User created successfully' in response.data\\n\\n\\ndef test_login(client, sample_user):\\n\\tclient.post('/signup', data=json.dumps(sample_user), content_type='application/json')\\n\\tresponse = client.post('/login', data=json.dumps(sample_user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'Logged in successfully' in response.data\\n\\n\\ndef test_logout(client, sample_user):\\n\\tclient.post('/signup', data=json.dumps(sample_user), content_type='application/json')\\n\\tclient.post('/login', data=json.dumps(sample_user), content_type='application/json')\\n\\tresponse = client.post('/logout', data=json.dumps({'email': sample_user['email']}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'Logged out successfully' in response.data\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 700, "total_tokens": 2078}}]