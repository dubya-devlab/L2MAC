[{"id": "chatcmpl-8JxycB718FliPr68Wg0ClwFOgf8Ej", "object": "chat.completion", "created": 1699769474, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstatus_message: str\\n\\tprivacy_settings: dict\\n\\tcontacts: list\\n\\tblocked_contacts: list\\n\\tgroups: list\\n\\tmessages: list\\n\\tstatus: list\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'Email already exists'}), 400\\n\\tuser = User(name=data['name'], email=data['email'], password=data['password'], profile_picture='', status_message='', privacy_settings={}, contacts=[], blocked_contacts=[], groups=[], messages=[], status=[])\\n\\tusers[data['email']] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['email'] not in users or users[data['email']].password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 400\\n\\tsessions[data['email']] = True\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\tif data['email'] not in sessions:\\n\\t\\treturn jsonify({'message': 'User not logged in'}), 400\\n\\tdel sessions[data['email']]\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_signup(client):\\n\\tresponse = client.post('/signup', data=json.dumps({'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created successfully'\\n\\n\\tresponse = client.post('/signup', data=json.dumps({'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['message'] == 'Email already exists'\\n\\n\\ndef test_login_logout(client):\\n\\tresponse = client.post('/login', data=json.dumps({'email': 'test@example.com', 'password': 'password'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged in successfully'\\n\\n\\tresponse = client.post('/logout', data=json.dumps({'email': 'test@example.com'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged out successfully'\\n\\n\\tresponse = client.post('/login', data=json.dumps({'email': 'test@example.com', 'password': 'wrongpassword'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['message'] == 'Invalid email or password'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 821, "total_tokens": 2199}}, {"id": "chatcmpl-8JxzENclorWzRn1gy9PBFmymn1q3L", "object": "chat.completion", "created": 1699769512, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn jsonify({'error': 'Invalid credentials'}), 401\\n\\n@app.route('/chat', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nimport uuid\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.email = email\\n\\t\\tself.password = password\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nimport uuid\\n\\n@dataclass\\nclass Chat:\\n\\tid: str\\n\\tname: str\\n\\n\\tdef __init__(self, name):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.name = name\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'name': self.name\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\tassert response.get_json()['email'] == 'test@test.com'\\n\\n\\ndef test_login(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['id'] == user.id\\n\\tassert response.get_json()['email'] == 'test@test.com'\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/chat', json={'name': 'Test Chat'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\tassert response.get_json()['name'] == 'Test Chat'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 808, "total_tokens": 2186}}, {"id": "chatcmpl-8Jy0IqH9zPIX8myD3OntYHC80tfLa", "object": "chat.completion", "created": 1699769578, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\nusers = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\tcontacts: list = None\\n\\tgroups: list = None\\n\\tmessages: list = None\\n\\tstatus: list = None\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Login successful'}\\n\\n\\ndef test_login_invalid_credentials(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'wrongpassword'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid credentials'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 535, "total_tokens": 1913}}]