[{"id": "chatcmpl-8JxVOoWb0mGKBVh3QqGmbtHL4VG0J", "object": "chat.completion", "created": 1699767662, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.password = 'new_password'\\n\\treturn jsonify({'message': 'Password reset successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport json\\nfrom app import app, User, users\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\ndef test_signup(client, user):\\n\\tresponse = client.post('/signup', data=json.dumps(user.__dict__), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert users.get(user.email) == user\\n\\ndef test_login(client, user):\\n\\tusers[user.email] = user\\n\\tresponse = client.post('/login', data=json.dumps({'email': user.email, 'password': user.password}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\ndef test_logout(client, user):\\n\\tusers[user.email] = user\\n\\tresponse = client.post('/logout', data=json.dumps({'email': user.email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\ndef test_forgot_password(client, user):\\n\\tusers[user.email] = user\\n\\tresponse = client.post('/forgot_password', data=json.dumps({'email': user.email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert users.get(user.email).password == 'new_password'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 771, "total_tokens": 2149}}]