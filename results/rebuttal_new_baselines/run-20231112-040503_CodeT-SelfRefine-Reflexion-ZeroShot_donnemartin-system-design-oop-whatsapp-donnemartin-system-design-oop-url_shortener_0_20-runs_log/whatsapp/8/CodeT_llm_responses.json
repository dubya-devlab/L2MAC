[{"id": "chatcmpl-8JyIkOxeK9aFpULqrQ0In37bgiIPa", "object": "chat.completion", "created": 1699770722, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstatus_message: str\\n\\tprivacy_settings: dict\\n\\tcontacts: list\\n\\tblocked_contacts: list\\n\\tgroups: list\\n\\tmessages: list\\n\\tstatus: list\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_signup(client):\\n\\tresponse = client.post('/signup', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'test123', 'profile_picture': '', 'status_message': '', 'privacy_settings': {}, 'contacts': [], 'blocked_contacts': [], 'groups': [], 'messages': [], 'status': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_logout(client):\\n\\tresponse = client.post('/logout', json={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged out successfully'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 654, "total_tokens": 2032}}, {"id": "chatcmpl-8JyJ9NPxaTOfTOf2KPXmLjG9kiU8J", "object": "chat.completion", "created": 1699770747, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\ngroups = {}\\nstatuses = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstatus_message: str\\n\\tprivacy_settings: dict\\n\\tblocked_contacts: list\\n\\n@dataclass\\nclass Message:\\n\\tid: str\\n\\tsender_id: str\\n\\treceiver_id: str\\n\\tcontent: str\\n\\tread: bool\\n\\tencrypted: bool\\n\\n@dataclass\\nclass Group:\\n\\tid: str\\n\\tname: str\\n\\tpicture: str\\n\\tmembers: list\\n\\tadmins: list\\n\\n@dataclass\\nclass Status:\\n\\tid: str\\n\\tuser_id: str\\n\\tcontent: str\\n\\tvisible_to: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.id] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user and user.email == data['email']:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn jsonify({'message': 'Password reset successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/update_profile', methods=['POST'])\\ndef update_profile():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user:\\n\\t\\tuser.profile_picture = data.get('profile_picture', user.profile_picture)\\n\\t\\tuser.status_message = data.get('status_message', user.status_message)\\n\\t\\tuser.privacy_settings = data.get('privacy_settings', user.privacy_settings)\\n\\t\\treturn jsonify({'message': 'Profile updated successfully'}), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/block_contact', methods=['POST'])\\ndef block_contact():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user:\\n\\t\\tuser.blocked_contacts.append(data['contact_id'])\\n\\t\\treturn jsonify({'message': 'Contact blocked successfully'}), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/unblock_contact', methods=['POST'])\\ndef unblock_contact():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user:\\n\\t\\tuser.blocked_contacts.remove(data['contact_id'])\\n\\t\\treturn jsonify({'message': 'Contact unblocked successfully'}), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/create_group', methods=['POST'])\\ndef create_group():\\n\\tdata = request.get_json()\\n\\tgroup = Group(**data)\\n\\tgroups[group.id] = group\\n\\treturn jsonify({'message': 'Group created successfully'}), 201\\n\\n@app.route('/edit_group', methods=['POST'])\\ndef edit_group():\\n\\tdata = request.get_json()\\n\\tgroup = groups.get(data['id'])\\n\\tif group:\\n\\t\\tgroup.name = data.get('name', group.name)\\n\\t\\tgroup.picture = data.get('picture', group.picture)\\n\\t\\tgroup.members = data.get('members', group.members)\\n\\t\\tgroup.admins = data.get('admins', group.admins)\\n\\t\\treturn jsonify({'message': 'Group updated successfully'}), 200\\n\\treturn jsonify({'message': 'Group not found'}), 404\\n\\n@app.route('/send_message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\tmessage = Message(**data)\\n\\tmessages[message.id] = message\\n\\treturn jsonify({'message': 'Message sent successfully'}), 201\\n\\n@app.route('/read_message', methods=['POST'])\\ndef read_message():\\n\\tdata = request.get_json()\\n\\tmessage = messages.get(data['id'])\\n\\tif message:\\n\\t\\tmessage.read = True\\n\\t\\treturn jsonify({'message': 'Message marked as read'}), 200\\n\\treturn jsonify({'message': 'Message not found'}), 404\\n\\n@app.route('/post_status', methods=['POST'])\\ndef post_status():\\n\\tdata = request.get_json()\\n\\tstatus = Status(**data)\\n\\tstatuses[status.id] = status\\n\\treturn jsonify({'message': 'Status posted successfully'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn {\\n\\t\\t'id': '1',\\n\\t\\t'email': 'test@example.com',\\n\\t\\t'password': 'password',\\n\\t\\t'profile_picture': '',\\n\\t\\t'status_message': '',\\n\\t\\t'privacy_settings': {},\\n\\t\\t'blocked_contacts': []\\n\\t}\\n\\n@pytest.fixture\\ndef sample_message():\\n\\treturn {\\n\\t\\t'id': '1',\\n\\t\\t'sender_id': '1',\\n\\t\\t'receiver_id': '2',\\n\\t\\t'content': 'Hello, World!',\\n\\t\\t'read': False,\\n\\t\\t'encrypted': False\\n\\t}\\n\\n@pytest.fixture\\ndef sample_group():\\n\\treturn {\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test Group',\\n\\t\\t'picture': '',\\n\\t\\t'members': ['1', '2'],\\n\\t\\t'admins': ['1']\\n\\t}\\n\\n@pytest.fixture\\ndef sample_status():\\n\\treturn {\\n\\t\\t'id': '1',\\n\\t\\t'user_id': '1',\\n\\t\\t'content': 'Hello, World!',\\n\\t\\t'visible_to': ['2']\\n\\t}\\n\\n\\ndef test_register(client, sample_user):\\n\\tresponse = client.post('/register', data=json.dumps(sample_user), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert app.users['1'] == app.User(**sample_user)\\n\\n\\ndef test_login(client, sample_user):\\n\\tapp.users['1'] = app.User(**sample_user)\\n\\tresponse = client.post('/login', data=json.dumps({'id': '1', 'password': 'password'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_forgot_password(client, sample_user):\\n\\tapp.users['1'] = app.User(**sample_user)\\n\\tresponse = client.post('/forgot_password', data=json.dumps({'id': '1', 'email': 'test@example.com', 'new_password': 'new_password'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert app.users['1'].password == 'new_password'\\n\\n\\ndef test_update_profile(client, sample_user):\\n\\tapp.users['1'] = app.User(**sample_user)\\n\\tresponse = client.post('/update_profile', data=json.dumps({'id': '1', 'profile_picture': 'new_picture', 'status_message': 'new_status', 'privacy_settings': {'last_seen': 'everyone'}}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert app.users['1'].profile_picture == 'new_picture'\\n\\tassert app.users['1'].status_message == 'new_status'\\n\\tassert app.users['1'].privacy_settings == {'last_seen': 'everyone'}\\n\\n\\ndef test_block_contact(client, sample_user):\\n\\tapp.users['1'] = app.User(**sample_user)\\n\\tresponse = client.post('/block_contact', data=json.dumps({'id': '1', 'contact_id': '2'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert '2' in app.users['1'].blocked_contacts\\n\\n\\ndef test_unblock_contact(client, sample_user):\\n\\tapp.users['1'] = app.User(**sample_user)\\n\\tapp.users['1'].blocked_contacts.append('2')\\n\\tresponse = client.post('/unblock_contact', data=json.dumps({'id': '1', 'contact_id': '2'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert '2' not in app.users['1'].blocked_contacts\\n\\n\\ndef test_create_group(client, sample_group):\\n\\tresponse = client.post('/create_group', data=json.dumps(sample_group), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert app.groups['1'] == app.Group(**sample_group)\\n\\n\\ndef test_edit_group(client, sample_group):\\n\\tapp.groups['1'] = app.Group(**sample_group)\\n\\tresponse = client.post('/edit_group', data=json.dumps({'id': '1', 'name': 'New Group', 'picture': 'new_picture', 'members': ['1', '2', '3'], 'admins': ['1', '2']}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert app.groups['1'].name == 'New Group'\\n\\tassert app.groups['1'].picture == 'new_picture'\\n\\tassert app.groups['1'].members == ['1', '2', '3']\\n\\tassert app.groups['1'].admins == ['1', '2']\\n\\n\\ndef test_send_message(client, sample_message):\\n\\tresponse = client.post('/send_message', data=json.dumps(sample_message), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert app.messages['1'] == app.Message(**sample_message)\\n\\n\\ndef test_read_message(client, sample_message):\\n\\tapp.messages['1'] = app.Message(**sample_message)\\n\\tresponse = client.post('/read_message', data=json.dumps({'id': '1'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert app.messages['1'].read == True\\n\\n\\ndef test_post_status(client, sample_status):\\n\\tresponse = client.post('/post_status', data=json.dumps(sample_status), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert app.statuses['1'] == app.Status(**sample_status)\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 2471, "total_tokens": 3849}}, {"id": "chatcmpl-8JyKNIZrX1TSIJRCoWox6t5Er8Fcp", "object": "chat.completion", "created": 1699770823, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstatus_message: str\\n\\tprivacy_settings: dict\\n\\tcontacts: list\\n\\tblocked_contacts: list\\n\\tgroups: list\\n\\tmessages: list\\n\\tstatus: list\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.password = 'new_password'\\n\\treturn jsonify({'message': 'Password reset successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn {\\n\\t\\t'name': 'Test User',\\n\\t\\t'email': 'test@example.com',\\n\\t\\t'password': 'password',\\n\\t\\t'profile_picture': '',\\n\\t\\t'status_message': '',\\n\\t\\t'privacy_settings': {},\\n\\t\\t'contacts': [],\\n\\t\\t'blocked_contacts': [],\\n\\t\\t'groups': [],\\n\\t\\t'messages': [],\\n\\t\\t'status': []\\n\\t}\\n\\ndef test_signup(client, user):\\n\\tresponse = client.post('/signup', data=json.dumps(user), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created successfully'\\n\\n\\ndef test_login(client, user):\\n\\tresponse = client.post('/login', data=json.dumps({'email': user['email'], 'password': user['password']}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged in successfully'\\n\\n\\ndef test_logout(client, user):\\n\\tresponse = client.post('/logout', data=json.dumps({'email': user['email']}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged out successfully'\\n\\n\\ndef test_forgot_password(client, user):\\n\\tresponse = client.post('/forgot_password', data=json.dumps({'email': user['email']}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Password reset successfully'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 897, "total_tokens": 2275}}]