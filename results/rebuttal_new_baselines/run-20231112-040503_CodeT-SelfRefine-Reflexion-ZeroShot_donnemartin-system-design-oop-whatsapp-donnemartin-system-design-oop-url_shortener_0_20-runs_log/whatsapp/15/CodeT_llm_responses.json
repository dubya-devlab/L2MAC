[{"id": "chatcmpl-8K0f0TSiySbBFnQoHhspcf0j3LlNi", "object": "chat.completion", "created": 1699779790, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'message': 'Missing email or password'}), 400\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'message': 'Email already registered'}), 400\\n\\tusers[data['email']] = {'password': data['password']}\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'message': 'Missing email or password'}), 400\\n\\tif data['email'] not in users or users[data['email']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'User logged in successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Email already registered'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User logged in successfully'}\\n\\n\\tresponse = client.post('/login', json={'email': 'wrong@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Invalid email or password'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 611, "total_tokens": 1989}}, {"id": "chatcmpl-8K0fMFHYU77ZKjdO9VTomVwlxvcIl", "object": "chat.completion", "created": 1699779812, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = user.User(data['email'], data['password'])\\n\\tuser.users_db[new_user.email] = new_user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser_in_db = user.users_db.get(data['email'])\\n\\tif not user_in_db or user_in_db.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\nusers_db = {}\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tpassword: str\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport user\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef init_db():\\n\\tuser.users_db = {}\\n\\ndef test_register(client, init_db):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\tassert 'test@test.com' in user.users_db\\n\\ndef test_login(client, init_db):\\n\\tuser.users_db['test@test.com'] = user.User('test@test.com', 'test123')\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'wrongpassword'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid email or password'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 582, "total_tokens": 1960}}, {"id": "chatcmpl-8K0frocOafaD21xlODCm08n0NNVEA", "object": "chat.completion", "created": 1699779843, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.check_password(data['password']):\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/users/<user_id>/chats', methods=['POST'])\\ndef create_chat(user_id):\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\tusers[user_id].chats.append(chat.id)\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/users/<user_id>/chats/<chat_id>/messages', methods=['POST'])\\ndef send_message(user_id, chat_id):\\n\\tdata = request.get_json()\\n\\tmessage = chats[chat_id].send_message(user_id, data['content'])\\n\\treturn jsonify(message), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\t_password: str\\n\\tchats: List[str] = field(default_factory=list)\\n\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = generate_password_hash(email)\\n\\t\\tself.email = email\\n\\t\\tself._password = generate_password_hash(password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self._password, password)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'email': self.email, 'chats': self.chats}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nfrom werkzeug.security import generate_password_hash\\n\\n@dataclass\\nclass Message:\\n\\tuser_id: str\\n\\tcontent: str\\n\\n@dataclass\\nclass Chat:\\n\\tid: str\\n\\tname: str\\n\\tmessages: List[Message] = field(default_factory=list)\\n\\n\\tdef __init__(self, name):\\n\\t\\tself.id = generate_password_hash(name)\\n\\t\\tself.name = name\\n\\n\\tdef send_message(self, user_id, content):\\n\\t\\tmessage = Message(user_id, content)\\n\\t\\tself.messages.append(message)\\n\\t\\treturn message\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'name': self.name, 'messages': [message.__dict__ for message in self.messages]}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User('test@test.com', 'password')\\n\\n@pytest.fixture\\ndef chat():\\n\\treturn Chat('Test Chat')\\n\\n\\ndef test_register(client, user):\\n\\tresponse = client.post('/register', json=user.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user.to_dict()\\n\\n\\ndef test_login(client, user):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': user.email, 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\n\\ndef test_create_chat(client, user, chat):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post(f'/users/{user.id}/chats', json=chat.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == chat.to_dict()\\n\\n\\ndef test_send_message(client, user, chat):\\n\\tapp.users[user.id] = user\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.post(f'/users/{user.id}/chats/{chat.id}/messages', json={'content': 'Hello, World!'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'user_id': user.id, 'content': 'Hello, World!'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 1129, "total_tokens": 2507}}]