[{"id": "chatcmpl-8JwfILHKU0EocOwNkZPshMg4lLrfl", "object": "chat.completion", "created": 1699764432, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstatus_message: str\\n\\tprivacy_settings: dict\\n\\tcontacts: list\\n\\tblocked_contacts: list\\n\\tgroups: list\\n\\tmessages: list\\n\\tstatus: list\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.password = 'new_password'\\n\\treturn jsonify({'message': 'Password reset successfully'}), 200\\n\\n@app.route('/set_profile_picture', methods=['POST'])\\ndef set_profile_picture():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tprofile_picture = data.get('profile_picture')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.profile_picture = profile_picture\\n\\treturn jsonify({'message': 'Profile picture set successfully'}), 200\\n\\n@app.route('/set_status_message', methods=['POST'])\\ndef set_status_message():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tstatus_message = data.get('status_message')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.status_message = status_message\\n\\treturn jsonify({'message': 'Status message set successfully'}), 200\\n\\n@app.route('/set_privacy_settings', methods=['POST'])\\ndef set_privacy_settings():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tprivacy_settings = data.get('privacy_settings')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.privacy_settings = privacy_settings\\n\\treturn jsonify({'message': 'Privacy settings set successfully'}), 200\\n\\n@app.route('/block_contact', methods=['POST'])\\ndef block_contact():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tcontact_email = data.get('contact_email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.blocked_contacts.append(contact_email)\\n\\treturn jsonify({'message': 'Contact blocked successfully'}), 200\\n\\n@app.route('/unblock_contact', methods=['POST'])\\ndef unblock_contact():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tcontact_email = data.get('contact_email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.blocked_contacts.remove(contact_email)\\n\\treturn jsonify({'message': 'Contact unblocked successfully'}), 200\\n\\n@app.route('/create_group', methods=['POST'])\\ndef create_group():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tgroup_name = data.get('group_name')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.groups.append(group_name)\\n\\treturn jsonify({'message': 'Group created successfully'}), 200\\n\\n@app.route('/edit_group', methods=['POST'])\\ndef edit_group():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\told_group_name = data.get('old_group_name')\\n\\tnew_group_name = data.get('new_group_name')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.groups.remove(old_group_name)\\n\\tuser.groups.append(new_group_name)\\n\\treturn jsonify({'message': 'Group edited successfully'}), 200\\n\\n@app.route('/delete_group', methods=['POST'])\\ndef delete_group():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tgroup_name = data.get('group_name')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.groups.remove(group_name)\\n\\treturn jsonify({'message': 'Group deleted successfully'}), 200\\n\\n@app.route('/send_message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tmessage = data.get('message')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.messages.append(message)\\n\\treturn jsonify({'message': 'Message sent successfully'}), 200\\n\\n@app.route('/read_message', methods=['POST'])\\ndef read_message():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tmessage_index = data.get('message_index')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tmessage = user.messages[message_index]\\n\\treturn jsonify({'message': message}), 200\\n\\n@app.route('/post_status', methods=['POST'])\\ndef post_status():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tstatus = data.get('status')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.status.append(status)\\n\\treturn jsonify({'message': 'Status posted successfully'}), 200\\n\\n@app.route('/view_status', methods=['POST'])\\ndef view_status():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tstatus_index = data.get('status_index')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tstatus = user.status[status_index]\\n\\treturn jsonify({'status': status}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport json\\nfrom app import app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_signup(client):\\n\\tresponse = client.post('/signup', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password', 'profile_picture': '', 'status_message': '', 'privacy_settings': {}, 'contacts': [], 'blocked_contacts': [], 'groups': [], 'messages': [], 'status': []})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'message': 'User created successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Logged in successfully'}\\n\\n\\ndef test_logout(client):\\n\\tresponse = client.post('/logout', json={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Logged out successfully'}\\n\\n\\ndef test_forgot_password(client):\\n\\tresponse = client.post('/forgot_password', json={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Password reset successfully'}\\n\\n\\ndef test_set_profile_picture(client):\\n\\tresponse = client.post('/set_profile_picture', json={'email': 'test@example.com', 'profile_picture': 'new_picture.jpg'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Profile picture set successfully'}\\n\\n\\ndef test_set_status_message(client):\\n\\tresponse = client.post('/set_status_message', json={'email': 'test@example.com', 'status_message': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Status message set successfully'}\\n\\n\\ndef test_set_privacy_settings(client):\\n\\tresponse = client.post('/set_privacy_settings', json={'email': 'test@example.com', 'privacy_settings': {'last_seen': 'everyone'}})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Privacy settings set successfully'}\\n\\n\\ndef test_block_contact(client):\\n\\tresponse = client.post('/block_contact', json={'email': 'test@example.com', 'contact_email': 'contact@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Contact blocked successfully'}\\n\\n\\ndef test_unblock_contact(client):\\n\\tresponse = client.post('/unblock_contact', json={'email': 'test@example.com', 'contact_email': 'contact@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Contact unblocked successfully'}\\n\\n\\ndef test_create_group(client):\\n\\tresponse = client.post('/create_group', json={'email': 'test@example.com', 'group_name': 'Test Group'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Group created successfully'}\\n\\n\\ndef test_edit_group(client):\\n\\tresponse = client.post('/edit_group', json={'email': 'test@example.com', 'old_group_name': 'Test Group', 'new_group_name': 'New Test Group'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Group edited successfully'}\\n\\n\\ndef test_delete_group(client):\\n\\tresponse = client.post('/delete_group', json={'email': 'test@example.com', 'group_name': 'New Test Group'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Group deleted successfully'}\\n\\n\\ndef test_send_message(client):\\n\\tresponse = client.post('/send_message', json={'email': 'test@example.com', 'message': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Message sent successfully'}\\n\\n\\ndef test_read_message(client):\\n\\tresponse = client.post('/read_message', json={'email': 'test@example.com', 'message_index': 0})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Hello, world!'}\\n\\n\\ndef test_post_status(client):\\n\\tresponse = client.post('/post_status', json={'email': 'test@example.com', 'status': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Status posted successfully'}\\n\\n\\ndef test_view_status(client):\\n\\tresponse = client.post('/view_status', json={'email': 'test@example.com', 'status_index': 0})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'status': 'Hello, world!'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 2872, "total_tokens": 4250}}, {"id": "chatcmpl-8JwhGipMgzHaev0fmSEgiXQuwEyxI", "object": "chat.completion", "created": 1699764554, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\tcontacts: list = None\\n\\tgroups: list = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\t# In a real-world application, we would send an email to the user with a password reset link.\\n\\t# For this mock application, we'll just reset the password to a default value.\\n\\tuser.password = 'default'\\n\\treturn jsonify({'message': 'Password reset successfully. Please check your email.'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport json\\nfrom app import app, User, users, sessions\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\ndef test_signup(client, sample_user):\\n\\tresponse = client.post('/signup', data=json.dumps(sample_user.__dict__), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert users[sample_user.email] == sample_user\\n\\ndef test_login(client, sample_user):\\n\\tusers[sample_user.email] = sample_user\\n\\tresponse = client.post('/login', data=json.dumps({'email': sample_user.email, 'password': sample_user.password}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert sessions[sample_user.email] == 'Logged In'\\n\\ndef test_logout(client, sample_user):\\n\\tsessions[sample_user.email] = 'Logged In'\\n\\tresponse = client.post('/logout', data=json.dumps({'email': sample_user.email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert sample_user.email not in sessions\\n\\ndef test_forgot_password(client, sample_user):\\n\\tusers[sample_user.email] = sample_user\\n\\tresponse = client.post('/forgot_password', data=json.dumps({'email': sample_user.email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert users[sample_user.email].password == 'default'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 880, "total_tokens": 2258}}, {"id": "chatcmpl-8JwhkAe0RK2wjeIOMP4fOMV3a00ay", "object": "chat.completion", "created": 1699764584, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/chat', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chat/<chat_id>/message', methods=['POST'])\\ndef send_message(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn {'message': 'Chat not found'}, 404\\n\\tmessage = chat.send_message(data['user_id'], data['content'])\\n\\treturn jsonify(message.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nimport uuid\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.email = email\\n\\t\\tself.password = password\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'email': self.email}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nimport uuid\\n\\n@dataclass\\nclass Message:\\n\\tid: str\\n\\tuser_id: str\\n\\tcontent: str\\n\\n\\tdef __init__(self, user_id, content):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.user_id = user_id\\n\\t\\tself.content = content\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'user_id': self.user_id, 'content': self.content}\\n\\n@dataclass\\nclass Chat:\\n\\tid: str\\n\\tname: str\\n\\tmessages: list\\n\\n\\tdef __init__(self, name):\\n\\t\\tself.id = str(uuid.uuid4())\\n\\t\\tself.name = name\\n\\t\\tself.messages = []\\n\\n\\tdef send_message(self, user_id, content):\\n\\t\\tmessage = Message(user_id, content)\\n\\t\\tself.messages.append(message)\\n\\t\\treturn message\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'name': self.name, 'messages': [message.to_dict() for message in self.messages]}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['email'] == 'test@test.com'\\n\\n\\ndef test_login(client):\\n\\tuser = User('test@test.com', 'password')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tdata = response.get_json()\\n\\tassert data['id'] == user.id\\n\\tassert data['email'] == 'test@test.com'\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/chat', json={'name': 'Test Chat'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['name'] == 'Test Chat'\\n\\n\\ndef test_send_message(client):\\n\\tchat = Chat('Test Chat')\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.post(f'/chat/{chat.id}/message', json={'user_id': '1', 'content': 'Hello, world!'})\\n\\tassert response.status_code == 201\\n\\tdata = response.get_json()\\n\\tassert 'id' in data\\n\\tassert data['user_id'] == '1'\\n\\tassert data['content'] == 'Hello, world!'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 1161, "total_tokens": 2539}}]