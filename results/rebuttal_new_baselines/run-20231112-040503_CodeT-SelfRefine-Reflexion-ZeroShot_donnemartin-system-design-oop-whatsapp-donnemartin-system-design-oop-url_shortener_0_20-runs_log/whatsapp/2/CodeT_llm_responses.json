[{"id": "chatcmpl-8JwQjYTijUMZbv52GkkhJyuPRikoY", "object": "chat.completion", "created": 1699763529, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or password'}), 400\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'error': 'Email already registered'}), 400\\n\\tusers[data['email']] = {'password': data['password']}\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or password'}), 400\\n\\tif data['email'] not in users or users[data['email']]['password'] != data['password']:\\n\\t\\treturn jsonify({'error': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'User logged in successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'error': 'Email already registered'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User logged in successfully'}\\n\\n\\tresponse = client.post('/login', json={'email': 'wrong@test.com', 'password': 'test123'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'error': 'Invalid email or password'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 615, "total_tokens": 1993}}, {"id": "chatcmpl-8JwRCdwbwtO2NijTK4oJHbu1RNgT1", "object": "chat.completion", "created": 1699763558, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\tcontacts: list = None\\n\\tgroups: list = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.password = 'default'\\n\\treturn jsonify({'message': 'Password reset successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport json\\nfrom app import app, User, users, sessions\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User(name='Test User', email='test@example.com', password='password')\\n\\ndef test_signup(client, user):\\n\\tresponse = client.post('/signup', data=json.dumps(user.__dict__), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert users[user.email] == user\\n\\ndef test_login(client, user):\\n\\tusers[user.email] = user\\n\\tresponse = client.post('/login', data=json.dumps({'email': user.email, 'password': user.password}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert sessions[user.email] == 'Logged In'\\n\\ndef test_logout(client, user):\\n\\tsessions[user.email] = 'Logged In'\\n\\tresponse = client.post('/logout', data=json.dumps({'email': user.email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert user.email not in sessions\\n\\ndef test_forgot_password(client, user):\\n\\tusers[user.email] = user\\n\\tresponse = client.post('/forgot_password', data=json.dumps({'email': user.email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert users[user.email].password == 'default'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 811, "total_tokens": 2189}}, {"id": "chatcmpl-8JwRh1zCjqjriypTvrb6FlNv8neE0", "object": "chat.completion", "created": 1699763589, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@dataclass\\nclass Message:\\n\\tfrom_user: str\\n\\tto_user: str\\n\\tmessage: str\\n\\tread: bool = False\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\treturn jsonify({'message': 'Logged in'}), 200\\n\\n@app.route('/message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\tmessage = Message(**data)\\n\\tmessages.setdefault(message.to_user, []).append(message)\\n\\treturn jsonify({'message': 'Message sent'}), 201\\n\\n@app.route('/message', methods=['GET'])\\ndef get_messages():\\n\\tto_user = request.args.get('to_user')\\n\\treturn jsonify([message.__dict__ for message in messages.get(to_user, [])]), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn {'name': 'Test User', 'email': 'test@example.com', 'password': 'password'}\\n\\n@pytest.fixture\\ndef message():\\n\\treturn {'from_user': 'test@example.com', 'to_user': 'test2@example.com', 'message': 'Hello'}\\n\\n\\ndef test_signup(client, user):\\n\\tresponse = client.post('/signup', data=json.dumps(user), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created'}\\n\\n\\ndef test_login(client, user):\\n\\tclient.post('/signup', data=json.dumps(user), content_type='application/json')\\n\\tresponse = client.post('/login', data=json.dumps(user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in'}\\n\\n\\ndef test_send_message(client, user, message):\\n\\tclient.post('/signup', data=json.dumps(user), content_type='application/json')\\n\\tresponse = client.post('/message', data=json.dumps(message), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Message sent'}\\n\\n\\ndef test_get_messages(client, user, message):\\n\\tclient.post('/signup', data=json.dumps(user), content_type='application/json')\\n\\tclient.post('/message', data=json.dumps(message), content_type='application/json')\\n\\tresponse = client.get('/message?to_user=test2@example.com')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 867, "total_tokens": 2245}}]