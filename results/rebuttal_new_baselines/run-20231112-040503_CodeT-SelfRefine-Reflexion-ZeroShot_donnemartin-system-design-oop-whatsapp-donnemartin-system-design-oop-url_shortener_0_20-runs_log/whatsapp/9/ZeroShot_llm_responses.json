[{"id": "chatcmpl-8Jyo0Ogo6hza1kR3Pofvm9oRqmlxM", "object": "chat.completion", "created": 1699772660, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.check_password(data['password']):\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/users/<user_id>/profile', methods=['PUT'])\\ndef update_profile(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tuser.update_profile(data)\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<user_id>/contacts', methods=['POST'])\\ndef block_contact(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tcontact = users.get(data['contact_id'])\\n\\tif not contact:\\n\\t\\treturn {'message': 'Contact not found'}, 404\\n\\tuser.block_contact(contact)\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/chats', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chats/<chat_id>/messages', methods=['POST'])\\ndef send_message(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn {'message': 'Chat not found'}, 404\\n\\tuser = users.get(data['user_id'])\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tmessage = chat.send_message(user, data['content'])\\n\\treturn jsonify(message.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\tpassword_hash: str\\n\\tprofile_picture: str = field(default=None)\\n\\tstatus_message: str = field(default=None)\\n\\tblocked_contacts: List[str] = field(default_factory=list)\\n\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = generate_id()\\n\\t\\tself.email = email\\n\\t\\tself.password_hash = generate_password_hash(password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password_hash, password)\\n\\n\\tdef update_profile(self, data):\\n\\t\\tself.profile_picture = data.get('profile_picture', self.profile_picture)\\n\\t\\tself.status_message = data.get('status_message', self.status_message)\\n\\n\\tdef block_contact(self, contact):\\n\\t\\tself.blocked_contacts.append(contact.id)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'profile_picture': self.profile_picture,\\n\\t\\t\\t'status_message': self.status_message,\\n\\t\\t\\t'blocked_contacts': self.blocked_contacts\\n\\t\\t}\\n\\n\\tdef generate_id():\\n\\t\\treturn str(uuid.uuid4())\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nfrom user import User\\n\\n@dataclass\\nclass Message:\\n\\tid: str\\n\\tuser: User\\n\\tcontent: str\\n\\n\\tdef __init__(self, user, content):\\n\\t\\tself.id = generate_id()\\n\\t\\tself.user = user\\n\\t\\tself.content = content\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'user': self.user.to_dict(),\\n\\t\\t\\t'content': self.content\\n\\t\\t}\\n\\n\\tdef generate_id():\\n\\t\\treturn str(uuid.uuid4())\\n\\n@dataclass\\nclass Chat:\\n\\tid: str\\n\\tname: str\\n\\tmessages: List[Message] = field(default_factory=list)\\n\\n\\tdef __init__(self, name):\\n\\t\\tself.id = generate_id()\\n\\t\\tself.name = name\\n\\n\\tdef send_message(self, user, content):\\n\\t\\tmessage = Message(user, content)\\n\\t\\tself.messages.append(message)\\n\\t\\treturn message\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'messages': [message.to_dict() for message in self.messages]\\n\\t\\t}\\n\\n\\tdef generate_id():\\n\\t\\treturn str(uuid.uuid4())\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User('test@example.com', 'password')\\n\\n@pytest.fixture\\ndef chat():\\n\\treturn Chat('Test Chat')\\n\\ndef test_register(client, user):\\n\\tresponse = client.post('/register', json=user.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_login(client, user):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': user.email, 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_update_profile(client, user):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.put(f'/users/{user.id}/profile', json={'profile_picture': 'picture.jpg', 'status_message': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tuser.profile_picture = 'picture.jpg'\\n\\tuser.status_message = 'Hello, world!'\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_block_contact(client, user):\\n\\tcontact = User('contact@example.com', 'password')\\n\\tapp.users[user.id] = user\\n\\tapp.users[contact.id] = contact\\n\\tresponse = client.post(f'/users/{user.id}/contacts', json={'contact_id': contact.id})\\n\\tassert response.status_code == 200\\n\\tuser.block_contact(contact)\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_create_chat(client, chat):\\n\\tresponse = client.post('/chats', json=chat.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == chat.to_dict()\\n\\ndef test_send_message(client, user, chat):\\n\\tapp.users[user.id] = user\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.post(f'/chats/{chat.id}/messages', json={'user_id': user.id, 'content': 'Hello, world!'})\\n\\tassert response.status_code == 201\\n\\tmessage = chat.send_message(user, 'Hello, world!')\\n\\tassert response.get_json() == message.to_dict()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 1797, "total_tokens": 3175}}]