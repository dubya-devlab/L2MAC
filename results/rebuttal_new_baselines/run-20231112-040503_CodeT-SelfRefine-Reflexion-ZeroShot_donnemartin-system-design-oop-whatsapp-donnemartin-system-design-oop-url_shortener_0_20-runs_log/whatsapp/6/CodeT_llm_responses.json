[{"id": "chatcmpl-8JxgdA5Ib7y4eO1Kw9s4wmHdMw8Gt", "object": "chat.completion", "created": 1699768359, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_signup(client):\\n\\tresponse = client.post('/signup', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created successfully'}\\n\\n\\ndef test_login(client):\\n\\tclient.post('/signup', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_logout(client):\\n\\tclient.post('/signup', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tclient.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tresponse = client.post('/logout', json={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged out successfully'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 677, "total_tokens": 2055}}, {"id": "chatcmpl-8JxhWPLfXakycGd1LmGeUhSXON9EK", "object": "chat.completion", "created": 1699768414, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.check_password(data['password']):\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/users/<user_id>/profile', methods=['PUT'])\\ndef update_profile(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tuser.update_profile(data)\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<user_id>/contacts', methods=['POST'])\\ndef block_contact(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tcontact = users.get(data['contact_id'])\\n\\tif not contact:\\n\\t\\treturn {'message': 'Contact not found'}, 404\\n\\tuser.block_contact(contact)\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/chats', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chats/<chat_id>/messages', methods=['POST'])\\ndef send_message(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn {'message': 'Chat not found'}, 404\\n\\tuser = users.get(data['user_id'])\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tmessage = chat.send_message(user, data['content'])\\n\\treturn jsonify(message.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from uuid import uuid4\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\nclass User:\\n\\tdef __init__(self, email, password):\\n\\t\\tself.id = str(uuid4())\\n\\t\\tself.email = email\\n\\t\\tself.password_hash = generate_password_hash(password)\\n\\t\\tself.profile = {}\\n\\t\\tself.blocked_contacts = set()\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password_hash, password)\\n\\n\\tdef update_profile(self, data):\\n\\t\\tself.profile.update(data)\\n\\n\\tdef block_contact(self, contact):\\n\\t\\tself.blocked_contacts.add(contact.id)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'profile': self.profile,\\n\\t\\t\\t'blocked_contacts': list(self.blocked_contacts)\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from uuid import uuid4\\nfrom datetime import datetime\\n\\nclass Chat:\\n\\tdef __init__(self, name):\\n\\t\\tself.id = str(uuid4())\\n\\t\\tself.name = name\\n\\t\\tself.messages = []\\n\\n\\tdef send_message(self, user, content):\\n\\t\\tmessage = {\\n\\t\\t\\t'id': str(uuid4()),\\n\\t\\t\\t'user_id': user.id,\\n\\t\\t\\t'content': content,\\n\\t\\t\\t'timestamp': datetime.utcnow().isoformat()\\n\\t\\t}\\n\\t\\tself.messages.append(message)\\n\\t\\treturn message\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'messages': self.messages\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tdata = json.loads(response.data)\\n\\tassert 'id' in data\\n\\tassert data['email'] == 'test@example.com'\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'email': 'test@example.com', 'password': 'password'})\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert 'id' in data\\n\\tassert data['email'] == 'test@example.com'\\n\\n\\ndef test_update_profile(client):\\n\\tresponse = client.post('/register', json={'email': 'test@example.com', 'password': 'password'})\\n\\tuser_id = json.loads(response.data)['id']\\n\\tresponse = client.put(f'/users/{user_id}/profile', json={'picture': 'picture.jpg', 'status': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert data['profile']['picture'] == 'picture.jpg'\\n\\tassert data['profile']['status'] == 'Hello, world!'\\n\\n\\ndef test_block_contact(client):\\n\\tresponse = client.post('/register', json={'email': 'test@example.com', 'password': 'password'})\\n\\tuser_id = json.loads(response.data)['id']\\n\\tresponse = client.post('/register', json={'email': 'contact@example.com', 'password': 'password'})\\n\\tcontact_id = json.loads(response.data)['id']\\n\\tresponse = client.post(f'/users/{user_id}/contacts', json={'contact_id': contact_id})\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert contact_id in data['blocked_contacts']\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/chats', json={'name': 'Test Chat'})\\n\\tassert response.status_code == 201\\n\\tdata = json.loads(response.data)\\n\\tassert 'id' in data\\n\\tassert data['name'] == 'Test Chat'\\n\\n\\ndef test_send_message(client):\\n\\tresponse = client.post('/register', json={'email': 'test@example.com', 'password': 'password'})\\n\\tuser_id = json.loads(response.data)['id']\\n\\tresponse = client.post('/chats', json={'name': 'Test Chat'})\\n\\tchat_id = json.loads(response.data)['id']\\n\\tresponse = client.post(f'/chats/{chat_id}/messages', json={'user_id': user_id, 'content': 'Hello, world!'})\\n\\tassert response.status_code == 201\\n\\tdata = json.loads(response.data)\\n\\tassert 'id' in data\\n\\tassert data['user_id'] == user_id\\n\\tassert data['content'] == 'Hello, world!'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 1725, "total_tokens": 3103}}, {"id": "chatcmpl-8JxiXQO9HKnSgwnnapHjJwVlMRz7V", "object": "chat.completion", "created": 1699768477, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tprivacy_settings: dict = None\\n\\n@app.route('/signup', methods=['POST'])\\ndef signup():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\tsessions[email] = 'Logged In'\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tsessions.pop(email, None)\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('email,password', [('test@test.com', 'password')])\\ndef test_signup(client, email, password):\\n\\tresponse = client.post('/signup', data=json.dumps({'name': 'Test User', 'email': email, 'password': password}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created successfully'\\n\\n@pytest.mark.parametrize('email,password', [('test@test.com', 'password')])\\ndef test_login(client, email, password):\\n\\tresponse = client.post('/login', data=json.dumps({'email': email, 'password': password}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged in successfully'\\n\\n@pytest.mark.parametrize('email', ['test@test.com'])\\ndef test_logout(client, email):\\n\\tresponse = client.post('/logout', data=json.dumps({'email': email}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Logged out successfully'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1378, "completion_tokens": 661, "total_tokens": 2039}}]