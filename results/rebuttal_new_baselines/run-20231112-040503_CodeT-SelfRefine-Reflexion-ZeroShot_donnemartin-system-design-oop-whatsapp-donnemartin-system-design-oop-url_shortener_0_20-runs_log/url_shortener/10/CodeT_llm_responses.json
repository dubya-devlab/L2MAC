[{"id": "chatcmpl-8JzCLuqLzwsl3nTQLSDDq4THuYSFq", "object": "chat.completion", "created": 1699774169, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\tDB[shortened_url] = URL(original_url, shortened_url, user, [], expiration)\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and datetime.now() <= url.expiration:\\n\\t\\turl.clicks.append((request.remote_addr, datetime.now()))\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://example.com', 'user': 'test', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://example.com', 'user': 'test', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tshort_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'https://example.com'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 610, "total_tokens": 2003}}, {"id": "chatcmpl-8JzCoeQqAY7ZWUBUFf09RYa0ad1uD", "object": "chat.completion", "created": 1699774198, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshort_url = data.get('short_url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Check if short URL is available\\n\\tif short_url in DB:\\n\\t\\treturn jsonify({'error': 'Short URL already in use'}), 400\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=short_url, user=user, clicks=[], expiration=datetime.strptime(expiration, '%Y-%m-%d %H:%M:%S'))\\n\\tDB[short_url] = url\\n\\n\\treturn jsonify({'message': 'URL shortened successfully', 'short_url': short_url}), 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\n\\t# Redirect to original URL\\n\\turl.clicks.append({'timestamp': datetime.now().isoformat()})\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tuser = request.args.get('user')\\n\\turls = [url for url in DB.values() if url.user == user]\\n\\treturn jsonify({'urls': urls}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, short_url, user, expiration', [\\n\\t('https://www.google.com', 'ggl', 'user1', (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')),\\n\\t('https://www.facebook.com', 'fb', 'user2', (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')),\\n])\\ndef test_shorten_url(client, reset_db, url, short_url, user, expiration):\\n\\tresponse = client.post('/shorten', json={'url': url, 'short_url': short_url, 'user': user, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['short_url'] == short_url\\n\\n\\t# Test duplicate short URL\\n\\tresponse = client.post('/shorten', json={'url': url, 'short_url': short_url, 'user': user, 'expiration': expiration})\\n\\tassert response.status_code == 400\\n\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid_url', 'short_url': 'inv', 'user': user, 'expiration': expiration})\\n\\tassert response.status_code == 400\\n\\n@pytest.mark.parametrize('short_url', ['ggl', 'fb'])\\ndef test_redirect_url(client, short_url):\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\t# Test non-existent URL\\n\\tresponse = client.get('/nonexistent')\\n\\tassert response.status_code == 404\\n\\n\\t# Test expired URL\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 400\\n\\n@pytest.mark.parametrize('user', ['user1', 'user2'])\\ndef test_get_analytics(client, user):\\n\\tresponse = client.get(f'/analytics?user={user}')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()['urls']) == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1101, "total_tokens": 2494}}, {"id": "chatcmpl-8JzDvihpQuDstNXybXnGyl5ayrr9B", "object": "chat.completion", "created": 1699774267, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\tcustom = data.get('custom')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\t# For simplicity, we'll just check if it starts with http\\n\\tif not original_url.startswith('http'):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Generate shortened URL\\n\\tshortened_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\tif custom:\\n\\t\\tshortened_url = custom\\n\\n\\t# Create URL object\\n\\turl = URL(original_url, shortened_url, user, 0, [], expiration)\\n\\n\\t# Add to database\\n\\turls[shortened_url] = url\\n\\n\\treturn jsonify({'shortened_url': shortened_url}), 200\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_url(shortened_url):\\n\\turl = urls.get(shortened_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tshortened_url = data.get('url')\\n\\tuser = data.get('user')\\n\\n\\turl = urls.get(shortened_url)\\n\\tif not url or url.user != user:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Return analytics data\\n\\treturn jsonify({'clicks': url.clicks, 'click_data': url.click_data}), 200\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\n\\t# Create user object\\n\\tuser = User(username, password, [])\\n\\n\\t# Add to database\\n\\tusers[username] = user\\n\\n\\treturn jsonify({'message': 'User created'}), 200\\n\\n@app.route('/user/urls', methods=['GET'])\\ndef get_user_urls():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\n\\tuser = users.get(username)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\n\\t# Return user's URLs\\n\\treturn jsonify({'urls': [url.shortened for url in user.urls]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\tapp.urls = {}\\n\\tapp.users = {}\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'http://example.com'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'shortened_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'http://example.com'}), content_type='application/json')\\n\\tshortened_url = response.get_json()['shortened_url']\\n\\n\\tresponse = client.get(f'/{shortened_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'http://example.com', 'user': 'test'}), content_type='application/json')\\n\\tshortened_url = response.get_json()['shortened_url']\\n\\n\\tresponse = client.get('/analytics', data=json.dumps({'url': shortened_url, 'user': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'clicks' in response.get_json()\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', data=json.dumps({'username': 'test', 'password': 'password'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'message' in response.get_json()\\n\\n\\ndef test_get_user_urls(client):\\n\\tresponse = client.post('/user', data=json.dumps({'username': 'test', 'password': 'password'}), content_type='application/json')\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'http://example.com', 'user': 'test'}), content_type='application/json')\\n\\n\\tresponse = client.get('/user/urls', data=json.dumps({'username': 'test', 'password': 'password'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1309, "total_tokens": 2702}}]