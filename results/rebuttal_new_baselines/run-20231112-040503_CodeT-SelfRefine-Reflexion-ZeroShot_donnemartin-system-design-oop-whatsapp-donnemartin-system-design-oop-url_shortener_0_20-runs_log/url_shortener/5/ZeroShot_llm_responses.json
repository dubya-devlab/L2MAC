[{"id": "chatcmpl-8JxfooH49jFEcRkp9qHBjUyWLe4Sc", "object": "chat.completion", "created": 1699768308, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime.datetime\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn {'message': 'Username already exists'}, 400\\n\\tusers[username] = User(username, password, {})\\n\\treturn {'message': 'User registered successfully'}, 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn {'message': 'Invalid username or password'}, 400\\n\\treturn {'message': 'Logged in successfully'}, 200\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten():\\n\\tdata = request.get_json()\\n\\toriginal_url = data['original_url']\\n\\tshort_url = ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tif expiration:\\n\\t\\texpiration = datetime.datetime.strptime(expiration, '%Y-%m-%d %H:%M:%S')\\n\\turl = URL(original_url, short_url, user, 0, [], expiration)\\n\\turls[short_url] = url\\n\\tif user:\\n\\t\\tusers[user].urls[short_url] = url\\n\\treturn {'short_url': short_url}, 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_original(short_url):\\n\\tif short_url not in urls:\\n\\t\\treturn {'message': 'URL not found'}, 404\\n\\turl = urls[short_url]\\n\\tif url.expiration and url.expiration < datetime.datetime.now():\\n\\t\\treturn {'message': 'URL expired'}, 410\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.datetime.now().isoformat()})\\n\\treturn redirect(url.original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef analytics():\\n\\tdata = request.get_json()\\n\\tuser = data['user']\\n\\tif user not in users:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\tuser_urls = users[user].urls\\n\\tanalytics_data = {}\\n\\tfor short_url, url in user_urls.items():\\n\\t\\tanalytics_data[short_url] = {'clicks': url.clicks, 'click_data': url.click_data}\\n\\treturn analytics_data, 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef setup():\\n\\tapp.users = {}\\n\\tapp.urls = {}\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'test' in app.users\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_login(client):\\n\\tapp.users['test'] = app.User('test', 'test', {})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_shorten(client):\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 200\\n\\tassert len(app.urls) == 1\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_redirect(client):\\n\\tapp.urls['test'] = app.URL('https://www.google.com', 'test', None, 0, [], None)\\n\\tresponse = client.get('/test')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_analytics(client):\\n\\tapp.users['test'] = app.User('test', 'test', {})\\n\\tapp.urls['test'] = app.URL('https://www.google.com', 'test', 'test', 0, [], None)\\n\\tapp.users['test'].urls['test'] = app.urls['test']\\n\\tresponse = client.get('/analytics', json={'user': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'test': {'clicks': 0, 'click_data': []}}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1205, "total_tokens": 2598}}]