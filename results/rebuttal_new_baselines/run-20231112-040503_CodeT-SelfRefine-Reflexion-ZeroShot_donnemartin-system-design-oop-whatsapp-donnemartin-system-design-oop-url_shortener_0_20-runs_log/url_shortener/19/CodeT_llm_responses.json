[{"id": "chatcmpl-8K1ue1u7PrXbnZlU9DkMu9IhVphXI", "object": "chat.completion", "created": 1699784604, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\tDB[shortened_url] = URL(original_url, shortened_url, user, [], expiration)\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and url.expiration > datetime.now():\\n\\t\\turl.clicks.append(datetime.now())\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn 'URL not found or expired', 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_url():\\n\\treturn {\\n\\t\\t'url': 'https://www.google.com',\\n\\t\\t'user': 'test_user',\\n\\t\\t'expiration': (datetime.now() + timedelta(days=1)).isoformat()\\n\\t}\\n\\ndef test_shorten_url(client, sample_url):\\n\\tresponse = client.post('/shorten', json=sample_url)\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\ndef test_redirect_url(client, sample_url):\\n\\tresponse = client.post('/shorten', json=sample_url)\\n\\tshort_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == sample_url['url']\\n\\ndef test_expired_url(client, sample_url):\\n\\tsample_url['expiration'] = (datetime.now() - timedelta(days=1)).isoformat()\\n\\tresponse = client.post('/shorten', json=sample_url)\\n\\tshort_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 653, "total_tokens": 2046}}, {"id": "chatcmpl-8K1v8Cozq6O0R856PxvjpPr2sKa6k", "object": "chat.completion", "created": 1699784634, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration_date: datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tuser_id = str(uuid.uuid4())\\n\\tusers[user_id] = User(id=user_id, urls={})\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/create_url', methods=['POST'])\\ndef create_url():\\n\\tdata = request.get_json()\\n\\turl_id = str(uuid.uuid4())\\n\\tshort_url = data.get('short_url', url_id[:8])\\n\\turls[url_id] = URL(\\n\\t\\tid=url_id,\\n\\t\\toriginal_url=data['original_url'],\\n\\t\\tshort_url=short_url,\\n\\t\\tuser_id=data['user_id'],\\n\\t\\tclicks=0,\\n\\t\\tclick_data=[],\\n\\t\\texpiration_date=data.get('expiration_date', None)\\n\\t)\\n\\tusers[data['user_id']].urls[url_id] = urls[url_id]\\n\\treturn jsonify({'url_id': url_id, 'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tfor url in urls.values():\\n\\t\\tif url.short_url == short_url:\\n\\t\\t\\turl.clicks += 1\\n\\t\\t\\turl.click_data.append(datetime.now())\\n\\t\\t\\treturn redirect(url.original_url, code=302)\\n\\treturn 'URL not found', 404\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\turl = urls.get(data['url_id'])\\n\\tif url:\\n\\t\\treturn jsonify({'clicks': url.clicks, 'click_data': url.click_data}), 200\\n\\treturn 'URL not found', 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user')\\n\\tassert response.status_code == 201\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_create_url(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tassert response.status_code == 201\\n\\tassert 'url_id' in json.loads(response.data)\\n\\tassert 'short_url' in json.loads(response.data)\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tresponse = client.get('/analytics', json={'url_id': url_id})\\n\\tassert response.status_code == 200\\n\\tassert 'clicks' in json.loads(response.data)\\n\\tassert 'click_data' in json.loads(response.data)\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 996, "total_tokens": 2389}}, {"id": "chatcmpl-8K1vip88ZgtIgfYNhUsH2R7w9ovJ1", "object": "chat.completion", "created": 1699784670, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: []\\n\\n@dataclass\\nclass Click:\\n\\ttimestamp: datetime\\n\\tlocation: str\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\turl = data.get('url')\\n\\tuser = data.get('user')\\n\\tshortened = str(uuid.uuid4())[:8]\\n\\tDB[shortened] = URL(original=url, shortened=shortened, user=user, clicks=[])\\n\\treturn jsonify({'shortened_url': shortened}), 201\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\turl.clicks.append(Click(timestamp=datetime.now(), location=request.remote_addr))\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<shortened>', methods=['GET'])\\ndef get_analytics(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\tclicks = [{'timestamp': str(click.timestamp), 'location': click.location} for click in url.clicks]\\n\\treturn jsonify({'original_url': url.original, 'shortened_url': url.shortened, 'clicks': clicks}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tassert response.status_code == 201\\n\\tdata = json.loads(response.data)\\n\\tassert 'shortened_url' in data\\n\\n\\tresponse = client.get('/' + data['shortened_url'])\\n\\tassert response.status_code == 302\\n\\n\\tresponse = client.get('/analytics/' + data['shortened_url'])\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert 'original_url' in data\\n\\tassert 'shortened_url' in data\\n\\tassert 'clicks' in data\\n\\tassert data['original_url'] == 'https://www.google.com'\\n\\tassert data['shortened_url'] == data['shortened_url']\\n\\tassert len(data['clicks']) == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 695, "total_tokens": 2088}}]