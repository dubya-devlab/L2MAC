[{"id": "chatcmpl-8K20s1PY8vSyfIbNeFWoTIsIT5fkv", "object": "chat.completion", "created": 1699784990, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully'}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\t# Test valid URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'goog', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 200\\n\\t\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid', 'shortened': 'invalid', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 400\\n\\t\\n\\t# Test duplicate shortened URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'goog', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 400\\n\\n\\ndef test_redirect_url(client):\\n\\t# Test valid shortened URL\\n\\tresponse = client.get('/goog')\\n\\tassert response.status_code == 302\\n\\t\\n\\t# Test invalid shortened URL\\n\\tresponse = client.get('/invalid')\\n\\tassert response.status_code == 404\\n\\t\\n\\t# Test expired URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'expired', 'expiration': (datetime.now() - timedelta(days=1)).isoformat()})\\n\\tresponse = client.get('/expired')\\n\\tassert response.status_code == 400\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 893, "total_tokens": 2286}}]