[{"id": "chatcmpl-8K0TcS8bRPlmyKlCOlwP9jGFt2uJq", "object": "chat.completion", "created": 1699779084, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, password, {})\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/shorten_url', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data['original_url']\\n\\tshort_url = data.get('short_url')\\n\\tusername = data.get('username')\\n\\texpiration = data.get('expiration')\\n\\tif short_url and short_url in urls:\\n\\t\\treturn jsonify({'message': 'Short URL already exists'}), 400\\n\\tif not short_url:\\n\\t\\tshort_url = generate_short_url()\\n\\tif username and username not in users:\\n\\t\\treturn jsonify({'message': 'User does not exist'}), 400\\n\\tif not is_valid_url(original_url):\\n\\t\\treturn jsonify({'message': 'Invalid URL'}), 400\\n\\turl = URL(original_url, short_url, username, 0, [], expiration)\\n\\turls[short_url] = url\\n\\tif username:\\n\\t\\tusers[username].urls[short_url] = url\\n\\treturn jsonify({'message': 'URL shortened successfully', 'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif not url or (url.expiration and url.expiration < datetime.now()):\\n\\t\\treturn jsonify({'message': 'URL does not exist or has expired'}), 404\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\treturn redirect(url.original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tif username and username not in users:\\n\\t\\treturn jsonify({'message': 'User does not exist'}), 400\\n\\tif username:\\n\\t\\treturn jsonify({short_url: url.__dict__ for short_url, url in users[username].urls.items()}), 200\\n\\treturn jsonify({short_url: url.__dict__ for short_url, url in urls.items()}), 200\\n\\n@app.route('/delete_url', methods=['DELETE'])\\ndef delete_url():\\n\\tdata = request.get_json()\\n\\tshort_url = data['short_url']\\n\\tusername = data.get('username')\\n\\tif short_url not in urls:\\n\\t\\treturn jsonify({'message': 'URL does not exist'}), 400\\n\\tif username and username not in users:\\n\\t\\treturn jsonify({'message': 'User does not exist'}), 400\\n\\tif username and urls[short_url].user != username:\\n\\t\\treturn jsonify({'message': 'User does not own this URL'}), 403\\n\\tdelete_url(short_url)\\n\\treturn jsonify({'message': 'URL deleted successfully'}), 200\\n\\n\\n# Helper functions\\ndef generate_short_url():\\n\\treturn str(len(urls) + 1)\\n\\ndef is_valid_url(url):\\n\\ttry:\\n\\t\\tresponse = requests.get(url)\\n\\t\\treturn response.status_code == 200\\n\\texcept:\\n\\t\\treturn False\\n\\ndef delete_url(short_url):\\n\\tuser = urls[short_url].user\\n\\tif user:\\n\\t\\tdel users[user].urls[short_url]\\n\\tdel urls[short_url]\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'message': 'User created successfully'}\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\tdata = json.loads(response.data)\\n\\tassert data['message'] == 'URL shortened successfully'\\n\\tassert 'short_url' in data\\n\\n\\ndef test_redirect_to_url(client):\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.get('/analytics')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_delete_url(client):\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.delete('/delete_url', json={'short_url': short_url})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'URL deleted successfully'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1382, "total_tokens": 2775}}, {"id": "chatcmpl-8K0UTDpOJMdZ6rou98cFPZERy3uYA", "object": "chat.completion", "created": 1699779137, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully'}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Update click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.facebook.com', 'fb', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.twitter.com', 'tw', (datetime.now() + timedelta(days=1)).isoformat())\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert app.DB[shortened].original == url\\n\\tassert app.DB[shortened].shortened == shortened\\n\\tassert app.DB[shortened].clicks == 0\\n\\tassert app.DB[shortened].click_data == []\\n\\tassert app.DB[shortened].expiration.isoformat() == expiration\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'fb', 'tw'])\\ndef test_redirect_url(client, reset_db, shortened):\\n\\tapp.DB[shortened] = app.URL('https://www.google.com', shortened, 0, [], datetime.now() + timedelta(days=1))\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\\n\\tassert app.DB[shortened].clicks == 1\\n\\tassert len(app.DB[shortened].click_data) == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 906, "total_tokens": 2299}}, {"id": "chatcmpl-8K0V0eLiQLA1UF3m7TDvSysuc2TAf", "object": "chat.completion", "created": 1699779170, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\tcustom = data.get('custom')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\t# For simplicity, we'll just check if it starts with http\\n\\tif not original_url.startswith('http'):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Generate shortened URL\\n\\tshortened_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\tif custom:\\n\\t\\tshortened_url = custom\\n\\n\\t# Create URL object and store in database\\n\\turl = URL(original_url, shortened_url, user, 0, [], expiration)\\n\\turls[shortened_url] = url\\n\\n\\t# If user is provided, add URL to user's list\\n\\tif user:\\n\\t\\tusers[user].urls.append(url)\\n\\n\\treturn jsonify({'shortened_url': shortened_url}), 200\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_url(shortened_url):\\n\\t# Check if URL exists\\n\\tif shortened_url not in urls:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL is expired\\n\\tif urls[shortened_url].expiration and urls[shortened_url].expiration < datetime.now():\\n\\t\\treturn jsonify({'error': 'URL expired'}), 410\\n\\n\\t# Increment click count and store click data\\n\\turls[shortened_url].clicks += 1\\n\\turls[shortened_url].click_data.append({'time': datetime.now().isoformat()})\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(urls[shortened_url].original, code=302)\\n\\n@app.route('/analytics/<shortened_url>', methods=['GET'])\\ndef get_analytics(shortened_url):\\n\\t# Check if URL exists\\n\\tif shortened_url not in urls:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Return analytics data\\n\\treturn jsonify({'clicks': urls[shortened_url].clicks, 'click_data': urls[shortened_url].click_data}), 200\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\n\\t# Check if username is taken\\n\\tif username in users:\\n\\t\\treturn jsonify({'error': 'Username taken'}), 400\\n\\n\\t# Create user and store in database\\n\\tuser = User(username, password, [])\\n\\tusers[username] = user\\n\\n\\treturn jsonify({'message': 'User created'}), 200\\n\\n@app.route('/user/<username>', methods=['GET'])\\ndef get_user(username):\\n\\t# Check if user exists\\n\\tif username not in users:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\n\\t# Return user data\\n\\treturn jsonify({'username': users[username].username, 'urls': [url.shortened for url in users[username].urls]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\t# Clear mock database after each test\\n\\tapp.urls = {}\\n\\tapp.users = {}\\n\\ndef test_shorten_url(client):\\n\\t# Test URL shortening\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'shortened_url' in json.loads(response.data)\\n\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid'})\\n\\tassert response.status_code == 400\\n\\n\\t# Test custom URL\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com', 'custom': 'custom'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['shortened_url'] == 'custom'\\n\\ndef test_redirect_url(client):\\n\\t# Test URL redirection\\n\\tclient.post('/shorten', json={'url': 'http://example.com'})\\n\\tresponse = client.get('/shortened_url')\\n\\tassert response.status_code == 302\\n\\n\\t# Test non-existent URL\\n\\tresponse = client.get('/nonexistent')\\n\\tassert response.status_code == 404\\n\\n\\t# Test expired URL\\n\\tclient.post('/shorten', json={'url': 'http://example.com', 'expiration': '2000-01-01T00:00:00'})\\n\\tresponse = client.get('/shortened_url')\\n\\tassert response.status_code == 410\\n\\ndef test_get_analytics(client):\\n\\t# Test URL analytics\\n\\tclient.post('/shorten', json={'url': 'http://example.com'})\\n\\tclient.get('/shortened_url')\\n\\tresponse = client.get('/analytics/shortened_url')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['clicks'] == 1\\n\\n\\t# Test non-existent URL\\n\\tresponse = client.get('/analytics/nonexistent')\\n\\tassert response.status_code == 404\\n\\ndef test_create_user(client):\\n\\t# Test user creation\\n\\tresponse = client.post('/user', json={'username': 'user', 'password': 'pass'})\\n\\tassert response.status_code == 200\\n\\n\\t# Test duplicate username\\n\\tresponse = client.post('/user', json={'username': 'user', 'password': 'pass'})\\n\\tassert response.status_code == 400\\n\\ndef test_get_user(client):\\n\\t# Test get user\\n\\tclient.post('/user', json={'username': 'user', 'password': 'pass'})\\n\\tresponse = client.get('/user/user')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['username'] == 'user'\\n\\n\\t# Test non-existent user\\n\\tresponse = client.get('/user/nonexistent')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1571, "total_tokens": 2964}}]