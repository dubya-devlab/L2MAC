[{"id": "chatcmpl-8K0e6YEB3FjP5SjzOwTPlSCXDBwtT", "object": "chat.completion", "created": 1699779734, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\tcustom_short = data.get('custom')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\t# TODO: Implement URL validation\\n\\n\\t# Generate unique shortened URL\\n\\tshort_url = custom_short if custom_short else str(uuid.uuid4())[:8]\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=short_url, user=user, clicks=[], expiration=expiration)\\n\\tDB[short_url] = url\\n\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL has expired\\n\\tif url.expiration and url.expiration < datetime.now():\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 410\\n\\n\\t# Record click\\n\\turl.clicks.append({'timestamp': datetime.now().isoformat()})\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<short_url>', methods=['GET'])\\ndef get_analytics(short_url):\\n\\turl = DB.get(short_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Return analytics data\\n\\treturn jsonify({'clicks': url.clicks}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tassert response.status_code == 201\\n\\tdata = json.loads(response.data)\\n\\tassert 'short_url' in data\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tdata = json.loads(response.data)\\n\\tshort_url = data['short_url']\\n\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tdata = json.loads(response.data)\\n\\tshort_url = data['short_url']\\n\\n\\tresponse = client.get(f'/analytics/{short_url}')\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert 'clicks' in data\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 819, "total_tokens": 2212}}]