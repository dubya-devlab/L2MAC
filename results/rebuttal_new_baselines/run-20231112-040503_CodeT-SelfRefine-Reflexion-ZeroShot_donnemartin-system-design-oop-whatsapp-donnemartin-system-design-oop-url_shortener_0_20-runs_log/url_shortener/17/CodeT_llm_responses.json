[{"id": "chatcmpl-8K1N11jy8PDb6hayv4BkoO0W3Vpaf", "object": "chat.completion", "created": 1699782519, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\tDB[shortened_url] = URL(original_url, shortened_url, user, [], expiration)\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_to_original(shortened_url):\\n\\turl = DB.get(shortened_url)\\n\\tif url and datetime.now() <= url.expiration:\\n\\t\\turl.clicks.append((request.remote_addr, datetime.now()))\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, DB, URL\\nfrom datetime import datetime, timedelta\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tDB.clear()\\n\\n@pytest.fixture\\ndef sample_url():\\n\\treturn URL('http://example.com', '12345678', 'test_user', [], datetime.now() + timedelta(days=1))\\n\\n\\ndef test_shorten_url(client, reset_db):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'http://example.com', 'user': 'test_user', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n\\ndef test_redirect_to_original(client, reset_db, sample_url):\\n\\tDB[sample_url.shortened] = sample_url\\n\\tresponse = client.get(f'/{sample_url.shortened}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == sample_url.original\\n\\tassert len(sample_url.clicks) == 1\\n\\n\\ndef test_redirect_to_expired_url(client, reset_db, sample_url):\\n\\tsample_url.expiration = datetime.now() - timedelta(days=1)\\n\\tDB[sample_url.shortened] = sample_url\\n\\tresponse = client.get(f'/{sample_url.shortened}')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 697, "total_tokens": 2090}}, {"id": "chatcmpl-8K1NTwSy7657d0pkspTrJ0bevXoCx", "object": "chat.completion", "created": 1699782547, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\towner: str\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\tDB[short_url] = URL(original_url, short_url, 0, datetime.datetime.now(), None, data.get('user'))\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and (not url.expires_at or url.expires_at > datetime.datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert app.DB[short_url].clicks == 1\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_expired_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test_user'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tapp.DB[short_url].expires_at = datetime.datetime.now() - datetime.timedelta(days=1)\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 682, "total_tokens": 2075}}, {"id": "chatcmpl-8K1Nr0RDTHWm3ySGSPqsNEr7BbhEx", "object": "chat.completion", "created": 1699782571, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now(), 'location': request.remote_addr})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tshortened_url = data.get('shortened')\\n\\t\\n\\turl = DB.get(shortened_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\treturn jsonify({'data': url}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'shortened': 'ggl'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'data' in response.get_json()\\n\\t\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'shortened': 'ggl'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert 'error' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.get('/ggl')\\n\\tassert response.status_code == 302\\n\\t\\n\\tresponse = client.get('/nonexistent')\\n\\tassert response.status_code == 404\\n\\tassert 'error' in response.get_json()\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.get('/analytics', data=json.dumps({'shortened': 'ggl'}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert 'data' in response.get_json()\\n\\t\\n\\tresponse = client.get('/analytics', data=json.dumps({'shortened': 'nonexistent'}), content_type='application/json')\\n\\tassert response.status_code == 404\\n\\tassert 'error' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 911, "total_tokens": 2304}}]