[{"id": "chatcmpl-8JyHdpiYEdbgqGbCFQ4DwPyXeSNfo", "object": "chat.completion", "created": 1699770653, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\towner: str\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tcustom_alias = data.get('alias')\\n\\texpiration_date = data.get('expires_at')\\n\\towner = data.get('owner')\\n\\n\\t# Validate URL\\n\\tif not original_url:\\n\\t\\treturn jsonify({'error': 'URL is required'}), 400\\n\\n\\t# Generate unique alias\\n\\talias = custom_alias if custom_alias else ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))\\n\\n\\t# Check if alias already exists\\n\\tif alias in DB:\\n\\t\\treturn jsonify({'error': 'Alias already exists'}), 400\\n\\n\\t# Create URL object\\n\\turl = URL(original=original_url, shortened=alias, clicks=0, created_at=datetime.datetime.now(), expires_at=expiration_date, owner=owner)\\n\\n\\t# Save to DB\\n\\tDB[alias] = url\\n\\n\\treturn jsonify({'shortened_url': f'http://localhost:5000/{alias}'}), 201\\n\\n@app.route('/<alias>', methods=['GET'])\\ndef redirect_to_url(alias):\\n\\turl = DB.get(alias)\\n\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL has expired\\n\\tif url.expires_at and url.expires_at < datetime.datetime.now():\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 410\\n\\n\\t# Increment click count\\n\\turl.clicks += 1\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\talias = data.get('alias')\\n\\n\\t# Check if URL exists\\n\\tif not alias in DB:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\turl = DB[alias]\\n\\n\\t# Return analytics\\n\\treturn jsonify({'original_url': url.original, 'clicks': url.clicks, 'created_at': url.created_at, 'expires_at': url.expires_at}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\tapp.DB = {}\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n\\ndef test_redirect_to_url(client):\\n\\tapp.DB['test'] = app.URL(original='https://www.google.com', shortened='test', clicks=0, created_at=datetime.datetime.now(), expires_at=None, owner=None)\\n\\tresponse = client.get('/test')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tapp.DB['test'] = app.URL(original='https://www.google.com', shortened='test', clicks=0, created_at=datetime.datetime.now(), expires_at=None, owner=None)\\n\\tresponse = client.get('/analytics', json={'alias': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'original_url' in response.get_json()\\n\\tassert 'clicks' in response.get_json()\\n\\tassert 'created_at' in response.get_json()\\n\\tassert 'expires_at' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 954, "total_tokens": 2347}}]