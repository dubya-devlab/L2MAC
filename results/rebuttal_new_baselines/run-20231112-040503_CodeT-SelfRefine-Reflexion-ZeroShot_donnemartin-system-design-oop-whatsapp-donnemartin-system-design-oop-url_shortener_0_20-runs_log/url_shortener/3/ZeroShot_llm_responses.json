[{"id": "chatcmpl-8JwwCXNX8xbvA0wej9eAnyXf27YuN", "object": "chat.completion", "created": 1699765480, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration_date: datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tuser_id = str(uuid.uuid4())\\n\\tusers[user_id] = User(user_id, {})\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/create_url', methods=['POST'])\\ndef create_url():\\n\\tdata = request.get_json()\\n\\turl_id = str(uuid.uuid4())\\n\\tshort_url = data.get('short_url', url_id[:8])\\n\\turls[url_id] = URL(url_id, data['original_url'], short_url, data['user_id'], 0, [], data.get('expiration_date'))\\n\\tusers[data['user_id']].urls[url_id] = urls[url_id]\\n\\treturn jsonify({'url_id': url_id, 'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tfor url in urls.values():\\n\\t\\tif url.short_url == short_url:\\n\\t\\t\\tif url.expiration_date and url.expiration_date < datetime.now():\\n\\t\\t\\t\\treturn jsonify({'error': 'URL expired'}), 400\\n\\t\\t\\turl.clicks += 1\\n\\t\\t\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\t\\t\\treturn redirect(url.original_url)\\n\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n@app.route('/user/<user_id>', methods=['GET'])\\ndef get_user_urls(user_id):\\n\\tif user_id in users:\\n\\t\\treturn jsonify({'urls': [url.__dict__ for url in users[user_id].urls.values()]}), 200\\n\\treturn jsonify({'error': 'User not found'}), 404\\n\\n@app.route('/url/<url_id>', methods=['GET'])\\ndef get_url_data(url_id):\\n\\tif url_id in urls:\\n\\t\\treturn jsonify(urls[url_id].__dict__), 200\\n\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n@app.route('/url/<url_id>', methods=['DELETE'])\\ndef delete_url(url_id):\\n\\tif url_id in urls:\\n\\t\\tuser_id = urls[url_id].user_id\\n\\t\\tdel users[user_id].urls[url_id]\\n\\t\\tdel urls[url_id]\\n\\t\\treturn jsonify({'message': 'URL deleted'}), 200\\n\\treturn jsonify({'error': 'URL not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user')\\n\\tassert response.status_code == 201\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tassert user_id in app.users\\n\\n\\ndef test_create_url(client):\\n\\tuser_id = str(app.uuid.uuid4())\\n\\tapp.users[user_id] = app.User(user_id, {})\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tassert response.status_code == 201\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tassert url_id in app.urls\\n\\n\\ndef test_redirect_url(client):\\n\\tuser_id = str(app.uuid.uuid4())\\n\\tapp.users[user_id] = app.User(user_id, {})\\n\\turl_id = str(app.uuid.uuid4())\\n\\tshort_url = url_id[:8]\\n\\tapp.urls[url_id] = app.URL(url_id, 'https://www.google.com', short_url, user_id, 0, [], None)\\n\\tapp.users[user_id].urls[url_id] = app.urls[url_id]\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_user_urls(client):\\n\\tuser_id = str(app.uuid.uuid4())\\n\\tapp.users[user_id] = app.User(user_id, {})\\n\\tresponse = client.get(f'/user/{user_id}')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_get_url_data(client):\\n\\tuser_id = str(app.uuid.uuid4())\\n\\tapp.users[user_id] = app.User(user_id, {})\\n\\turl_id = str(app.uuid.uuid4())\\n\\tshort_url = url_id[:8]\\n\\tapp.urls[url_id] = app.URL(url_id, 'https://www.google.com', short_url, user_id, 0, [], None)\\n\\tapp.users[user_id].urls[url_id] = app.urls[url_id]\\n\\tresponse = client.get(f'/url/{url_id}')\\n\\tassert response.status_code == 200\\n\\n\\ndef test_delete_url(client):\\n\\tuser_id = str(app.uuid.uuid4())\\n\\tapp.users[user_id] = app.User(user_id, {})\\n\\turl_id = str(app.uuid.uuid4())\\n\\tshort_url = url_id[:8]\\n\\tapp.urls[url_id] = app.URL(url_id, 'https://www.google.com', short_url, user_id, 0, [], None)\\n\\tapp.users[user_id].urls[url_id] = app.urls[url_id]\\n\\tresponse = client.delete(f'/url/{url_id}')\\n\\tassert response.status_code == 200\\n\\tassert url_id not in app.urls\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1377, "total_tokens": 2770}}]