[{"id": "chatcmpl-8JwoqYHeTuXsY29MlfGTSQNPCabQJ", "object": "chat.completion", "created": 1699765024, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpires_at = data.get('expires_at')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turls[short_url] = URL(original_url, short_url, user, 0, datetime.datetime.now(), expires_at)\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and url.expires_at > datetime.datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tusers[username] = User(username, password, [])\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/user/<username>/urls', methods=['GET'])\\ndef get_user_urls(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\treturn jsonify({'urls': [url.short for url in user.urls]}), 200\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_data():\\n\\tapp.urls = {}\\n\\tapp.users = {}\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': datetime.datetime.now() + datetime.timedelta(days=1)})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': datetime.datetime.now() + datetime.timedelta(days=1)})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert 'message' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_get_user_urls(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'password'})\\n\\tresponse = client.get('/user/test/urls')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 923, "total_tokens": 2316}}, {"id": "chatcmpl-8JwpLHnZWju0SS1DeDh6uk3Y1I2gO", "object": "chat.completion", "created": 1699765055, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\tDB[shortened_url] = URL(original_url, shortened_url, user, [], expiration)\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and datetime.now() <= url.expiration:\\n\\t\\turl.clicks.append((str(datetime.now()), request.remote_addr))\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, DB, URL\\nfrom datetime import datetime, timedelta\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tDB.clear()\\n\\n@pytest.fixture\\ndef sample_url():\\n\\treturn URL('http://example.com', '12345678', 'test_user', [], datetime.now() + timedelta(days=1))\\n\\n\\ndef test_shorten_url(client, reset_db):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'http://example.com', 'user': 'test_user', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client, reset_db, sample_url):\\n\\tDB[sample_url.shortened] = sample_url\\n\\tresponse = client.get(f'/{sample_url.shortened}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == sample_url.original\\n\\tassert len(sample_url.clicks) == 1\\n\\n\\ndef test_redirect_url_not_found_or_expired(client, reset_db):\\n\\tresponse = client.get('/nonexistent')\\n\\tassert response.status_code == 404\\n\\tassert 'error' in response.get_json()\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 669, "total_tokens": 2062}}, {"id": "chatcmpl-8JwptsLORLza4wZg86AiakCNgOO2n", "object": "chat.completion", "created": 1699765089, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=shortened_url, clicks=0, click_data=[], expiration=expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_to_url(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif url.expiration and url.expiration < datetime.now():\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 410\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef valid_url():\\n\\treturn 'https://www.google.com'\\n\\n@pytest.fixture\\ndef invalid_url():\\n\\treturn 'invalid_url'\\n\\n@pytest.fixture\\ndef shortened_url():\\n\\treturn 'short'\\n\\n@pytest.fixture\\ndef expired_url():\\n\\treturn app.URL(original='https://www.expired.com', shortened='expired', clicks=0, click_data=[], expiration=datetime.now() - timedelta(days=1))\\n\\n@pytest.fixture\\ndef non_expired_url():\\n\\treturn app.URL(original='https://www.nonexpired.com', shortened='nonexpired', clicks=0, click_data=[], expiration=datetime.now() + timedelta(days=1))\\n\\n\\ndef test_shorten_url(client, valid_url, shortened_url):\\n\\tresponse = client.post('/shorten', json={'url': valid_url, 'shortened': shortened_url})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['data']['shortened'] == shortened_url\\n\\n\\ndef test_shorten_url_invalid_url(client, invalid_url, shortened_url):\\n\\tresponse = client.post('/shorten', json={'url': invalid_url, 'shortened': shortened_url})\\n\\tassert response.status_code == 400\\n\\n\\ndef test_redirect_to_url(client, non_expired_url):\\n\\tapp.DB[non_expired_url.shortened] = non_expired_url\\n\\tresponse = client.get('/' + non_expired_url.shortened)\\n\\tassert response.status_code == 302\\n\\n\\ndef test_redirect_to_url_expired(client, expired_url):\\n\\tapp.DB[expired_url.shortened] = expired_url\\n\\tresponse = client.get('/' + expired_url.shortened)\\n\\tassert response.status_code == 410\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 945, "total_tokens": 2338}}]