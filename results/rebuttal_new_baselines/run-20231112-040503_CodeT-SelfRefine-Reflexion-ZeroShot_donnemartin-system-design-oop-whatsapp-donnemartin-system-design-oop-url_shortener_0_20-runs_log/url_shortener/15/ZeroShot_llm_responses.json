[{"id": "chatcmpl-8K0v49cR8TKaMYUEyhHbxIo3nQbzF", "object": "chat.completion", "created": 1699780786, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: list\\n\\texpiration_date: datetime\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser_id = str(uuid.uuid4())\\n\\tuser = User(user_id, data['username'], data['password'], {})\\n\\tusers[user_id] = user\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.username == data['username'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify({'user_id': user.id}), 200\\n\\treturn jsonify({'error': 'Invalid credentials'}), 401\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten():\\n\\tdata = request.get_json()\\n\\turl_id = str(uuid.uuid4())\\n\\tshort_url = f'http://short.ly/{url_id}'\\n\\turl = URL(url_id, data['original_url'], short_url, data['user_id'], [], data.get('expiration_date'))\\n\\turls[url_id] = url\\n\\tusers[data['user_id']].urls[url_id] = url\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<url_id>', methods=['GET'])\\ndef redirect_to_original(url_id):\\n\\turl = urls.get(url_id)\\n\\tif url and (not url.expiration_date or url.expiration_date > datetime.now()):\\n\\t\\turl.clicks.append({'timestamp': datetime.now().isoformat()})\\n\\t\\treturn redirect(url.original_url, code=302)\\n\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/analytics/<url_id>', methods=['GET'])\\ndef analytics(url_id):\\n\\turl = urls.get(url_id)\\n\\tif url:\\n\\t\\treturn jsonify({'clicks': url.clicks}), 200\\n\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n@app.route('/admin', methods=['GET'])\\ndef admin():\\n\\treturn jsonify({'users': [user.__dict__ for user in users.values()], 'urls': [url.__dict__ for url in urls.values()]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_shorten(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten', json={'original_url': 'http://google.com', 'user_id': user_id})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in json.loads(response.data)\\n\\n\\ndef test_redirect_to_original(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten', json={'original_url': 'http://google.com', 'user_id': user_id})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\turl_id = short_url.split('/')[-1]\\n\\tresponse = client.get(f'/{url_id}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_analytics(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten', json={'original_url': 'http://google.com', 'user_id': user_id})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\turl_id = short_url.split('/')[-1]\\n\\tclient.get(f'/{url_id}')\\n\\tresponse = client.get(f'/analytics/{url_id}')\\n\\tassert response.status_code == 200\\n\\tassert len(json.loads(response.data)['clicks']) == 1\\n\\n\\ndef test_admin(client):\\n\\tresponse = client.get('/admin')\\n\\tassert response.status_code == 200\\n\\tassert 'users' in json.loads(response.data)\\n\\tassert 'urls' in json.loads(response.data)\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1272, "total_tokens": 2665}}]