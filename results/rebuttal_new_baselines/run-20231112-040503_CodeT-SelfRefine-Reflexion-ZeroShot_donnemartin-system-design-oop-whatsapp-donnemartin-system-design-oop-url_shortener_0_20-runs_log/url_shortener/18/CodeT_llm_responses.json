[{"id": "chatcmpl-8K1eFADMvQ6HVy30P8LvPtV4GxjyP", "object": "chat.completion", "created": 1699783587, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\n\\t# Redirect to original URL\\n\\turl.clicks += 1\\n\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'ggl', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.facebook.com', 'fb', (datetime.now() + timedelta(days=1)).isoformat()),\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['data']['original'] == url\\n\\tassert response.get_json()['data']['shortened'] == shortened\\n\\n\\t# Test duplicate shortened URL\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['error'] == 'Shortened URL already in use'\\n\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid_url', 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['error'] == 'Invalid URL'\\n\\n\\t# Test URL redirection\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == url\\n\\n\\t# Test URL expiration\\n\\texpired_url = 'expired'\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': expired_url, 'expiration': (datetime.now() - timedelta(days=1)).isoformat()})\\n\\tresponse = client.get(f'/{expired_url}')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['error'] == 'URL has expired'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 973, "total_tokens": 2366}}, {"id": "chatcmpl-8K1ezVB50aXUGhN3KnrMccC1qLfbg", "object": "chat.completion", "created": 1699783633, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpires_at = data.get('expires_at')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turl = URL(original_url, short_url, user, 0, datetime.datetime.now(), expires_at)\\n\\turls[short_url] = url\\n\\tif user:\\n\\t\\tusers[user].urls.append(url)\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and url.expires_at > datetime.datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tuser = User(username, password, [])\\n\\tusers[username] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/user/<username>/urls', methods=['GET'])\\ndef get_user_urls(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\treturn jsonify({'urls': [url.short for url in user.urls]}), 200\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_data():\\n\\tapp.urls = {}\\n\\tapp.users = {}\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert 'message' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_get_user_urls(client):\\n\\tclient.post('/user', json={'username': 'test', 'password': 'test'})\\n\\tclient.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test'})\\n\\tresponse = client.get('/user/test/urls')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\\n\\tassert len(response.get_json()['urls']) == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 944, "total_tokens": 2337}}, {"id": "chatcmpl-8K1fcfqo7yjss4mdS9nGitxkzv4jp", "object": "chat.completion", "created": 1699783672, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict, List\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: Dict[str, str]\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: List[datetime.datetime]\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tuser_id = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\\n\\tusers[user_id] = User(user_id, {})\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/shorten_url', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data['original_url']\\n\\tuser_id = data['user_id']\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turls[short_url] = URL(original_url, short_url, user_id, [])\\n\\tusers[user_id].urls[short_url] = original_url\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tif short_url in urls:\\n\\t\\turls[short_url].clicks.append(datetime.datetime.now())\\n\\t\\treturn redirect(urls[short_url].original_url, code=302)\\n\\telse:\\n\\t\\treturn 'URL not found', 404\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tuser_id = data['user_id']\\n\\tuser_urls = users[user_id].urls\\n\\tanalytics = {}\\n\\tfor short_url, original_url in user_urls.items():\\n\\t\\tanalytics[short_url] = {'original_url': original_url, 'clicks': len(urls[short_url].clicks)}\\n\\treturn jsonify(analytics), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\nfrom flask import Flask\\nfrom werkzeug.wrappers import response\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user')\\n\\tassert response.status_code == 201\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tassert user_id in app.users\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tassert response.status_code == 201\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tassert short_url in app.urls\\n\\tassert short_url in app.users[user_id].urls\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'https://www.google.com'\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com', 'user_id': user_id})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tclient.get(f'/{short_url}')\\n\\tresponse = client.get('/analytics', json={'user_id': user_id})\\n\\tassert response.status_code == 200\\n\\tanalytics = json.loads(response.data)\\n\\tassert analytics[short_url]['original_url'] == 'https://www.google.com'\\n\\tassert analytics[short_url]['clicks'] == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1045, "total_tokens": 2438}}]