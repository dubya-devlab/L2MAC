[{"id": "chatcmpl-8K0DGtc1AddTnHgc6DhY389HqlbVj", "object": "chat.completion", "created": 1699778070, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully'}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\t# Test valid URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'goog', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 200\\n\\t\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid', 'shortened': 'invalid', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 400\\n\\t\\n\\t# Test duplicate shortened URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'goog', 'expiration': (datetime.now() + timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 400\\n\\n\\ndef test_redirect_url(client):\\n\\t# Test valid shortened URL\\n\\tresponse = client.get('/goog')\\n\\tassert response.status_code == 302\\n\\t\\n\\t# Test invalid shortened URL\\n\\tresponse = client.get('/invalid')\\n\\tassert response.status_code == 404\\n\\t\\n\\t# Test expired URL\\n\\tapp.DB['expired'] = app.URL('https://www.google.com', 'expired', 0, [], datetime.now() - timedelta(days=1))\\n\\tresponse = client.get('/expired')\\n\\tassert response.status_code == 400\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 881, "total_tokens": 2274}}, {"id": "chatcmpl-8K0Do6yvF7iEXO2gcAVucAX3WmPPa", "object": "chat.completion", "created": 1699778104, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: list\\n\\texpiration_date: datetime\\n\\n@app.route('/shorten_url', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('original_url')\\n\\tshort_url = data.get('short_url')\\n\\tuser_id = data.get('user_id')\\n\\texpiration_date = data.get('expiration_date')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if short URL is available\\n\\tif short_url in urls:\\n\\t\\treturn jsonify({'error': 'Short URL is already in use'}), 400\\n\\t\\n\\t# Create URL object and store it\\n\\turl = URL(original_url, short_url, user_id, [], expiration_date)\\n\\turls[short_url] = url\\n\\t\\n\\t# Associate URL with user\\n\\tif user_id in users:\\n\\t\\tusers[user_id].urls.append(url)\\n\\t\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url is None:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration_date:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 410\\n\\t\\n\\t# Record click\\n\\turl.clicks.append({'timestamp': datetime.now(), 'ip': request.remote_addr})\\n\\t\\n\\treturn redirect(url.original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tuser_id = request.args.get('user_id')\\n\\tuser = users.get(user_id)\\n\\tif user is None:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\t\\n\\t# Prepare analytics data\\n\\tanalytics = []\\n\\tfor url in user.urls:\\n\\t\\tanalytics.append({\\n\\t\\t\\t'original_url': url.original_url,\\n\\t\\t\\t'short_url': url.short_url,\\n\\t\\t\\t'clicks': len(url.clicks),\\n\\t\\t\\t'last_clicked': max(url.clicks, key=lambda x: x['timestamp']) if url.clicks else None\\n\\t\\t})\\n\\t\\n\\treturn jsonify({'analytics': analytics}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten_url', json={\\n\\t\\t'original_url': 'https://www.google.com',\\n\\t\\t'short_url': 'goog',\\n\\t\\t'user_id': 'user1',\\n\\t\\t'expiration_date': '2022-12-31T23:59:59'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'short_url': 'goog'}\\n\\n\\ndef test_redirect_to_url(client):\\n\\tresponse = client.get('/goog')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'https://www.google.com'\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.get('/analytics?user_id=user1')\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert len(data['analytics']) == 1\\n\\tassert data['analytics'][0]['original_url'] == 'https://www.google.com'\\n\\tassert data['analytics'][0]['short_url'] == 'goog'\\n\\tassert data['analytics'][0]['clicks'] == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1038, "total_tokens": 2431}}, {"id": "chatcmpl-8K0EPfwa4SaU9MQ8dF6jrBtspaDXp", "object": "chat.completion", "created": 1699778141, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\n\\t# Redirect to original URL and update click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.facebook.com', 'fb', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.twitter.com', 'tw', (datetime.now() + timedelta(days=1)).isoformat())\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['data']['original'] == url\\n\\tassert response.get_json()['data']['shortened'] == shortened\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'fb', 'tw'])\\ndef test_redirect_url(client, reset_db, shortened):\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\\n\\tassert app.DB[shortened].clicks == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 816, "total_tokens": 2209}}]