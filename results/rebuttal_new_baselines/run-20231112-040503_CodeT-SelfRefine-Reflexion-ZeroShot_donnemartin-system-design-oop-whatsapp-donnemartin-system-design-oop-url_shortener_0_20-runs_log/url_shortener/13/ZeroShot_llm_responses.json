[{"id": "chatcmpl-8K0KxVHjqOswgSKkMzIiQm9Q5igps", "object": "chat.completion", "created": 1699778547, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {\\n\\t'users': {},\\n\\t'urls': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime.datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tif username in DB['users']:\\n\\t\\treturn jsonify({'error': 'User already exists'}), 400\\n\\tDB['users'][username] = User(username, password, {})\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/create_url', methods=['POST'])\\ndef create_url():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\toriginal_url = data.get('original_url')\\n\\tshort_url = data.get('short_url')\\n\\texpiration = data.get('expiration')\\n\\tif username not in DB['users'] or DB['users'][username].password != password:\\n\\t\\treturn jsonify({'error': 'Invalid credentials'}), 401\\n\\tif short_url in DB['urls']:\\n\\t\\treturn jsonify({'error': 'Short URL already exists'}), 400\\n\\tDB['urls'][short_url] = URL(original_url, short_url, username, 0, [], datetime.datetime.strptime(expiration, '%Y-%m-%d %H:%M:%S'))\\n\\tDB['users'][username].urls[short_url] = DB['urls'][short_url]\\n\\treturn jsonify({'message': 'URL created successfully'}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tif short_url not in DB['urls'] or datetime.datetime.now() > DB['urls'][short_url].expiration:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\tDB['urls'][short_url].clicks += 1\\n\\tDB['urls'][short_url].click_data.append(str(datetime.datetime.now()))\\n\\treturn redirect(DB['urls'][short_url].original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tif username not in DB['users'] or DB['users'][username].password != password:\\n\\t\\treturn jsonify({'error': 'Invalid credentials'}), 401\\n\\treturn jsonify({url: {'clicks': DB['users'][username].urls[url].clicks, 'click_data': DB['users'][username].urls[url].click_data} for url in DB['users'][username].urls}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef setup():\\n\\tapp.DB['users'] = {}\\n\\tapp.DB['urls'] = {}\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created successfully'}\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_create_url(client):\\n\\tclient.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/create_url', json={'username': 'test', 'password': 'test', 'original_url': 'https://www.google.com', 'short_url': 'google', 'expiration': (datetime.datetime.now() + datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'URL created successfully'}\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_redirect_url(client):\\n\\tclient.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tclient.post('/create_url', json={'username': 'test', 'password': 'test', 'original_url': 'https://www.google.com', 'short_url': 'google', 'expiration': (datetime.datetime.now() + datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')})\\n\\tresponse = client.get('/google')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.usefixtures('setup')\\ndef test_get_analytics(client):\\n\\tclient.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tclient.post('/create_url', json={'username': 'test', 'password': 'test', 'original_url': 'https://www.google.com', 'short_url': 'google', 'expiration': (datetime.datetime.now() + datetime.timedelta(days=1)).strftime('%Y-%m-%d %H:%M:%S')})\\n\\tclient.get('/google')\\n\\tresponse = client.get('/analytics', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'google' in response.get_json()\\n\\tassert response.get_json()['google']['clicks'] == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1353, "total_tokens": 2746}}]