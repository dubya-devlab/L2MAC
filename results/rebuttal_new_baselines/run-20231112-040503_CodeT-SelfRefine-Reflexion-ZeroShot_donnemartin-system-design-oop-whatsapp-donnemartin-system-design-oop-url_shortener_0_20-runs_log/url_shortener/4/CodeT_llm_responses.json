[{"id": "chatcmpl-8Jx4zzeSNpsZbYH2Kl2iu1nSgmZJM", "object": "chat.completion", "created": 1699766025, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now(), 'location': request.remote_addr})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<shortened>', methods=['GET'])\\ndef get_analytics(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\treturn jsonify({'data': url}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'ggl'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['data']['original'] == 'https://www.google.com'\\n\\tassert json.loads(response.data)['data']['shortened'] == 'ggl'\\n\\n\\ndef test_redirect_url(client):\\n\\tclient.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'ggl'})\\n\\tresponse = client.get('/ggl')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tclient.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'ggl'})\\n\\tresponse = client.get('/analytics/ggl')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['data']['clicks'] == 0\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 811, "total_tokens": 2204}}, {"id": "chatcmpl-8Jx5Qq6fuuhYHUjlYRS6WbNSx7qlJ", "object": "chat.completion", "created": 1699766052, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: list\\n\\texpiration_date: datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tuser_id = str(uuid.uuid4())\\n\\tusers[user_id] = User(id=user_id, urls={})\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/create_url', methods=['POST'])\\ndef create_url():\\n\\tdata = request.get_json()\\n\\tuser_id = data.get('user_id')\\n\\toriginal_url = data.get('original_url')\\n\\tshort_url = data.get('short_url', str(uuid.uuid4())[:8])\\n\\texpiration_date = data.get('expiration_date')\\n\\tif expiration_date:\\n\\t\\texpiration_date = datetime.strptime(expiration_date, '%Y-%m-%d %H:%M:%S')\\n\\turl_id = str(uuid.uuid4())\\n\\turls[url_id] = URL(id=url_id, original_url=original_url, short_url=short_url, user_id=user_id, clicks=[], expiration_date=expiration_date)\\n\\tusers[user_id].urls[url_id] = urls[url_id]\\n\\treturn jsonify({'url_id': url_id}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tfor url in urls.values():\\n\\t\\tif url.short_url == short_url:\\n\\t\\t\\tif url.expiration_date and url.expiration_date < datetime.now():\\n\\t\\t\\t\\treturn 'URL expired', 410\\n\\t\\t\\turl.clicks.append({'timestamp': datetime.now().isoformat()})\\n\\t\\t\\treturn redirect(url.original_url)\\n\\treturn 'URL not found', 404\\n\\n@app.route('/analytics/<user_id>', methods=['GET'])\\ndef get_analytics(user_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn 'User not found', 404\\n\\tanalytics = {}\\n\\tfor url in user.urls.values():\\n\\t\\tanalytics[url.id] = {'original_url': url.original_url, 'short_url': url.short_url, 'clicks': url.clicks}\\n\\treturn jsonify(analytics)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user')\\n\\tassert response.status_code == 201\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tassert user_id in app.users\\n\\n\\ndef test_create_url(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'user_id': user_id, 'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tassert url_id in app.urls\\n\\tassert url_id in app.users[user_id].urls\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'user_id': user_id, 'original_url': 'https://www.google.com'})\\n\\tshort_url = app.urls[json.loads(response.data)['url_id']].short_url\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'https://www.google.com'\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/create_user')\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'user_id': user_id, 'original_url': 'https://www.google.com'})\\n\\tresponse = client.get(f'/analytics/{user_id}')\\n\\tassert response.status_code == 200\\n\\tanalytics = json.loads(response.data)\\n\\tassert len(analytics) == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1072, "total_tokens": 2465}}, {"id": "chatcmpl-8Jx69rYQUnYBb1uJz8ZGivUCpVjgV", "object": "chat.completion", "created": 1699766097, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data['url']\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turls[short_url] = URL(original_url, short_url, user, 0, [], expiration)\\n\\tif user:\\n\\t\\tusers[user].urls.append(short_url)\\n\\treturn jsonify({'short_url': short_url})\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and (not url.expiration or url.expiration > datetime.datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\turl.click_data.append({'time': datetime.datetime.now().isoformat()})\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tusers[username] = User(username, password, [])\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/user/<username>', methods=['GET'])\\ndef get_user(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\treturn jsonify({'username': user.username, 'urls': user.urls})\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_data():\\n\\tapp.urls = {}\\n\\tapp.users = {}\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'short_url' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\n@pytest.mark.usefixtures('reset_data')\\ndef test_get_user(client):\\n\\tclient.post('/user', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.get('/user/test')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['username'] == 'test'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 891, "total_tokens": 2284}}]