[{"id": "chatcmpl-8JxCE51aXnLPYGsQXY0gM9iCoRqAw", "object": "chat.completion", "created": 1699766474, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\turl = URL(original_url, shortened_url, user, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_url(shortened_url):\\n\\turl = DB.get(shortened_url)\\n\\tif url and (not url.expiration or url.expiration > datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/analytics/<shortened_url>', methods=['GET'])\\ndef get_analytics(shortened_url):\\n\\turl = DB.get(shortened_url)\\n\\tif url:\\n\\t\\treturn jsonify({'original_url': url.original, 'clicks': url.clicks, 'click_data': url.click_data}), 200\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test_user', 'expiration': None}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test_user', 'expiration': None}), content_type='application/json')\\n\\tshortened_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/{shortened_url}')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test_user', 'expiration': None}), content_type='application/json')\\n\\tshortened_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/analytics/{shortened_url}')\\n\\tassert response.status_code == 200\\n\\tassert 'original_url' in response.get_json()\\n\\tassert 'clicks' in response.get_json()\\n\\tassert 'click_data' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 848, "total_tokens": 2241}}]