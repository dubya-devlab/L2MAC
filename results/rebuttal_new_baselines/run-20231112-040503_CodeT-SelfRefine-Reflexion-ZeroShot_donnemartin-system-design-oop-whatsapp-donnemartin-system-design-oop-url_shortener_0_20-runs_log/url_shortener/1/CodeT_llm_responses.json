[{"id": "chatcmpl-8JwIvuPiQG2ic6e94MfR1Xv3goDjo", "object": "chat.completion", "created": 1699763045, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.reddit.com', 'redd', (datetime.now() + timedelta(days=1)).isoformat()),\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert app.DB[shortened].original == url\\n\\tassert app.DB[shortened].shortened == shortened\\n\\tassert app.DB[shortened].clicks == 0\\n\\tassert app.DB[shortened].click_data == []\\n\\tassert app.DB[shortened].expiration.isoformat() == expiration\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'redd'])\\ndef test_redirect_url(client, reset_db, shortened):\\n\\tapp.DB[shortened] = app.URL('https://www.google.com', shortened, 0, [], datetime.now() + timedelta(days=1))\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\\n\\tassert app.DB[shortened].clicks == 1\\n\\tassert len(app.DB[shortened].click_data) == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 885, "total_tokens": 2278}}, {"id": "chatcmpl-8JwJRWoTnBG97m4Gc0mB6RCfzDDu8", "object": "chat.completion", "created": 1699763077, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration_date: datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser_id = str(uuid.uuid4())\\n\\tuser = User(user_id, data['username'], data['password'], {})\\n\\tusers[user_id] = user\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/create_url', methods=['POST'])\\ndef create_url():\\n\\tdata = request.get_json()\\n\\turl_id = str(uuid.uuid4())\\n\\turl = URL(url_id, data['original_url'], data['short_url'], data['user_id'], 0, [], data['expiration_date'])\\n\\turls[url_id] = url\\n\\tusers[data['user_id']].urls[url_id] = url\\n\\treturn jsonify({'url_id': url_id}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tfor url in urls.values():\\n\\t\\tif url.short_url == short_url:\\n\\t\\t\\turl.clicks += 1\\n\\t\\t\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\t\\t\\treturn redirect(url.original_url, code=302)\\n\\treturn 'URL not found', 404\\n\\n@app.route('/user/<user_id>/urls', methods=['GET'])\\ndef get_user_urls(user_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn 'User not found', 404\\n\\treturn jsonify({url.id: url.original_url for url in user.urls.values()}), 200\\n\\n@app.route('/user/<user_id>/url/<url_id>', methods=['DELETE'])\\ndef delete_url(user_id, url_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn 'User not found', 404\\n\\turl = user.urls.get(url_id)\\n\\tif not url:\\n\\t\\treturn 'URL not found', 404\\n\\tdel user.urls[url_id]\\n\\tdel urls[url_id]\\n\\treturn '', 204\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tassert user_id in app.users\\n\\n\\ndef test_create_url(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'short_url': 'goog', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tassert response.status_code == 201\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tassert url_id in app.urls\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'short_url': 'goog', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tresponse = client.get('/goog')\\n\\tassert response.status_code == 302\\n\\tassert app.urls[url_id].clicks == 1\\n\\n\\ndef test_get_user_urls(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'short_url': 'goog', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tresponse = client.get(f'/user/{user_id}/urls')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {url_id: 'https://www.google.com'}\\n\\n\\ndef test_delete_url(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/create_url', json={'original_url': 'https://www.google.com', 'short_url': 'goog', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\turl_id = json.loads(response.data)['url_id']\\n\\tresponse = client.delete(f'/user/{user_id}/url/{url_id}')\\n\\tassert response.status_code == 204\\n\\tassert url_id not in app.urls\\n\\tassert url_id not in app.users[user_id].urls\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1370, "total_tokens": 2763}}, {"id": "chatcmpl-8JwKAnGM2w0xDaKfyCcLfPh9zOUR7", "object": "chat.completion", "created": 1699763122, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\tDB[shortened_url] = URL(original_url, shortened_url, user, [], expiration)\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and datetime.now() <= url.expiration:\\n\\t\\turl.clicks.append((str(datetime.now()), request.remote_addr))\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tuser = request.args.get('user')\\n\\turls = [url for url in DB.values() if url.user == user]\\n\\treturn jsonify({'urls': urls}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tshort_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tresponse = client.get('/analytics?user=test')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()['urls']) > 0\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 738, "total_tokens": 2131}}]