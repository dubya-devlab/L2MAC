[{"id": "chatcmpl-8JxqFyHW4Oj1diMCPvJrIB37jTHfa", "object": "chat.completion", "created": 1699768955, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpires_at = data.get('expires_at')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turls[short_url] = URL(original_url, short_url, user, 0, datetime.datetime.now(), expires_at)\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and url.expires_at > datetime.datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tusers[username] = User(username, password, [])\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/user/<username>/urls', methods=['GET'])\\ndef get_user_urls(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\treturn jsonify([url.__dict__ for url in user.urls]), 200\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': datetime.datetime.now() + datetime.timedelta(days=1)})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': datetime.datetime.now() + datetime.timedelta(days=1)})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created'\\n\\ndef test_get_user_urls(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'password'})\\n\\tresponse = client.get('/user/test/urls')\\n\\tassert response.status_code == 200\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 856, "total_tokens": 2249}}, {"id": "chatcmpl-8Jxqkaut0aRnQiSCviQDXRx8tU1Hf", "object": "chat.completion", "created": 1699768986, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpires_at = data.get('expires_at')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turls[short_url] = URL(original_url, short_url, user, 0, datetime.datetime.now(), expires_at)\\n\\treturn {'short_url': short_url}, 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and url.expires_at > datetime.datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn {'error': 'URL not found or expired'}, 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('url, user, expires_at', [\\n\\t('https://www.google.com', 'user1', datetime.datetime.now() + datetime.timedelta(days=1)),\\n\\t('https://www.example.com', 'user2', datetime.datetime.now() + datetime.timedelta(hours=1)),\\n])\\ndef test_shorten_url(client, url, user, expires_at):\\n\\tresponse = client.post('/shorten', json={'url': url, 'user': user, 'expires_at': expires_at})\\n\\tassert response.status_code == 200\\n\\tassert 'short_url' in response.get_json()\\n\\n@pytest.mark.parametrize('short_url', [\\n\\t('ABCDE'),\\n\\t('12345'),\\n])\\ndef test_redirect_url(client, short_url):\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code in [302, 404]\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 602, "total_tokens": 1995}}, {"id": "chatcmpl-8JxrRslE6cjQNOFL8TKZxlzFTMrqq", "object": "chat.completion", "created": 1699769029, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration_date: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('original_url')\\n\\tuser_id = data.get('user_id')\\n\\texpiration_date = data.get('expiration_date')\\n\\tshort_url = str(uuid.uuid4())[:8]\\n\\turl = URL(original_url, short_url, user_id, 0, [], expiration_date)\\n\\tDB[short_url] = url\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and url.expiration_date > datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\t\\treturn redirect(url.original_url, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef url():\\n\\treturn {\\n\\t\\t'original_url': 'https://www.google.com',\\n\\t\\t'user_id': '123',\\n\\t\\t'expiration_date': (datetime.now() + timedelta(days=1)).isoformat()\\n\\t}\\n\\ndef test_shorten_url(client, url):\\n\\tresponse = client.post('/shorten', json=url)\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\ndef test_redirect_to_url(client, url):\\n\\tresponse = client.post('/shorten', json=url)\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == url['original_url']\\n\\ndef test_redirect_to_expired_url(client, url):\\n\\turl['expiration_date'] = (datetime.now() - timedelta(days=1)).isoformat()\\n\\tresponse = client.post('/shorten', json=url)\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 696, "total_tokens": 2089}}]