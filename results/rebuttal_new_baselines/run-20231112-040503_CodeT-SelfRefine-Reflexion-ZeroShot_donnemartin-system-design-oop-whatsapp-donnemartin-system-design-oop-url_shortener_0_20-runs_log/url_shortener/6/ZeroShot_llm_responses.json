[{"id": "chatcmpl-8Jxy2EWfMxWTEHlmtqwUPasqnmQw9", "object": "chat.completion", "created": 1699769438, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshort_url = ''.join(random.choices(string.ascii_letters + string.digits, k=5))\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tif expiration:\\n\\t\\texpiration = datetime.datetime.strptime(expiration, '%Y-%m-%d %H:%M:%S')\\n\\turl = URL(original=original_url, short=short_url, user=user, clicks=0, click_data=[], expiration=expiration)\\n\\turls[short_url] = url\\n\\tif user:\\n\\t\\tusers[user].urls.append(url)\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif not url or (url.expiration and url.expiration < datetime.datetime.now()):\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.datetime.now().isoformat()})\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tuser = User(username=username, password=password, urls=[])\\n\\tusers[username] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/user/<username>', methods=['GET'])\\ndef get_user(username):\\n\\tuser = users.get(username)\\n\\tif not user:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\treturn jsonify({'username': user.username, 'urls': [url.short for url in user.urls]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com'})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created'\\n\\ndef test_get_user(client):\\n\\tclient.post('/user', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.get('/user/test')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['username'] == 'test'\\n\\ndef test_url_expiration(client):\\n\\texpiration = (datetime.datetime.now() - datetime.timedelta(minutes=1)).strftime('%Y-%m-%d %H:%M:%S')\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'expiration': expiration})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1002, "total_tokens": 2395}}]