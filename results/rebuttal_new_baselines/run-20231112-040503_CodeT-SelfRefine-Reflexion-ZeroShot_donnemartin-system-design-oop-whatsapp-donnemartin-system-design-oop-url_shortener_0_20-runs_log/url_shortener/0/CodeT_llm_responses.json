[{"id": "chatcmpl-8Jw65WXosHBoZwGCC6k5HahM7KbIC", "object": "chat.completion", "created": 1699762249, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now(), 'location': request.remote_addr})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef init_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'ggl', datetime.now()),\\n\\t('https://www.facebook.com', 'fb', datetime.now()),\\n\\t('https://www.twitter.com', 'twtr', datetime.now())\\n])\\ndef test_shorten_url(client, init_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', json={'url': url, 'shortened': shortened, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['data']['original'] == url\\n\\tassert response.get_json()['data']['shortened'] == shortened\\n\\n@pytest.mark.parametrize('shortened', ['ggl', 'fb', 'twtr'])\\ndef test_redirect_url(client, init_db, shortened):\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 748, "total_tokens": 2141}}, {"id": "chatcmpl-8Jw6ZLyyNkP7TYVGXVGL5xkbGDJmT", "object": "chat.completion", "created": 1699762279, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tcreated_at: datetime\\n\\texpires_at: datetime\\n\\tuser_id: str\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser_id = data.get('user_id')\\n\\texpires_at = data.get('expires_at')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turl = URL(original_url, short_url, 0, datetime.now(), expires_at, user_id)\\n\\tDB[short_url] = url\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and url.expires_at > datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tuser_id = request.args.get('user_id')\\n\\turls = [url for url in DB.values() if url.user_id == user_id]\\n\\treturn jsonify({'urls': urls}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('url, user_id, expires_at', [\\n\\t('http://example.com', 'user1', '2022-12-31T23:59:59'),\\n\\t('http://google.com', 'user2', '2022-12-31T23:59:59')\\n])\\ndef test_shorten_url(client, url, user_id, expires_at):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': url, 'user_id': user_id, 'expires_at': expires_at}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n@pytest.mark.parametrize('short_url', [\\n\\t'ABCDE',\\n\\t'12345'\\n])\\ndef test_redirect_url(client, short_url):\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code in [302, 404]\\n\\n@pytest.mark.parametrize('user_id', [\\n\\t'user1',\\n\\t'user2'\\n])\\ndef test_get_analytics(client, user_id):\\n\\tresponse = client.get(f'/analytics?user_id={user_id}')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 762, "total_tokens": 2155}}, {"id": "chatcmpl-8Jw78lFDFs4R7FNAB7W8KBZXm44fr", "object": "chat.completion", "created": 1699762314, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\tcustom = data.get('custom')\\n\\texpires_at = data.get('expires_at')\\n\\n\\t# Validate URL\\n\\t# TODO: Add actual URL validation\\n\\n\\t# Generate short URL\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\tif custom:\\n\\t\\tshort_url = custom\\n\\n\\t# Create URL object\\n\\turl = URL(original=original_url, short=short_url, user=user, clicks=0, created_at=datetime.datetime.now(), expires_at=expires_at)\\n\\turls[short_url] = url\\n\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and (not url.expires_at or url.expires_at > datetime.datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tuser = data.get('user')\\n\\n\\tuser_urls = [url for url in urls.values() if url.user == user]\\n\\tanalytics = [{'original': url.original, 'short': url.short, 'clicks': url.clicks, 'created_at': url.created_at, 'expires_at': url.expires_at} for url in user_urls]\\n\\n\\treturn jsonify(analytics), 200\\n\\n@app.route('/users', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\n\\t# Create user object\\n\\tuser = User(username=username, password=password, urls=[])\\n\\tusers[username] = user\\n\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/users/<username>/urls', methods=['GET'])\\ndef get_user_urls(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\tuser_urls = [url for url in urls.values() if url.user == username]\\n\\t\\treturn jsonify(user_urls), 200\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': str(datetime.datetime.now() + datetime.timedelta(days=1))})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': str(datetime.datetime.now() + datetime.timedelta(days=1))})\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': str(datetime.datetime.now() + datetime.timedelta(days=1))})\\n\\tresponse = client.get('/analytics', json={'user': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/users', json={'username': 'test', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User created'\\n\\n\\ndef test_get_user_urls(client):\\n\\tresponse = client.post('/users', json={'username': 'test', 'password': 'password'})\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'user': 'test', 'expires_at': str(datetime.datetime.now() + datetime.timedelta(days=1))})\\n\\tresponse = client.get('/users/test/urls')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 1225, "total_tokens": 2618}}]