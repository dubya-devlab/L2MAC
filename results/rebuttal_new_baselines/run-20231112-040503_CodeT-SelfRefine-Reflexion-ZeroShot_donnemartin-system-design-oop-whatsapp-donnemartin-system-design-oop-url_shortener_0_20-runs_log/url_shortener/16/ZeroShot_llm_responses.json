[{"id": "chatcmpl-8K1F6noDxnQLmAtdJ0f2ymQSgvdIR", "object": "chat.completion", "created": 1699782028, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\tDB[shortened_url] = URL(original_url, shortened_url, user, [], expiration)\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_url(shortened_url):\\n\\turl = DB.get(shortened_url)\\n\\tif url and url.expiration > datetime.now():\\n\\t\\turl.clicks.append(datetime.now())\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn 'URL not found or expired', 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef url():\\n\\treturn app.URL('http://example.com', '12345678', 'user1', [], datetime.now() + timedelta(days=1))\\n\\ndef test_shorten_url(client, url):\\n\\tresponse = client.post('/shorten', json={'url': url.original, 'user': url.user, 'expiration': url.expiration.isoformat()})\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\ndef test_redirect_url(client, url):\\n\\tapp.DB[url.shortened] = url\\n\\tresponse = client.get('/' + url.shortened)\\n\\tassert response.status_code == 302\\n\\tassert response.location == url.original\\n\\ndef test_redirect_url_not_found_or_expired(client):\\n\\tresponse = client.get('/nonexistent')\\n\\tassert response.status_code == 404\\n\\tassert response.data == b'URL not found or expired'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1393, "completion_tokens": 597, "total_tokens": 1990}}]