[{"id": "chatcmpl-8KPWwaMobudk8VOYVRZaIMDXJPSf3", "object": "chat.completion", "created": 1699875390, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDATABASE = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\tclubs: list\\n\\tfollows: list\\n\\n@dataclass\\nclass Club:\\n\\tid: str\\n\\tname: str\\n\\tmembers: list\\n\\tprivacy: str\\n\\n@dataclass\\nclass Meeting:\\n\\tid: str\\n\\tclub_id: str\\n\\tdate: str\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDATABASE['users'][user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/club', methods=['POST'])\\ndef create_club():\\n\\tdata = request.get_json()\\n\\tclub = Club(**data)\\n\\tDATABASE['clubs'][club.id] = club\\n\\treturn jsonify(club), 201\\n\\n@app.route('/meeting', methods=['POST'])\\ndef create_meeting():\\n\\tdata = request.get_json()\\n\\tmeeting = Meeting(**data)\\n\\tDATABASE['meetings'][meeting.id] = meeting\\n\\treturn jsonify(meeting), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'id': '1', 'name': 'John', 'clubs': [], 'follows': []})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'id': '1', 'name': 'John', 'clubs': [], 'follows': []}\\n\\n\\ndef test_create_club(client):\\n\\tresponse = client.post('/club', json={'id': '1', 'name': 'Book Club', 'members': [], 'privacy': 'public'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'id': '1', 'name': 'Book Club', 'members': [], 'privacy': 'public'}\\n\\n\\ndef test_create_meeting(client):\\n\\tresponse = client.post('/meeting', json={'id': '1', 'club_id': '1', 'date': '2022-12-31'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'id': '1', 'club_id': '1', 'date': '2022-12-31'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1326, "completion_tokens": 652, "total_tokens": 1978}}]