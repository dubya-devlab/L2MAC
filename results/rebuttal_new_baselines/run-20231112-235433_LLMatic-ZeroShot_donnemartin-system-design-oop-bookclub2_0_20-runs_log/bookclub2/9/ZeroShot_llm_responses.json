[{"id": "chatcmpl-8KJPWux4tgGq9qBqHEXXfvaI5GxZ7", "object": "chat.completion", "created": 1699851866, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {\\n\\t'users': {},\\n\\t'clubs': {},\\n\\t'meetings': {},\\n\\t'forums': {},\\n\\t'profiles': {},\\n\\t'admins': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\n@dataclass\\nclass Club:\\n\\tid: str\\n\\tname: str\\n\\tprivacy: str\\n\\tcreator: User\\n\\n@dataclass\\nclass Meeting:\\n\\tid: str\\n\\tclub: Club\\n\\tdate: str\\n\\n@dataclass\\nclass Forum:\\n\\tid: str\\n\\tclub: Club\\n\\n@dataclass\\nclass Profile:\\n\\tid: str\\n\\tuser: User\\n\\treading_list: Dict[str, str]\\n\\n@dataclass\\nclass Admin:\\n\\tid: str\\n\\tuser: User\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(id=data['id'], name=data['name'])\\n\\tDB['users'][user.id] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/create_club', methods=['POST'])\\ndef create_club():\\n\\tdata = request.get_json()\\n\\tcreator = DB['users'].get(data['creator_id'])\\n\\tclub = Club(id=data['id'], name=data['name'], privacy=data['privacy'], creator=creator)\\n\\tDB['clubs'][club.id] = club\\n\\treturn jsonify({'message': 'Club created'}), 201\\n\\n@app.route('/create_meeting', methods=['POST'])\\ndef create_meeting():\\n\\tdata = request.get_json()\\n\\tclub = DB['clubs'].get(data['club_id'])\\n\\tmeeting = Meeting(id=data['id'], club=club, date=data['date'])\\n\\tDB['meetings'][meeting.id] = meeting\\n\\treturn jsonify({'message': 'Meeting created'}), 201\\n\\n@app.route('/create_forum', methods=['POST'])\\ndef create_forum():\\n\\tdata = request.get_json()\\n\\tclub = DB['clubs'].get(data['club_id'])\\n\\tforum = Forum(id=data['id'], club=club)\\n\\tDB['forums'][forum.id] = forum\\n\\treturn jsonify({'message': 'Forum created'}), 201\\n\\n@app.route('/create_profile', methods=['POST'])\\ndef create_profile():\\n\\tdata = request.get_json()\\n\\tuser = DB['users'].get(data['user_id'])\\n\\tprofile = Profile(id=data['id'], user=user, reading_list=data['reading_list'])\\n\\tDB['profiles'][profile.id] = profile\\n\\treturn jsonify({'message': 'Profile created'}), 201\\n\\n@app.route('/create_admin', methods=['POST'])\\ndef create_admin():\\n\\tdata = request.get_json()\\n\\tuser = DB['users'].get(data['user_id'])\\n\\tadmin = Admin(id=data['id'], user=user)\\n\\tDB['admins'][admin.id] = admin\\n\\treturn jsonify({'message': 'Admin created'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Club, Meeting, Forum, Profile, Admin\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {\\n\\t\\t'users': {},\\n\\t\\t'clubs': {},\\n\\t\\t'meetings': {},\\n\\t\\t'forums': {},\\n\\t\\t'profiles': {},\\n\\t\\t'admins': {}\\n\\t}\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'id': '1', 'name': 'John'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['users']['1'].name == 'John'\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_create_club(client):\\n\\tclient.post('/create_user', json={'id': '1', 'name': 'John'})\\n\\tresponse = client.post('/create_club', json={'id': '1', 'name': 'Book Club', 'privacy': 'public', 'creator_id': '1'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['clubs']['1'].name == 'Book Club'\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_create_meeting(client):\\n\\tclient.post('/create_user', json={'id': '1', 'name': 'John'})\\n\\tclient.post('/create_club', json={'id': '1', 'name': 'Book Club', 'privacy': 'public', 'creator_id': '1'})\\n\\tresponse = client.post('/create_meeting', json={'id': '1', 'club_id': '1', 'date': '2022-12-31'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['meetings']['1'].date == '2022-12-31'\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_create_forum(client):\\n\\tclient.post('/create_user', json={'id': '1', 'name': 'John'})\\n\\tclient.post('/create_club', json={'id': '1', 'name': 'Book Club', 'privacy': 'public', 'creator_id': '1'})\\n\\tresponse = client.post('/create_forum', json={'id': '1', 'club_id': '1'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['forums']['1'].club.name == 'Book Club'\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_create_profile(client):\\n\\tclient.post('/create_user', json={'id': '1', 'name': 'John'})\\n\\tresponse = client.post('/create_profile', json={'id': '1', 'user_id': '1', 'reading_list': {'book1': 'read', 'book2': 'unread'}})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['profiles']['1'].reading_list['book1'] == 'read'\\n\\n@pytest.mark.usefixtures('reset_db')\\ndef test_create_admin(client):\\n\\tclient.post('/create_user', json={'id': '1', 'name': 'John'})\\n\\tresponse = client.post('/create_admin', json={'id': '1', 'user_id': '1'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['admins']['1'].user.name == 'John'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1326, "completion_tokens": 1555, "total_tokens": 2881}}]