[{"id": "chatcmpl-8KOTDxrTfXZtYus6xeJJpYJcic39v", "object": "chat.completion", "created": 1699871315, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user\\n\\napp = Flask(__name__)\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tnew_user = user.User(data['username'], data['password'])\\n\\tuser.users[new_user.username] = new_user\\n\\treturn jsonify(new_user.to_dict()), 201\\n\\n@app.route('/user/<username>', methods=['GET'])\\ndef get_user(username):\\n\\tif username in user.users:\\n\\t\\treturn jsonify(user.users[username].to_dict()), 200\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\nusers = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'username': self.username, 'password': self.password}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport user\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef new_user():\\n\\treturn user.User('testuser', 'testpassword')\\n\\n\\ndef test_create_user(client, new_user):\\n\\tresponse = client.post('/user', data=json.dumps(new_user.to_dict()), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == new_user.to_dict()\\n\\n\\ndef test_get_user(client, new_user):\\n\\tuser.users[new_user.username] = new_user\\n\\tresponse = client.get(f'/user/{new_user.username}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == new_user.to_dict()\\n\\n\\ndef test_get_user_not_found(client):\\n\\tresponse = client.get('/user/nonexistentuser')\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'error': 'User not found'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1315, "completion_tokens": 537, "total_tokens": 1852}}]