[{"id": "chatcmpl-8KM7sepAKQ6x6WoD6TjmG0Tiv9cMl", "object": "chat.completion", "created": 1699862304, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDATABASE = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\tbank_accounts: list\\n\\texpenses: dict\\n\\tincomes: dict\\n\\tbudgets: dict\\n\\tinvestments: dict\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDATABASE[user.id] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/link_bank_account', methods=['POST'])\\ndef link_bank_account():\\n\\tdata = request.get_json()\\n\\tuser_id = data['user_id']\\n\\tbank_account = data['bank_account']\\n\\tDATABASE[user_id].bank_accounts.append(bank_account)\\n\\treturn jsonify({'message': 'Bank account linked successfully'}), 200\\n\\n@app.route('/add_expense', methods=['POST'])\\ndef add_expense():\\n\\tdata = request.get_json()\\n\\tuser_id = data['user_id']\\n\\texpense = data['expense']\\n\\tDATABASE[user_id].expenses.append(expense)\\n\\treturn jsonify({'message': 'Expense added successfully'}), 200\\n\\n@app.route('/add_income', methods=['POST'])\\ndef add_income():\\n\\tdata = request.get_json()\\n\\tuser_id = data['user_id']\\n\\tincome = data['income']\\n\\tDATABASE[user_id].incomes.append(income)\\n\\treturn jsonify({'message': 'Income added successfully'}), 200\\n\\n@app.route('/set_budget', methods=['POST'])\\ndef set_budget():\\n\\tdata = request.get_json()\\n\\tuser_id = data['user_id']\\n\\tbudget = data['budget']\\n\\tDATABASE[user_id].budgets.append(budget)\\n\\treturn jsonify({'message': 'Budget set successfully'}), 200\\n\\n@app.route('/add_investment', methods=['POST'])\\ndef add_investment():\\n\\tdata = request.get_json()\\n\\tuser_id = data['user_id']\\n\\tinvestment = data['investment']\\n\\tDATABASE[user_id].investments.append(investment)\\n\\treturn jsonify({'message': 'Investment added successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'id': '1', 'username': 'test', 'password': 'test', 'bank_accounts': [], 'expenses': {}, 'incomes': {}, 'budgets': {}, 'investments': {}})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created successfully'}\\n\\n\\ndef test_link_bank_account(client):\\n\\tresponse = client.post('/link_bank_account', json={'user_id': '1', 'bank_account': '1234567890'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Bank account linked successfully'}\\n\\n\\ndef test_add_expense(client):\\n\\tresponse = client.post('/add_expense', json={'user_id': '1', 'expense': {'category': 'Food', 'amount': 100}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Expense added successfully'}\\n\\n\\ndef test_add_income(client):\\n\\tresponse = client.post('/add_income', json={'user_id': '1', 'income': {'source': 'Salary', 'amount': 1000}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Income added successfully'}\\n\\n\\ndef test_set_budget(client):\\n\\tresponse = client.post('/set_budget', json={'user_id': '1', 'budget': {'category': 'Food', 'amount': 500}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Budget set successfully'}\\n\\n\\ndef test_add_investment(client):\\n\\tresponse = client.post('/add_investment', json={'user_id': '1', 'investment': {'type': 'Stock', 'amount': 1000}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Investment added successfully'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1315, "completion_tokens": 1075, "total_tokens": 2390}}]