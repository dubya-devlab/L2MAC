[{"id": "chatcmpl-8JyhP4WDHaBlihq53xhbFmhKjImhH", "object": "chat.completion", "created": 1699772251, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDATABASE = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tid: str\\n\\tuser_id: str\\n\\tamount: float\\n\\tcategory: str\\n\\trecurring: bool\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDATABASE[user.id] = user\\n\\treturn jsonify(dataclass_to_dict(user)), 201\\n\\n@app.route('/add_transaction', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\ttransaction = Transaction(**data)\\n\\tDATABASE[transaction.id] = transaction\\n\\treturn jsonify(dataclass_to_dict(transaction)), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('user', [\\n\\t{'id': '1', 'username': 'test', 'password': 'test'},\\n\\t{'id': '2', 'username': 'test2', 'password': 'test2'}\\n])\\ndef test_create_user(client, user):\\n\\tresponse = client.post('/create_user', data=json.dumps(user), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user\\n\\n@pytest.mark.parametrize('transaction', [\\n\\t{'id': '1', 'user_id': '1', 'amount': 100.0, 'category': 'groceries', 'recurring': False},\\n\\t{'id': '2', 'user_id': '2', 'amount': 200.0, 'category': 'salary', 'recurring': True}\\n])\\ndef test_add_transaction(client, transaction):\\n\\tresponse = client.post('/add_transaction', data=json.dumps(transaction), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == transaction\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 558, "total_tokens": 2218}}]