[{"id": "chatcmpl-8K06qvvyLxuVlRCF1vzTJRzm5JWqJ", "object": "chat.completion", "created": 1699777672, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\ntransactions = {}\\nbudgets = {}\\ninvestments = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tid: str\\n\\tuser_id: str\\n\\tamount: float\\n\\tcategory: str\\n\\trecurring: bool\\n\\n@dataclass\\nclass Budget:\\n\\tid: str\\n\\tuser_id: str\\n\\tcategory: str\\n\\tamount: float\\n\\n@dataclass\\nclass Investment:\\n\\tid: str\\n\\tuser_id: str\\n\\tvalue: float\\n\\troi: float\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(id=data['id'], username=data['username'], password=data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/transactions', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\ttransaction = Transaction(id=data['id'], user_id=data['user_id'], amount=data['amount'], category=data['category'], recurring=data['recurring'])\\n\\ttransactions[transaction.id] = transaction\\n\\treturn jsonify({'message': 'Transaction added successfully'}), 201\\n\\n@app.route('/budgets', methods=['POST'])\\ndef add_budget():\\n\\tdata = request.get_json()\\n\\tbudget = Budget(id=data['id'], user_id=data['user_id'], category=data['category'], amount=data['amount'])\\n\\tbudgets[budget.id] = budget\\n\\treturn jsonify({'message': 'Budget added successfully'}), 201\\n\\n@app.route('/investments', methods=['POST'])\\ndef add_investment():\\n\\tdata = request.get_json()\\n\\tinvestment = Investment(id=data['id'], user_id=data['user_id'], value=data['value'], roi=data['roi'])\\n\\tinvestments[investment.id] = investment\\n\\treturn jsonify({'message': 'Investment added successfully'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Transaction, Budget, Investment\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'id': '1', 'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert app.users['1'].username == 'test'\\n\\n\\ndef test_login(client):\\n\\tapp.users['1'] = User(id='1', username='test', password='test')\\n\\tresponse = client.post('/login', json={'id': '1', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\n\\ndef test_add_transaction(client):\\n\\tresponse = client.post('/transactions', json={'id': '1', 'user_id': '1', 'amount': 100.0, 'category': 'groceries', 'recurring': False})\\n\\tassert response.status_code == 201\\n\\tassert app.transactions['1'].amount == 100.0\\n\\n\\ndef test_add_budget(client):\\n\\tresponse = client.post('/budgets', json={'id': '1', 'user_id': '1', 'category': 'groceries', 'amount': 500.0})\\n\\tassert response.status_code == 201\\n\\tassert app.budgets['1'].amount == 500.0\\n\\n\\ndef test_add_investment(client):\\n\\tresponse = client.post('/investments', json={'id': '1', 'user_id': '1', 'value': 1000.0, 'roi': 0.1})\\n\\tassert response.status_code == 201\\n\\tassert app.investments['1'].value == 1000.0\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 1032, "total_tokens": 2692}}]