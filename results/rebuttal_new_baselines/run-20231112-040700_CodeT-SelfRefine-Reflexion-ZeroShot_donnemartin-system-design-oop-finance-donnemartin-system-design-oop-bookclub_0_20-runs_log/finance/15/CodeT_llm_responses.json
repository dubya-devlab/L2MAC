[{"id": "chatcmpl-8K010XNULgoNzVoAmltFQ64Dju2bR", "object": "chat.completion", "created": 1699777310, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers_db = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users_db:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers_db[username] = User(username, password)\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', data=json.dumps({'username': 'test', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created successfully'}\\n\\n\\t# Test creating a user that already exists\\n\\tresponse = client.post('/create_user', data=json.dumps({'username': 'test', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'User already exists'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 411, "total_tokens": 2071}}, {"id": "chatcmpl-8K01Jo2YyD4uSRTW8JdMxjGpFeZ19", "object": "chat.completion", "created": 1699777329, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport hashlib\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nsessions = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = hashlib.sha256(data['password'].encode()).hexdigest()\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[username] = User(username, password)\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = hashlib.sha256(data['password'].encode()).hexdigest()\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\tsessions[username] = True\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/logout', methods=['POST'])\\ndef logout():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif username not in sessions:\\n\\t\\treturn jsonify({'message': 'User not logged in'}), 400\\n\\tdel sessions[username]\\n\\treturn jsonify({'message': 'Logged out successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport hashlib\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef init_data():\\n\\tapp.users = {}\\n\\tapp.sessions = {}\\n\\n@pytest.mark.usefixtures('init_data')\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert app.users['test'].username == 'test'\\n\\tassert app.users['test'].password == hashlib.sha256('test'.encode()).hexdigest()\\n\\n@pytest.mark.usefixtures('init_data')\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert app.sessions['test'] == True\\n\\n@pytest.mark.usefixtures('init_data')\\ndef test_logout(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tclient.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/logout', json={'username': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'test' not in app.sessions\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 733, "total_tokens": 2393}}, {"id": "chatcmpl-8K01k7iRdpGR7LY2DXyq56dtwKCdU", "object": "chat.completion", "created": 1699777356, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDATABASE = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tid: str\\n\\tuser_id: str\\n\\tamount: float\\n\\tcategory: str\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDATABASE[user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/add_transaction', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\ttransaction = Transaction(**data)\\n\\tDATABASE[transaction.id] = transaction\\n\\treturn jsonify(transaction), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'id': '1', 'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'id': '1', 'username': 'test', 'password': 'test'}\\n\\n\\ndef test_add_transaction(client):\\n\\tresponse = client.post('/add_transaction', json={'id': '1', 'user_id': '1', 'amount': 100.0, 'category': 'groceries'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'id': '1', 'user_id': '1', 'amount': 100.0, 'category': 'groceries'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 478, "total_tokens": 2138}}]