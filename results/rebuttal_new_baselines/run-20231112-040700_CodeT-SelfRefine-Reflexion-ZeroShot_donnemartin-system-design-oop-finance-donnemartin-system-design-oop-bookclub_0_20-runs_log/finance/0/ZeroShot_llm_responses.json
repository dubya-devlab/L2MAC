[{"id": "chatcmpl-8Jw7rRJxJW9mEahoc7GuiEzLmypYa", "object": "chat.completion", "created": 1699762359, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport hashlib\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers_db = {}\\ntransactions_db = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tuser: str\\n\\tcategory: str\\n\\tamount: float\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = hashlib.sha256(data['password'].encode()).hexdigest()\\n\\tusers_db[username] = User(username, password)\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = hashlib.sha256(data['password'].encode()).hexdigest()\\n\\tif users_db.get(username) and users_db[username].password == password:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\n@app.route('/transaction', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tcategory = data['category']\\n\\tamount = data['amount']\\n\\tif users_db.get(username):\\n\\t\\ttransaction = Transaction(username, category, amount)\\n\\t\\ttransactions_db[username] = transactions_db.get(username, []) + [transaction]\\n\\t\\treturn jsonify({'message': 'Transaction added successfully'}), 201\\n\\telse:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/transactions', methods=['GET'])\\ndef get_transactions():\\n\\tusername = request.args.get('username')\\n\\tif users_db.get(username):\\n\\t\\tuser_transactions = transactions_db.get(username, [])\\n\\t\\treturn jsonify([transaction.__dict__ for transaction in user_transactions]), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport hashlib\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert app.users_db['test'].username == 'test'\\n\\tassert app.users_db['test'].password == hashlib.sha256('test'.encode()).hexdigest()\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\ndef test_add_transaction(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/transaction', json={'username': 'test', 'category': 'groceries', 'amount': 100.0})\\n\\tassert response.status_code == 201\\n\\tassert len(app.transactions_db['test']) == 1\\n\\tassert app.transactions_db['test'][0].user == 'test'\\n\\tassert app.transactions_db['test'][0].category == 'groceries'\\n\\tassert app.transactions_db['test'][0].amount == 100.0\\n\\ndef test_get_transactions(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tclient.post('/transaction', json={'username': 'test', 'category': 'groceries', 'amount': 100.0})\\n\\tresponse = client.get('/transactions', query_string={'username': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\\n\\tassert response.get_json()[0]['user'] == 'test'\\n\\tassert response.get_json()[0]['category'] == 'groceries'\\n\\tassert response.get_json()[0]['amount'] == 100.0\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 1007, "total_tokens": 2667}}]