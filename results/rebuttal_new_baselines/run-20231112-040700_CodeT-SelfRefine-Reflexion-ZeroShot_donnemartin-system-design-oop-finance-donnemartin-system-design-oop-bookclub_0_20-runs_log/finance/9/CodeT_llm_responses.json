[{"id": "chatcmpl-8JyLqQ0XyoyO7VqES4ZwZ5TBwhsFR", "object": "chat.completion", "created": 1699770914, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\ntransactions = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tuser_id: str\\n\\tcategory: str\\n\\tamount: float\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.username] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/add_transaction', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\ttransaction = Transaction(**data)\\n\\ttransactions[transaction.user_id] = transaction\\n\\treturn jsonify({'message': 'Transaction added'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Transaction\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert app.users['test'].username == 'test'\\n\\n\\ndef test_add_transaction(client):\\n\\tresponse = client.post('/add_transaction', json={'user_id': 'test', 'category': 'groceries', 'amount': 100.0})\\n\\tassert response.status_code == 201\\n\\tassert app.transactions['test'].category == 'groceries'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 436, "total_tokens": 2096}}, {"id": "chatcmpl-8JyMLqOtlxDMEEPHaRxQG4oGsrIzW", "object": "chat.completion", "created": 1699770945, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDATABASE = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tuser: str\\n\\tcategory: str\\n\\tamount: float\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDATABASE[user.username] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/add_transaction', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\ttransaction = Transaction(**data)\\n\\tDATABASE[transaction.user].append(transaction)\\n\\treturn jsonify({'message': 'Transaction added'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', data=json.dumps({'username': 'test', 'password': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created'}\\n\\n\\ndef test_add_transaction(client):\\n\\tclient.post('/create_user', data=json.dumps({'username': 'test', 'password': 'test'}), content_type='application/json')\\n\\tresponse = client.post('/add_transaction', data=json.dumps({'user': 'test', 'category': 'groceries', 'amount': 100.0}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Transaction added'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 482, "total_tokens": 2142}}, {"id": "chatcmpl-8JyMkeYceLHIpc0EsQHU8taXPa0cY", "object": "chat.completion", "created": 1699770970, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\ntransactions = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\n@dataclass\\nclass Transaction:\\n\\tuser_id: str\\n\\tcategory: str\\n\\tamount: float\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.username] = user\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/add_transaction', methods=['POST'])\\ndef add_transaction():\\n\\tdata = request.get_json()\\n\\ttransaction = Transaction(**data)\\n\\ttransactions[transaction.user_id] = transaction\\n\\treturn jsonify({'message': 'Transaction added'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Transaction\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert app.users['test'].username == 'test'\\n\\tassert app.users['test'].password == 'test'\\n\\n\\ndef test_add_transaction(client):\\n\\tresponse = client.post('/add_transaction', json={'user_id': 'test', 'category': 'groceries', 'amount': 100.0})\\n\\tassert response.status_code == 201\\n\\tassert app.transactions['test'].user_id == 'test'\\n\\tassert app.transactions['test'].category == 'groceries'\\n\\tassert app.transactions['test'].amount == 100.0\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1660, "completion_tokens": 478, "total_tokens": 2138}}]