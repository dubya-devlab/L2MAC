[{"id": "chatcmpl-8JxHJPTQ3DXp2HHNIn5C2QlPc5hKb", "object": "chat.completion", "created": 1699766789, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/venue', methods=['POST'])\\ndef create_venue():\\n\\tdata = request.get_json()\\n\\tvenue = Venue(**data)\\n\\tDB['venues'].append(venue)\\n\\treturn jsonify({'message': 'Venue created'}), 201\\n\\n@app.route('/guest', methods=['POST'])\\ndef create_guest():\\n\\tdata = request.get_json()\\n\\tguest = Guest(**data)\\n\\tDB['guests'].append(guest)\\n\\treturn jsonify({'message': 'Guest added'}), 201\\n\\n@app.route('/vendor', methods=['POST'])\\ndef create_vendor():\\n\\tdata = request.get_json()\\n\\tvendor = Vendor(**data)\\n\\tDB['vendors'].append(vendor)\\n\\treturn jsonify({'message': 'Vendor added'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['events'][0] == Event(1, 'Birthday', '2022-12-12', '18:00', 'Hawaiian', 'Blue and White')\\n\\n\\ndef test_create_venue(client):\\n\\tresponse = client.post('/venue', json={'id': 1, 'location': 'New York', 'capacity': 100, 'type': 'Outdoor'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['venues'][0] == Venue(1, 'New York', 100, 'Outdoor')\\n\\n\\ndef test_create_guest(client):\\n\\tresponse = client.post('/guest', json={'id': 1, 'name': 'John Doe', 'email': 'johndoe@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['guests'][0] == Guest(1, 'John Doe', 'johndoe@example.com')\\n\\n\\ndef test_create_vendor(client):\\n\\tresponse = client.post('/vendor', json={'id': 1, 'name': 'ABC Catering', 'type': 'Catering', 'reviews': ['Excellent service', 'Great food']})\\n\\tassert response.status_code == 201\\n\\tassert app.DB['vendors'][0] == Vendor(1, 'ABC Catering', 'Catering', ['Excellent service', 'Great food'])\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 898, "total_tokens": 2562}}]