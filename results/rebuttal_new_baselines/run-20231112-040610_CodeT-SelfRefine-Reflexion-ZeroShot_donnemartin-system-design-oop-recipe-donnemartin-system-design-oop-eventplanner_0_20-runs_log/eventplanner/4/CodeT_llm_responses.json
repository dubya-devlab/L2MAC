[{"id": "chatcmpl-8JxA5b6wUcmN24Yxafd2K2mLM8SFa", "object": "chat.completion", "created": 1699766341, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tid = len(DB) + 1\\n\\tevent = Event(id, **data)\\n\\tDB[id] = event\\n\\treturn jsonify({'id': id}), 201\\n\\n@app.route('/event/<int:id>', methods=['GET'])\\ndef get_event(id):\\n\\tevent = DB.get(id)\\n\\tif not event:\\n\\t\\treturn jsonify({'error': 'Event not found'}), 404\\n\\treturn jsonify(event.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\n\\ndef test_get_event(client):\\n\\tclient.post('/event', json={'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tresponse = client.get('/event/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['id'] == 1\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 483, "total_tokens": 2147}}, {"id": "chatcmpl-8JxARdmNEjeVOgurNVNnIIqUS8IZ5", "object": "chat.completion", "created": 1699766363, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tevent = Event(**request.json)\\n\\tDB['events'].append(event)\\n\\treturn jsonify(event), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tevent = next((e for e in DB['events'] if e.id == event_id), None)\\n\\tif event is None:\\n\\t\\treturn '', 404\\n\\tevent.type = request.json.get('type', event.type)\\n\\tevent.date = request.json.get('date', event.date)\\n\\tevent.time = request.json.get('time', event.time)\\n\\tevent.theme = request.json.get('theme', event.theme)\\n\\tevent.color_scheme = request.json.get('color_scheme', event.color_scheme)\\n\\treturn jsonify(event), 200\\n\\n@app.route('/venue', methods=['POST'])\\ndef create_venue():\\n\\tvenue = Venue(**request.json)\\n\\tDB['venues'].append(venue)\\n\\treturn jsonify(venue), 201\\n\\n@app.route('/guest', methods=['POST'])\\ndef create_guest():\\n\\tguest = Guest(**request.json)\\n\\tDB['guests'].append(guest)\\n\\treturn jsonify(guest), 201\\n\\n@app.route('/vendor', methods=['POST'])\\ndef create_vendor():\\n\\tvendor = Vendor(**request.json)\\n\\tDB['vendors'].append(vendor)\\n\\treturn jsonify(vendor), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t}\\n\\n\\ndef test_update_event(client):\\n\\tclient.post('/event', json={\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t})\\n\\tresponse = client.put('/event/1', json={\\n\\t\\t'type': 'Wedding'\\n\\t})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Wedding',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t}\\n\\n\\ndef test_create_venue(client):\\n\\tresponse = client.post('/venue', json={\\n\\t\\t'id': 1,\\n\\t\\t'location': 'New York',\\n\\t\\t'capacity': 100,\\n\\t\\t'type': 'Outdoor'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'location': 'New York',\\n\\t\\t'capacity': 100,\\n\\t\\t'type': 'Outdoor'\\n\\t}\\n\\n\\ndef test_create_guest(client):\\n\\tresponse = client.post('/guest', json={\\n\\t\\t'id': 1,\\n\\t\\t'name': 'John Doe',\\n\\t\\t'email': 'johndoe@example.com'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'name': 'John Doe',\\n\\t\\t'email': 'johndoe@example.com'\\n\\t}\\n\\n\\ndef test_create_vendor(client):\\n\\tresponse = client.post('/vendor', json={\\n\\t\\t'id': 1,\\n\\t\\t'name': 'Best Catering',\\n\\t\\t'type': 'Catering',\\n\\t\\t'reviews': ['Great service!', 'Delicious food!']\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'name': 'Best Catering',\\n\\t\\t'type': 'Catering',\\n\\t\\t'reviews': ['Great service!', 'Delicious food!']\\n\\t}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 1372, "total_tokens": 3036}}, {"id": "chatcmpl-8JxBGSIlq6cFMVHBQJCwcyCok6afd", "object": "chat.completion", "created": 1699766414, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB[event.id] = event\\n\\treturn jsonify(data), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tDB[event_id] = Event(**data)\\n\\treturn jsonify(data), 200\\n\\n@app.route('/event/<int:event_id>', methods=['GET'])\\ndef get_event(event_id):\\n\\tevent = DB.get(event_id)\\n\\tif event:\\n\\t\\treturn jsonify(event.__dict__), 200\\n\\telse:\\n\\t\\treturn {'message': 'Event not found'}, 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tdata = {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tresponse = client.post('/event', data=json.dumps(data), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == data\\n\\n\\ndef test_update_event(client):\\n\\tdata = {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tclient.post('/event', data=json.dumps(data), content_type='application/json')\\n\\tupdated_data = {'id': 1, 'type': 'Wedding', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tresponse = client.put(f'/event/{data['id']}', data=json.dumps(updated_data), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == updated_data\\n\\n\\ndef test_get_event(client):\\n\\tdata = {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tclient.post('/event', data=json.dumps(data), content_type='application/json')\\n\\tresponse = client.get(f'/event/{data['id']}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == data\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 755, "total_tokens": 2419}}]