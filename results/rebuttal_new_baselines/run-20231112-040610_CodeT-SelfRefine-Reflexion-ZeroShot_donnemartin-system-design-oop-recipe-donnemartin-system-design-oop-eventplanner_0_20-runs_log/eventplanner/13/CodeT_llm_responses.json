[{"id": "chatcmpl-8K01C5Pc3en4VpwAyA5ppDE6mExTa", "object": "chat.completion", "created": 1699777322, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tid = len(DB) + 1\\n\\tevent = Event(id, data['type'], data['date'], data['time'], data['theme'], data['color_scheme'])\\n\\tDB[id] = event\\n\\treturn jsonify({'id': id}), 201\\n\\n@app.route('/event/<int:id>', methods=['PUT'])\\ndef update_event(id):\\n\\tdata = request.get_json()\\n\\tevent = DB.get(id)\\n\\tif not event:\\n\\t\\treturn jsonify({'error': 'Event not found'}), 404\\n\\tevent.type = data.get('type', event.type)\\n\\tevent.date = data.get('date', event.date)\\n\\tevent.time = data.get('time', event.time)\\n\\tevent.theme = data.get('theme', event.theme)\\n\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\tDB[id] = event\\n\\treturn jsonify({'message': 'Event updated'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in json.loads(response.data)\\n\\n\\ndef test_update_event(client):\\n\\tclient.post('/event', json={\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t})\\n\\tresponse = client.put('/event/1', json={\\n\\t\\t'type': 'Wedding'\\n\\t})\\n\\tassert response.status_code == 200\\n\\tassert 'message' in json.loads(response.data)\\n\\tassert json.loads(response.data)['message'] == 'Event updated'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 679, "total_tokens": 2343}}, {"id": "chatcmpl-8K01h3oIObQNGlkZB3KsSJZOmadwA", "object": "chat.completion", "created": 1699777353, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tid = len(DB) + 1\\n\\tevent = Event(id, data['type'], data['date'], data['time'], data['theme'], data['color_scheme'])\\n\\tDB[id] = event\\n\\treturn jsonify({'id': id}), 201\\n\\n@app.route('/event/<int:id>', methods=['PUT'])\\ndef update_event(id):\\n\\tdata = request.get_json()\\n\\tevent = DB.get(id)\\n\\tif not event:\\n\\t\\treturn jsonify({'error': 'Event not found'}), 404\\n\\tevent.type = data.get('type', event.type)\\n\\tevent.date = data.get('date', event.date)\\n\\tevent.time = data.get('time', event.time)\\n\\tevent.theme = data.get('theme', event.theme)\\n\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\tDB[id] = event\\n\\treturn jsonify({'message': 'Event updated'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Superhero',\\n\\t\\t'color_scheme': 'Blue and Red'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': 1}\\n\\n\\ndef test_update_event(client):\\n\\tclient.post('/event', json={\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Superhero',\\n\\t\\t'color_scheme': 'Blue and Red'\\n\\t})\\n\\tresponse = client.put('/event/1', json={\\n\\t\\t'type': 'Wedding'\\n\\t})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Event updated'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 672, "total_tokens": 2336}}, {"id": "chatcmpl-8K02AnDzsBZp9a3BVOwlx2RA2Z8gs", "object": "chat.completion", "created": 1699777382, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify(event), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = data.get('type', event.type)\\n\\t\\t\\tevent.date = data.get('date', event.date)\\n\\t\\t\\tevent.time = data.get('time', event.time)\\n\\t\\t\\tevent.theme = data.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify(event), 200\\n\\treturn {'message': 'Event not found'}, 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t}\\n\\n\\ndef test_update_event(client):\\n\\tclient.post('/event', json={\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Birthday',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t})\\n\\tresponse = client.put('/event/1', json={\\n\\t\\t'type': 'Wedding'\\n\\t})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {\\n\\t\\t'id': 1,\\n\\t\\t'type': 'Wedding',\\n\\t\\t'date': '2022-12-12',\\n\\t\\t'time': '18:00',\\n\\t\\t'theme': 'Space',\\n\\t\\t'color_scheme': 'Blue and White'\\n\\t}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 881, "total_tokens": 2545}}]