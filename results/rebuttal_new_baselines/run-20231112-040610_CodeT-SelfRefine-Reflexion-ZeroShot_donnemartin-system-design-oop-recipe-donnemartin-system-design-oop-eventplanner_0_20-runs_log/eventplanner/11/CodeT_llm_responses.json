[{"id": "chatcmpl-8JzS9UmbJbYdZZrddcjg02W90Nv0B", "object": "chat.completion", "created": 1699775149, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB[event.id] = event\\n\\treturn jsonify(data), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB[event.id] = event\\n\\treturn jsonify(data), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tdata = {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tresponse = client.post('/event', json=data)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == data\\n\\n\\ndef test_update_event(client):\\n\\tdata = {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tclient.post('/event', json=data)\\n\\tupdated_data = {'id': 1, 'type': 'Wedding', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'}\\n\\tresponse = client.put(f'/event/{data['id']}', json=updated_data)\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == updated_data\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 554, "total_tokens": 2218}}, {"id": "chatcmpl-8JzSYziXAaI1shswVI14oWUTpVzc1", "object": "chat.completion", "created": 1699775174, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tid = len(DB) + 1\\n\\tevent = Event(id, data['type'], data['date'], data['time'], data['theme'], data['color_scheme'])\\n\\tDB[id] = event\\n\\treturn jsonify({'id': id}), 201\\n\\n@app.route('/event/<int:id>', methods=['PUT'])\\ndef update_event(id):\\n\\tdata = request.get_json()\\n\\tevent = DB.get(id)\\n\\tif not event:\\n\\t\\treturn jsonify({'error': 'Event not found'}), 404\\n\\tevent.type = data.get('type', event.type)\\n\\tevent.date = data.get('date', event.date)\\n\\tevent.time = data.get('time', event.time)\\n\\tevent.theme = data.get('theme', event.theme)\\n\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\tDB[id] = event\\n\\treturn jsonify({'message': 'Event updated'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef event():\\n\\treturn Event(1, 'Birthday', '2022-12-12', '18:00', 'Disney', 'Blue')\\n\\ndef test_create_event(client, event):\\n\\tresponse = client.post('/event', json=event.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': 1}\\n\\ndef test_update_event(client, event):\\n\\tapp.DB[1] = event\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Event updated'}\\n\\tassert app.DB[1].type == 'Wedding'\\n\\ndef test_update_event_not_found(client):\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'error': 'Event not found'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 647, "total_tokens": 2311}}, {"id": "chatcmpl-8JzSzExwhue0BpcZvFNH4vrFcMvX4", "object": "chat.completion", "created": 1699775201, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/venue', methods=['POST'])\\ndef create_venue():\\n\\tdata = request.get_json()\\n\\tvenue = Venue(**data)\\n\\tDB['venues'].append(venue)\\n\\treturn jsonify({'message': 'Venue created'}), 201\\n\\n@app.route('/guest', methods=['POST'])\\ndef create_guest():\\n\\tdata = request.get_json()\\n\\tguest = Guest(**data)\\n\\tDB['guests'].append(guest)\\n\\treturn jsonify({'message': 'Guest added'}), 201\\n\\n@app.route('/vendor', methods=['POST'])\\ndef create_vendor():\\n\\tdata = request.get_json()\\n\\tvendor = Vendor(**data)\\n\\tDB['vendors'].append(vendor)\\n\\treturn jsonify({'message': 'Vendor added'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {'events': [], 'venues': [], 'guests': [], 'vendors': []}\\n\\n@pytest.mark.parametrize('event', [\\n\\tEvent(id=1, type='Birthday', date='2022-12-12', time='18:00', theme='Hawaiian', color_scheme='Blue and White'),\\n\\tEvent(id=2, type='Wedding', date='2023-01-01', time='12:00', theme='Classic', color_scheme='White and Gold')\\n])\\ndef test_create_event(client, reset_db, event):\\n\\tresponse = client.post('/event', json=event.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert app.DB['events'][-1] == event\\n\\n@pytest.mark.parametrize('venue', [\\n\\tVenue(id=1, location='New York', capacity=100, type='Hall'),\\n\\tVenue(id=2, location='Los Angeles', capacity=200, type='Outdoor')\\n])\\ndef test_create_venue(client, reset_db, venue):\\n\\tresponse = client.post('/venue', json=venue.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert app.DB['venues'][-1] == venue\\n\\n@pytest.mark.parametrize('guest', [\\n\\tGuest(id=1, name='John Doe', email='johndoe@example.com'),\\n\\tGuest(id=2, name='Jane Doe', email='janedoe@example.com')\\n])\\ndef test_create_guest(client, reset_db, guest):\\n\\tresponse = client.post('/guest', json=guest.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert app.DB['guests'][-1] == guest\\n\\n@pytest.mark.parametrize('vendor', [\\n\\tVendor(id=1, name='Catering Co.', type='Catering', reviews=[]),\\n\\tVendor(id=2, name='Decor Inc.', type='Decoration', reviews=[])\\n])\\ndef test_create_vendor(client, reset_db, vendor):\\n\\tresponse = client.post('/vendor', json=vendor.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert app.DB['vendors'][-1] == vendor\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 1005, "total_tokens": 2669}}]