[{"id": "chatcmpl-8JwzIILDjHp4wNJB90dS5uONACtuy", "object": "chat.completion", "created": 1699765672, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tevent = Event(**request.json)\\n\\tDB['events'].append(event)\\n\\treturn jsonify(event), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = request.json.get('type', event.type)\\n\\t\\t\\tevent.date = request.json.get('date', event.date)\\n\\t\\t\\tevent.time = request.json.get('time', event.time)\\n\\t\\t\\tevent.theme = request.json.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = request.json.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify(event), 200\\n\\treturn jsonify({'error': 'Event not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'}\\n\\n\\ndef test_update_event(client):\\n\\tclient.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'id': 1, 'type': 'Wedding', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 759, "total_tokens": 2423}}]