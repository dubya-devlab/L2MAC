[{"id": "chatcmpl-8Jzm8dxltcIfFnZcW2i0uZyLz7uzY", "object": "chat.completion", "created": 1699776388, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = data.get('type', event.type)\\n\\t\\t\\tevent.date = data.get('date', event.date)\\n\\t\\t\\tevent.time = data.get('time', event.time)\\n\\t\\t\\tevent.theme = data.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify({'message': 'Event updated'}), 200\\n\\treturn jsonify({'message': 'Event not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Event created'}\\n\\n\\ndef test_update_event(client):\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Event updated'}\\n\\n\\ndef test_update_event_not_found(client):\\n\\tresponse = client.put('/event/999', json={'type': 'Wedding'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Event not found'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 710, "total_tokens": 2374}}, {"id": "chatcmpl-8Jzmgm0HCbXG5YFrSbXLwfimrqpA8", "object": "chat.completion", "created": 1699776422, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "The generated code has a mock database (DB) which is a dictionary. However, it seems like the 'events' key is not initialized in the DB which is causing KeyError when trying to append events to it. A suggestion to improve the code would be to initialize the 'events' key in the DB as an empty list before trying to append events to it. This should resolve the KeyError and allow events to be stored correctly in the DB."}, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "usage": {"prompt_tokens": 2786, "completion_tokens": 89, "total_tokens": 2875}}, {"id": "chatcmpl-8Jzmlm4HDoQOTGOu6qV0hpWggyLv1", "object": "chat.completion", "created": 1699776427, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "function_call", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {'events': []}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = data.get('type', event.type)\\n\\t\\t\\tevent.date = data.get('date', event.date)\\n\\t\\t\\tevent.time = data.get('time', event.time)\\n\\t\\t\\tevent.theme = data.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify({'message': 'Event updated'}), 200\\n\\treturn jsonify({'message': 'Event not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Event created'}\\n\\n\\ndef test_update_event(client):\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Event updated'}\\n\\n\\ndef test_update_event_not_found(client):\\n\\tresponse = client.put('/event/999', json={'type': 'Wedding'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Event not found'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2949, "completion_tokens": 721, "total_tokens": 3670}}, {"id": "chatcmpl-8JznZD2XgYLjbC1eWFWx9SaslX1zS", "object": "chat.completion", "created": 1699776477, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "The current implementation of the code only supports creating and updating events. However, the original task also mentioned the need to manage venues, guests, and vendors. A suggestion to improve the code would be to add endpoints for creating, updating, and deleting venues, guests, and vendors, similar to how events are being managed. This would make the application more complete and aligned with the original task requirements."}, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "usage": {"prompt_tokens": 3731, "completion_tokens": 79, "total_tokens": 3810}}, {"id": "chatcmpl-8JzneQby9lCIo1kuOscE6gDvfbG42", "object": "chat.completion", "created": 1699776482, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "function_call", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {'events': [], 'venues': [], 'guests': [], 'vendors': []}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = data.get('type', event.type)\\n\\t\\t\\tevent.date = data.get('date', event.date)\\n\\t\\t\\tevent.time = data.get('time', event.time)\\n\\t\\t\\tevent.theme = data.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify({'message': 'Event updated'}), 200\\n\\treturn jsonify({'message': 'Event not found'}), 404\\n\\n@app.route('/venue', methods=['POST'])\\ndef create_venue():\\n\\tdata = request.get_json()\\n\\tvenue = Venue(**data)\\n\\tDB['venues'].append(venue)\\n\\treturn jsonify({'message': 'Venue created'}), 201\\n\\n@app.route('/guest', methods=['POST'])\\ndef create_guest():\\n\\tdata = request.get_json()\\n\\tguest = Guest(**data)\\n\\tDB['guests'].append(guest)\\n\\treturn jsonify({'message': 'Guest created'}), 201\\n\\n@app.route('/vendor', methods=['POST'])\\ndef create_vendor():\\n\\tdata = request.get_json()\\n\\tvendor = Vendor(**data)\\n\\tDB['vendors'].append(vendor)\\n\\treturn jsonify({'message': 'Vendor created'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Event created'}\\n\\n\\ndef test_update_event(client):\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Event updated'}\\n\\n\\ndef test_update_event_not_found(client):\\n\\tresponse = client.put('/event/999', json={'type': 'Wedding'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Event not found'}\\n\\n\\ndef test_create_venue(client):\\n\\tresponse = client.post('/venue', json={'id': 1, 'location': 'New York', 'capacity': 100, 'type': 'Indoor'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Venue created'}\\n\\n\\ndef test_create_guest(client):\\n\\tresponse = client.post('/guest', json={'id': 1, 'name': 'John Doe', 'email': 'johndoe@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Guest created'}\\n\\n\\ndef test_create_vendor(client):\\n\\tresponse = client.post('/vendor', json={'id': 1, 'name': 'ABC Catering', 'type': 'Catering', 'reviews': ['Great service', 'Delicious food']})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Vendor created'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 3884, "completion_tokens": 1128, "total_tokens": 5012}}, {"id": "chatcmpl-8JzoU5EvgGPrEXSgbru1XQGp7ejQG", "object": "chat.completion", "created": 1699776534, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "The current implementation of the code allows for creating events, venues, guests, and vendors. However, it does not provide functionality to update or delete these entities. A suggestion to improve the code would be to add endpoints for updating and deleting venues, guests, and vendors, similar to how events are being managed. This would make the application more complete and aligned with the original task requirements."}, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "usage": {"prompt_tokens": 5073, "completion_tokens": 77, "total_tokens": 5150}}, {"id": "chatcmpl-8JzoYiGYidLunDOLxfT6pQFERZgoB", "object": "chat.completion", "created": 1699776538, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "function_call", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {'events': [], 'venues': [], 'guests': [], 'vendors': []}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = data.get('type', event.type)\\n\\t\\t\\tevent.date = data.get('date', event.date)\\n\\t\\t\\tevent.time = data.get('time', event.time)\\n\\t\\t\\tevent.theme = data.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = data.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify({'message': 'Event updated'}), 200\\n\\treturn jsonify({'message': 'Event not found'}), 404\\n\\n@app.route('/venue', methods=['POST'])\\ndef create_venue():\\n\\tdata = request.get_json()\\n\\tvenue = Venue(**data)\\n\\tDB['venues'].append(venue)\\n\\treturn jsonify({'message': 'Venue created'}), 201\\n\\n@app.route('/venue/<int:venue_id>', methods=['PUT'])\\ndef update_venue(venue_id):\\n\\tdata = request.get_json()\\n\\tfor venue in DB['venues']:\\n\\t\\tif venue.id == venue_id:\\n\\t\\t\\tvenue.location = data.get('location', venue.location)\\n\\t\\t\\tvenue.capacity = data.get('capacity', venue.capacity)\\n\\t\\t\\tvenue.type = data.get('type', venue.type)\\n\\t\\t\\treturn jsonify({'message': 'Venue updated'}), 200\\n\\treturn jsonify({'message': 'Venue not found'}), 404\\n\\n@app.route('/guest', methods=['POST'])\\ndef create_guest():\\n\\tdata = request.get_json()\\n\\tguest = Guest(**data)\\n\\tDB['guests'].append(guest)\\n\\treturn jsonify({'message': 'Guest created'}), 201\\n\\n@app.route('/guest/<int:guest_id>', methods=['PUT'])\\ndef update_guest(guest_id):\\n\\tdata = request.get_json()\\n\\tfor guest in DB['guests']:\\n\\t\\tif guest.id == guest_id:\\n\\t\\t\\tguest.name = data.get('name', guest.name)\\n\\t\\t\\tguest.email = data.get('email', guest.email)\\n\\t\\t\\treturn jsonify({'message': 'Guest updated'}), 200\\n\\treturn jsonify({'message': 'Guest not found'}), 404\\n\\n@app.route('/vendor', methods=['POST'])\\ndef create_vendor():\\n\\tdata = request.get_json()\\n\\tvendor = Vendor(**data)\\n\\tDB['vendors'].append(vendor)\\n\\treturn jsonify({'message': 'Vendor created'}), 201\\n\\n@app.route('/vendor/<int:vendor_id>', methods=['PUT'])\\ndef update_vendor(vendor_id):\\n\\tdata = request.get_json()\\n\\tfor vendor in DB['vendors']:\\n\\t\\tif vendor.id == vendor_id:\\n\\t\\t\\tvendor.name = data.get('name', vendor.name)\\n\\t\\t\\tvendor.type = data.get('type', vendor.type)\\n\\t\\t\\tvendor.reviews = data.get('reviews', vendor.reviews)\\n\\t\\t\\treturn jsonify({'message': 'Vendor updated'}), 200\\n\\treturn jsonify({'message': 'Vendor not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Event created'}\\n\\n\\ndef test_update_event(client):\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Event updated'}\\n\\n\\ndef test_update_event_not_found(client):\\n\\tresponse = client.put('/event/999', json={'type': 'Wedding'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Event not found'}\\n\\n\\ndef test_create_venue(client):\\n\\tresponse = client.post('/venue', json={'id': 1, 'location': 'New York', 'capacity': 100, 'type': 'Indoor'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Venue created'}\\n\\n\\ndef test_update_venue(client):\\n\\tresponse = client.put('/venue/1', json={'location': 'Los Angeles'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Venue updated'}\\n\\n\\ndef test_update_venue_not_found(client):\\n\\tresponse = client.put('/venue/999', json={'location': 'Los Angeles'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Venue not found'}\\n\\n\\ndef test_create_guest(client):\\n\\tresponse = client.post('/guest', json={'id': 1, 'name': 'John Doe', 'email': 'johndoe@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Guest created'}\\n\\n\\ndef test_update_guest(client):\\n\\tresponse = client.put('/guest/1', json={'name': 'Jane Doe'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Guest updated'}\\n\\n\\ndef test_update_guest_not_found(client):\\n\\tresponse = client.put('/guest/999', json={'name': 'Jane Doe'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Guest not found'}\\n\\n\\ndef test_create_vendor(client):\\n\\tresponse = client.post('/vendor', json={'id': 1, 'name': 'ABC Catering', 'type': 'Catering', 'reviews': ['Great service', 'Delicious food']})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Vendor created'}\\n\\n\\ndef test_update_vendor(client):\\n\\tresponse = client.put('/vendor/1', json={'name': 'XYZ Catering'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Vendor updated'}\\n\\n\\ndef test_update_vendor_not_found(client):\\n\\tresponse = client.put('/vendor/999', json={'name': 'XYZ Catering'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'Vendor not found'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 5224, "completion_tokens": 1838, "total_tokens": 7062}}]