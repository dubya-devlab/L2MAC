[{"id": "chatcmpl-8JzkZBZ37PFhXR8Sbz85XgEQwkE6X", "object": "chat.completion", "created": 1699776291, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tname: str\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tevent = Event(**request.json)\\n\\tDB['events'].append(event)\\n\\treturn jsonify(event), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tfor event in DB['events']:\\n\\t\\tif event.id == event_id:\\n\\t\\t\\tevent.type = request.json.get('type', event.type)\\n\\t\\t\\tevent.date = request.json.get('date', event.date)\\n\\t\\t\\tevent.time = request.json.get('time', event.time)\\n\\t\\t\\tevent.theme = request.json.get('theme', event.theme)\\n\\t\\t\\tevent.color_scheme = request.json.get('color_scheme', event.color_scheme)\\n\\t\\t\\treturn jsonify(event), 200\\n\\treturn jsonify({'error': 'Event not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_event(client):\\n\\tresponse = client.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'}\\n\\n\\ndef test_update_event(client):\\n\\tclient.post('/event', json={'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'})\\n\\tresponse = client.put('/event/1', json={'type': 'Wedding'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'id': 1, 'type': 'Wedding', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Space', 'color_scheme': 'Blue'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 764, "total_tokens": 2428}}, {"id": "chatcmpl-8Jzl1XXops4quGuGrfILaogese3FB", "object": "chat.completion", "created": 1699776319, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB[event.id] = event\\n\\treturn jsonify(data), 201\\n\\n@app.route('/event/<int:event_id>', methods=['PUT'])\\ndef update_event(event_id):\\n\\tdata = request.get_json()\\n\\tDB[event_id].__dict__.update(data)\\n\\treturn jsonify(DB[event_id].__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_event():\\n\\treturn Event(id=1, type='Birthday', date='2022-12-12', time='18:00', theme='Space', color_scheme='Blue')\\n\\n\\ndef test_create_event(client, sample_event):\\n\\tresponse = client.post('/event', json=sample_event.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert app.DB[1] == sample_event\\n\\n\\ndef test_update_event(client, sample_event):\\n\\tapp.DB[1] = sample_event\\n\\tresponse = client.put('/event/1', json={'theme': 'Pirate'})\\n\\tassert response.status_code == 200\\n\\tassert app.DB[1].theme == 'Pirate'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 456, "total_tokens": 2120}}, {"id": "chatcmpl-8JzlN4kgCK9mAqPg90WDVT0KgegIy", "object": "chat.completion", "created": 1699776341, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Event:\\n\\tid: int\\n\\ttype: str\\n\\tdate: str\\n\\ttime: str\\n\\ttheme: str\\n\\tcolor_scheme: str\\n\\n@dataclass\\nclass Venue:\\n\\tid: int\\n\\tlocation: str\\n\\tcapacity: int\\n\\ttype: str\\n\\n@dataclass\\nclass Guest:\\n\\tid: int\\n\\tname: str\\n\\temail: str\\n\\n@dataclass\\nclass Vendor:\\n\\tid: int\\n\\tname: str\\n\\ttype: str\\n\\treviews: List[str]\\n\\n@app.route('/event', methods=['POST'])\\ndef create_event():\\n\\tdata = request.get_json()\\n\\tevent = Event(**data)\\n\\tDB['events'].append(event)\\n\\treturn jsonify({'message': 'Event created'}), 201\\n\\n@app.route('/venue', methods=['POST'])\\ndef create_venue():\\n\\tdata = request.get_json()\\n\\tvenue = Venue(**data)\\n\\tDB['venues'].append(venue)\\n\\treturn jsonify({'message': 'Venue created'}), 201\\n\\n@app.route('/guest', methods=['POST'])\\ndef create_guest():\\n\\tdata = request.get_json()\\n\\tguest = Guest(**data)\\n\\tDB['guests'].append(guest)\\n\\treturn jsonify({'message': 'Guest added'}), 201\\n\\n@app.route('/vendor', methods=['POST'])\\ndef create_vendor():\\n\\tdata = request.get_json()\\n\\tvendor = Vendor(**data)\\n\\tDB['vendors'].append(vendor)\\n\\treturn jsonify({'message': 'Vendor added'}), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Event, Venue, Guest, Vendor\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('event', [\\n\\t{'id': 1, 'type': 'Birthday', 'date': '2022-12-12', 'time': '18:00', 'theme': 'Hawaiian', 'color_scheme': 'Blue and White'},\\n\\t{'id': 2, 'type': 'Wedding', 'date': '2023-01-01', 'time': '12:00', 'theme': 'Classic', 'color_scheme': 'White and Gold'}\\n])\\ndef test_create_event(client, event):\\n\\tresponse = client.post('/event', json=event)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Event created'}\\n\\n@pytest.mark.parametrize('venue', [\\n\\t{'id': 1, 'location': 'New York', 'capacity': 100, 'type': 'Outdoor'},\\n\\t{'id': 2, 'location': 'Los Angeles', 'capacity': 200, 'type': 'Indoor'}\\n])\\ndef test_create_venue(client, venue):\\n\\tresponse = client.post('/venue', json=venue)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Venue created'}\\n\\n@pytest.mark.parametrize('guest', [\\n\\t{'id': 1, 'name': 'John Doe', 'email': 'johndoe@example.com'},\\n\\t{'id': 2, 'name': 'Jane Doe', 'email': 'janedoe@example.com'}\\n])\\ndef test_create_guest(client, guest):\\n\\tresponse = client.post('/guest', json=guest)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Guest added'}\\n\\n@pytest.mark.parametrize('vendor', [\\n\\t{'id': 1, 'name': 'Catering Co.', 'type': 'Catering', 'reviews': ['Great service!', 'Delicious food!']},\\n\\t{'id': 2, 'name': 'Decor Co.', 'type': 'Decoration', 'reviews': ['Beautiful decor!', 'Professional staff!']}\\n])\\ndef test_create_vendor(client, vendor):\\n\\tresponse = client.post('/vendor', json=vendor)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Vendor added'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1664, "completion_tokens": 1036, "total_tokens": 2700}}]