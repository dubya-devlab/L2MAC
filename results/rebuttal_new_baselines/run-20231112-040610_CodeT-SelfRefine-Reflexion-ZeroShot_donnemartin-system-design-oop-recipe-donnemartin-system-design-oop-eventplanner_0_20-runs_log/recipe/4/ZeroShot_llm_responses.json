[{"id": "chatcmpl-8Jx8tRHnFAfzmksIihTIkDmYQn36U", "object": "chat.completion", "created": 1699766267, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\treviews: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\trecipes[recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\n@app.route('/recipe/<recipe_id>', methods=['PUT'])\\ndef update_recipe(recipe_id):\\n\\tdata = request.get_json()\\n\\trecipe = recipes.get(recipe_id)\\n\\tif not recipe:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\trecipe.name = data.get('name', recipe.name)\\n\\trecipe.ingredients = data.get('ingredients', recipe.ingredients)\\n\\trecipe.instructions = data.get('instructions', recipe.instructions)\\n\\trecipe.images = data.get('images', recipe.images)\\n\\trecipe.categories = data.get('categories', recipe.categories)\\n\\treturn jsonify(recipe), 200\\n\\n@app.route('/recipe/<recipe_id>', methods=['DELETE'])\\ndef delete_recipe(recipe_id):\\n\\trecipe = recipes.get(recipe_id)\\n\\tif not recipe:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\tdel recipes[recipe_id]\\n\\treturn {'message': 'Recipe deleted'}, 200\\n\\n@app.route('/recipe/search', methods=['GET'])\\ndef search_recipe():\\n\\tquery = request.args.get('query')\\n\\tresults = [recipe for recipe in recipes.values() if query in recipe.name or query in recipe.ingredients or query in recipe.categories]\\n\\treturn jsonify(results), 200\\n\\n@app.route('/user/<user_id>/favorites', methods=['POST'])\\ndef add_favorite(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\trecipe_id = data.get('recipe_id')\\n\\trecipe = recipes.get(recipe_id)\\n\\tif not recipe:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\tuser.favorites.append(recipe)\\n\\treturn jsonify(user), 200\\n\\n@app.route('/user/<user_id>/recipes', methods=['GET'])\\ndef get_user_recipes(user_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\treturn jsonify(user.recipes), 200\\n\\n@app.route('/user/<user_id>/favorites', methods=['GET'])\\ndef get_user_favorites(user_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\treturn jsonify(user.favorites), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Recipe\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []}\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []}\\n\\ndef test_update_recipe(client):\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []})\\n\\tresponse = client.put('/recipe/1', json={'name': 'Updated Recipe'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['name'] == 'Updated Recipe'\\n\\ndef test_delete_recipe(client):\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []})\\n\\tresponse = client.delete('/recipe/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe deleted'}\\n\\ndef test_search_recipe(client):\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []})\\n\\tresponse = client.get('/recipe/search?query=Test')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\\n\\ndef test_add_favorite(client):\\n\\tclient.post('/user', json={'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []})\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []})\\n\\tresponse = client.post('/user/1/favorites', json={'recipe_id': '1'})\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()['favorites']) == 1\\n\\ndef test_get_user_recipes(client):\\n\\tclient.post('/user', json={'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []})\\n\\tresponse = client.get('/user/1/recipes')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 0\\n\\ndef test_get_user_favorites(client):\\n\\tclient.post('/user', json={'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []})\\n\\tclient.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['Test Ingredient'], 'instructions': ['Test Instruction'], 'images': ['Test Image'], 'categories': ['Test Category'], 'reviews': []})\\n\\tclient.post('/user/1/favorites', json={'recipe_id': '1'})\\n\\tresponse = client.get('/user/1/favorites')\\n\\tassert response.status_code == 200\\n\\tassert len(response.get_json()) == 1\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 1716, "total_tokens": 3225}}]