[{"id": "chatcmpl-8K1TJ2ZfQPe8gJJJwhP1seMkv8htN", "object": "chat.completion", "created": 1699782909, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\trecipes[recipe.name] = recipe\\n\\treturn jsonify(recipe), 201\\n\\n@app.route('/recipe', methods=['GET'])\\ndef get_recipes():\\n\\treturn jsonify(recipes), 200\\n\\n@app.route('/recipe/<name>', methods=['GET'])\\ndef get_recipe(name):\\n\\trecipe = recipes.get(name)\\n\\tif not recipe:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\treturn jsonify(recipe), 200\\n\\n@app.route('/recipe/<name>', methods=['DELETE'])\\ndef delete_recipe(name):\\n\\trecipe = recipes.pop(name, None)\\n\\tif not recipe:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\treturn {'message': 'Recipe deleted'}, 200\\n\\n@app.route('/recipe/<name>', methods=['PUT'])\\ndef update_recipe(name):\\n\\tdata = request.get_json()\\n\\trecipe = recipes.get(name)\\n\\tif not recipe:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\trecipe.ingredients = data.get('ingredients', recipe.ingredients)\\n\\trecipe.instructions = data.get('instructions', recipe.instructions)\\n\\trecipe.images = data.get('images', recipe.images)\\n\\trecipe.categories = data.get('categories', recipe.categories)\\n\\treturn jsonify(recipe), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Recipe\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'name': 'John', 'email': 'john@example.com', 'recipes': [], 'favorites': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'John', 'email': 'john@example.com', 'recipes': [], 'favorites': []}\\n\\n\\tresponse = client.post('/user', json={'name': 'John', 'email': 'john@example.com', 'recipes': [], 'favorites': []})\\n\\tassert response.status_code == 400\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={'name': 'Pasta', 'ingredients': ['Pasta', 'Tomato Sauce'], 'instructions': ['Boil pasta', 'Add sauce'], 'images': [], 'categories': ['Italian', 'Dinner']})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'name': 'Pasta', 'ingredients': ['Pasta', 'Tomato Sauce'], 'instructions': ['Boil pasta', 'Add sauce'], 'images': [], 'categories': ['Italian', 'Dinner']}\\n\\n\\tresponse = client.post('/recipe', json={'name': 'Pasta', 'ingredients': ['Pasta', 'Tomato Sauce'], 'instructions': ['Boil pasta', 'Add sauce'], 'images': [], 'categories': ['Italian', 'Dinner']})\\n\\tassert response.status_code == 400\\n\\ndef test_get_recipes(client):\\n\\tresponse = client.get('/recipe')\\n\\tassert response.status_code == 200\\n\\ndef test_get_recipe(client):\\n\\tresponse = client.get('/recipe/Pasta')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Pasta', 'ingredients': ['Pasta', 'Tomato Sauce'], 'instructions': ['Boil pasta', 'Add sauce'], 'images': [], 'categories': ['Italian', 'Dinner']}\\n\\n\\tresponse = client.get('/recipe/Nonexistent')\\n\\tassert response.status_code == 404\\n\\ndef test_delete_recipe(client):\\n\\tresponse = client.delete('/recipe/Pasta')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe deleted'}\\n\\n\\tresponse = client.delete('/recipe/Nonexistent')\\n\\tassert response.status_code == 404\\n\\ndef test_update_recipe(client):\\n\\tresponse = client.put('/recipe/Pasta', json={'ingredients': ['Pasta', 'Tomato Sauce', 'Cheese']})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'name': 'Pasta', 'ingredients': ['Pasta', 'Tomato Sauce', 'Cheese'], 'instructions': ['Boil pasta', 'Add sauce'], 'images': [], 'categories': ['Italian', 'Dinner']}\\n\\n\\tresponse = client.put('/recipe/Nonexistent', json={'ingredients': ['Pasta', 'Tomato Sauce', 'Cheese']})\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 1248, "total_tokens": 2757}}, {"id": "chatcmpl-8K1UBiwpLupK6alLLIdmC7zrYBJH8", "object": "chat.completion", "created": 1699782963, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\treviews: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(id=data['id'], name=data['name'], recipes=[], favorites=[])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(id=data['id'], name=data['name'], ingredients=data['ingredients'], instructions=data['instructions'], images=data['images'], categories=data['categories'], reviews=[])\\n\\trecipes[recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'id': '1', 'name': 'Test User'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []}\\n\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': ['ingredient1', 'ingredient2'], 'instructions': ['instruction1', 'instruction2'], 'images': ['image1', 'image2'], 'categories': ['category1', 'category2']})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test Recipe', 'ingredients': ['ingredient1', 'ingredient2'], 'instructions': ['instruction1', 'instruction2'], 'images': ['image1', 'image2'], 'categories': ['category1', 'category2'], 'reviews': []}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 592, "total_tokens": 2101}}, {"id": "chatcmpl-8K1UmzpWImWbiDgETQa1edTQxvrFj", "object": "chat.completion", "created": 1699783000, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {\\n\\t'users': {},\\n\\t'recipes': {},\\n\\t'reviews': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\n@dataclass\\nclass Review:\\n\\tid: str\\n\\tuser_id: str\\n\\trecipe_id: str\\n\\trating: int\\n\\tcomment: str\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDB['users'][user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\tDB['recipes'][recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\n@app.route('/review', methods=['POST'])\\ndef create_review():\\n\\tdata = request.get_json()\\n\\treview = Review(**data)\\n\\tDB['reviews'][review.id] = review\\n\\treturn jsonify(review), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test User',\\n\\t\\t'recipes': [],\\n\\t\\t'favorites': []\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test User',\\n\\t\\t'recipes': [],\\n\\t\\t'favorites': []\\n\\t}\\n\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test Recipe',\\n\\t\\t'ingredients': ['ingredient1', 'ingredient2'],\\n\\t\\t'instructions': ['instruction1', 'instruction2'],\\n\\t\\t'images': ['image1', 'image2'],\\n\\t\\t'categories': ['category1', 'category2']\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test Recipe',\\n\\t\\t'ingredients': ['ingredient1', 'ingredient2'],\\n\\t\\t'instructions': ['instruction1', 'instruction2'],\\n\\t\\t'images': ['image1', 'image2'],\\n\\t\\t'categories': ['category1', 'category2']\\n\\t}\\n\\n\\ndef test_create_review(client):\\n\\tresponse = client.post('/review', json={\\n\\t\\t'id': '1',\\n\\t\\t'user_id': '1',\\n\\t\\t'recipe_id': '1',\\n\\t\\t'rating': 5,\\n\\t\\t'comment': 'Great recipe!'\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': '1',\\n\\t\\t'user_id': '1',\\n\\t\\t'recipe_id': '1',\\n\\t\\t'rating': 5,\\n\\t\\t'comment': 'Great recipe!'\\n\\t}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 901, "total_tokens": 2410}}]