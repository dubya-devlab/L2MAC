[{"id": "chatcmpl-8JxjoWCv0i0GlX6Deia9q2fS0P6K5", "object": "chat.completion", "created": 1699768556, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\trecipes[recipe.name] = recipe\\n\\treturn jsonify(recipe), 201\\n\\n@app.route('/recipe', methods=['GET'])\\ndef get_recipes():\\n\\treturn jsonify(recipes), 200\\n\\n@app.route('/recipe/<name>', methods=['GET'])\\ndef get_recipe(name):\\n\\trecipe = recipes.get(name)\\n\\tif recipe:\\n\\t\\treturn jsonify(recipe), 200\\n\\telse:\\n\\t\\treturn {'message': 'Recipe not found'}, 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Recipe\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef new_user():\\n\\tuser = User('Test User', 'test@example.com', [], [])\\n\\treturn user\\n\\n@pytest.fixture\\ndef new_recipe():\\n\\trecipe = Recipe('Test Recipe', ['ingredient1', 'ingredient2'], ['instruction1', 'instruction2'], ['image1', 'image2'], ['category1', 'category2'])\\n\\treturn recipe\\n\\n\\ndef test_create_user(client, new_user):\\n\\tresponse = client.post('/user', json=new_user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['name'] == new_user.name\\n\\n\\ndef test_create_recipe(client, new_recipe):\\n\\tresponse = client.post('/recipe', json=new_recipe.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['name'] == new_recipe.name\\n\\n\\ndef test_get_recipes(client, new_recipe):\\n\\tclient.post('/recipe', json=new_recipe.__dict__)\\n\\tresponse = client.get('/recipe')\\n\\tassert response.status_code == 200\\n\\tassert new_recipe.name in response.get_json()\\n\\n\\ndef test_get_recipe(client, new_recipe):\\n\\tclient.post('/recipe', json=new_recipe.__dict__)\\n\\tresponse = client.get(f'/recipe/{new_recipe.name}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['name'] == new_recipe.name\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 713, "total_tokens": 2222}}]