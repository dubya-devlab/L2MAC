[{"id": "chatcmpl-8JxtRQO7aK2JeCIvih1LpUZYlWF2u", "object": "chat.completion", "created": 1699769153, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\trecipes: List[int] = []\\n\\tfavorites: List[int] = []\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\tname: str\\n\\tingredients: List[str]\\n\\tinstructions: List[str]\\n\\timages: List[str]\\n\\tcategories: List[str]\\n\\treviews: List[str] = []\\n\\tratings: List[int] = []\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, password)\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/submit_recipe', methods=['POST'])\\ndef submit_recipe():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe = Recipe(**data['recipe'])\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 400\\n\\tusers[username].recipes.append(recipe.id)\\n\\trecipes[recipe.id] = recipe\\n\\treturn jsonify({'message': 'Recipe submitted successfully'}), 200\\n\\n@app.route('/edit_recipe', methods=['POST'])\\ndef edit_recipe():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe_id = data['recipe_id']\\n\\tnew_recipe = Recipe(**data['new_recipe'])\\n\\tif username not in users or recipe_id not in users[username].recipes:\\n\\t\\treturn jsonify({'message': 'User or recipe not found'}), 400\\n\\trecipes[recipe_id] = new_recipe\\n\\treturn jsonify({'message': 'Recipe edited successfully'}), 200\\n\\n@app.route('/delete_recipe', methods=['POST'])\\ndef delete_recipe():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe_id = data['recipe_id']\\n\\tif username not in users or recipe_id not in users[username].recipes:\\n\\t\\treturn jsonify({'message': 'User or recipe not found'}), 400\\n\\tusers[username].recipes.remove(recipe_id)\\n\\tdel recipes[recipe_id]\\n\\treturn jsonify({'message': 'Recipe deleted successfully'}), 200\\n\\n@app.route('/search', methods=['POST'])\\ndef search():\\n\\tdata = request.get_json()\\n\\tquery = data['query']\\n\\tresults = [recipe for recipe in recipes.values() if query in recipe.name or query in recipe.ingredients or query in recipe.categories]\\n\\treturn jsonify({'results': [recipe.__dict__ for recipe in results]}), 200\\n\\n@app.route('/rate', methods=['POST'])\\ndef rate():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe_id = data['recipe_id']\\n\\trating = data['rating']\\n\\tif username not in users or recipe_id not in recipes:\\n\\t\\treturn jsonify({'message': 'User or recipe not found'}), 400\\n\\trecipes[recipe_id].ratings.append(rating)\\n\\treturn jsonify({'message': 'Rating submitted successfully'}), 200\\n\\n@app.route('/review', methods=['POST'])\\ndef review():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe_id = data['recipe_id']\\n\\treview = data['review']\\n\\tif username not in users or recipe_id not in recipes:\\n\\t\\treturn jsonify({'message': 'User or recipe not found'}), 400\\n\\trecipes[recipe_id].reviews.append(review)\\n\\treturn jsonify({'message': 'Review submitted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, Recipe\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert app.users['test'] == User('test', 'test')\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\ndef test_submit_recipe(client):\\n\\trecipe = Recipe(1, 'test', ['ingredient'], ['instruction'], ['image'], ['category'])\\n\\tresponse = client.post('/submit_recipe', json={'username': 'test', 'recipe': recipe.__dict__})\\n\\tassert response.status_code == 200\\n\\tassert app.recipes[1] == recipe\\n\\ndef test_edit_recipe(client):\\n\\tnew_recipe = Recipe(1, 'new', ['ingredient'], ['instruction'], ['image'], ['category'])\\n\\tresponse = client.post('/edit_recipe', json={'username': 'test', 'recipe_id': 1, 'new_recipe': new_recipe.__dict__})\\n\\tassert response.status_code == 200\\n\\tassert app.recipes[1] == new_recipe\\n\\ndef test_delete_recipe(client):\\n\\tresponse = client.post('/delete_recipe', json={'username': 'test', 'recipe_id': 1})\\n\\tassert response.status_code == 200\\n\\tassert 1 not in app.recipes\\n\\ndef test_search(client):\\n\\tresponse = client.post('/search', json={'query': 'test'})\\n\\tassert response.status_code == 200\\n\\ndef test_rate(client):\\n\\tresponse = client.post('/rate', json={'username': 'test', 'recipe_id': 1, 'rating': 5})\\n\\tassert response.status_code == 200\\n\\tassert 5 in app.recipes[1].ratings\\n\\ndef test_review(client):\\n\\tresponse = client.post('/review', json={'username': 'test', 'recipe_id': 1, 'review': 'Great'})\\n\\tassert response.status_code == 200\\n\\tassert 'Great' in app.recipes[1].reviews\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 1567, "total_tokens": 3076}}, {"id": "chatcmpl-8JxvATbZ928LTYsA0cu6Z4fPcrtuQ", "object": "chat.completion", "created": 1699769260, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\treviews: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\trecipes[recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test User', 'recipes': [], 'favorites': []}\\n\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'id': '1', 'name': 'Test Recipe', 'ingredients': [], 'instructions': [], 'images': [], 'categories': [], 'reviews': []}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 507, "total_tokens": 2016}}, {"id": "chatcmpl-8JxvVwc5PkDuYRd4nGww8wixZz07O", "object": "chat.completion", "created": 1699769281, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\tsubmitted_recipes: List[int] = []\\n\\tfavorite_recipes: List[int] = []\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\tname: str\\n\\tingredients: List[str]\\n\\tinstructions: str\\n\\timage: str\\n\\tcuisine_type: str\\n\\tdietary_restrictions: List[str]\\n\\treviews: List[str] = []\\n\\tratings: List[int] = []\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists.'}), 400\\n\\tusers[username] = User(username, password)\\n\\treturn jsonify({'message': 'User registered successfully.'}), 200\\n\\n@app.route('/submit_recipe', methods=['POST'])\\ndef submit_recipe():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe = Recipe(**data['recipe'])\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found.'}), 404\\n\\tusers[username].submitted_recipes.append(recipe.id)\\n\\trecipes[recipe.id] = recipe\\n\\treturn jsonify({'message': 'Recipe submitted successfully.'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully.'}\\n\\n\\ndef test_submit_recipe(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\trecipe = {\\n\\t\\t'id': 1,\\n\\t\\t'name': 'Test Recipe',\\n\\t\\t'ingredients': ['ingredient1', 'ingredient2'],\\n\\t\\t'instructions': 'Test instructions',\\n\\t\\t'image': 'test.jpg',\\n\\t\\t'cuisine_type': 'Test Cuisine',\\n\\t\\t'dietary_restrictions': ['restriction1', 'restriction2']\\n\\t}\\n\\tresponse = client.post('/submit_recipe', json={'username': 'test', 'recipe': recipe})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe submitted successfully.'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 702, "total_tokens": 2211}}]