[{"id": "chatcmpl-8JzGDj7KK8sv13mISOQCzzvuoqE9E", "object": "chat.completion", "created": 1699774409, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nrecipes = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\treviews: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[username] = User(username, password, [], [])\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/submit_recipe', methods=['POST'])\\ndef submit_recipe():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\trecipe = data['recipe']\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User does not exist'}), 400\\n\\trecipe_id = len(recipes) + 1\\n\\trecipes[recipe_id] = Recipe(recipe_id, recipe['name'], recipe['ingredients'], recipe['instructions'], recipe['images'], recipe['categories'], [])\\n\\tusers[username].recipes.append(recipe_id)\\n\\treturn jsonify({'message': 'Recipe submitted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_submit_recipe(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/submit_recipe', json={'username': 'test', 'recipe': {'name': 'Test Recipe', 'ingredients': ['ingredient1', 'ingredient2'], 'instructions': ['instruction1', 'instruction2'], 'images': ['image1', 'image2'], 'categories': ['category1', 'category2']}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe submitted successfully'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 646, "total_tokens": 2155}}, {"id": "chatcmpl-8JzGxLW3IgQbjQUu32dOCCJEsad9n", "object": "chat.completion", "created": 1699774455, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {\\n\\t'users': {},\\n\\t'recipes': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tname: str\\n\\trecipes: list\\n\\tfavorites: list\\n\\n@dataclass\\nclass Recipe:\\n\\tid: str\\n\\tname: str\\n\\tingredients: list\\n\\tinstructions: list\\n\\timages: list\\n\\tcategories: list\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDB['users'][user.id] = user\\n\\treturn jsonify(user), 201\\n\\n@app.route('/recipe', methods=['POST'])\\ndef create_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\tDB['recipes'][recipe.id] = recipe\\n\\treturn jsonify(recipe), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', json={\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test User',\\n\\t\\t'recipes': [],\\n\\t\\t'favorites': []\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test User',\\n\\t\\t'recipes': [],\\n\\t\\t'favorites': []\\n\\t}\\n\\n\\ndef test_create_recipe(client):\\n\\tresponse = client.post('/recipe', json={\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test Recipe',\\n\\t\\t'ingredients': ['ingredient1', 'ingredient2'],\\n\\t\\t'instructions': ['instruction1', 'instruction2'],\\n\\t\\t'images': ['image1', 'image2'],\\n\\t\\t'categories': ['category1', 'category2']\\n\\t})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {\\n\\t\\t'id': '1',\\n\\t\\t'name': 'Test Recipe',\\n\\t\\t'ingredients': ['ingredient1', 'ingredient2'],\\n\\t\\t'instructions': ['instruction1', 'instruction2'],\\n\\t\\t'images': ['image1', 'image2'],\\n\\t\\t'categories': ['category1', 'category2']\\n\\t}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 656, "total_tokens": 2165}}, {"id": "chatcmpl-8JzHg6IgrXEnFvOvqKienhD9HlCFb", "object": "chat.completion", "created": 1699774500, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import List\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\tname: str\\n\\tingredients: List[str]\\n\\tinstructions: List[str]\\n\\timages: List[str]\\n\\tcategories: List[str]\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tname: str\\n\\trecipes: List[Recipe]\\n\\tfavorites: List[Recipe]\\n\\n@app.route('/recipe', methods=['POST'])\\ndef add_recipe():\\n\\tdata = request.get_json()\\n\\trecipe = Recipe(**data)\\n\\tDB['recipes'].append(recipe)\\n\\treturn jsonify({'message': 'Recipe added successfully'}), 201\\n\\n@app.route('/recipe/<int:recipe_id>', methods=['PUT'])\\ndef update_recipe(recipe_id):\\n\\tdata = request.get_json()\\n\\tfor recipe in DB['recipes']:\\n\\t\\tif recipe.id == recipe_id:\\n\\t\\t\\trecipe.name = data.get('name', recipe.name)\\n\\t\\t\\trecipe.ingredients = data.get('ingredients', recipe.ingredients)\\n\\t\\t\\trecipe.instructions = data.get('instructions', recipe.instructions)\\n\\t\\t\\trecipe.images = data.get('images', recipe.images)\\n\\t\\t\\trecipe.categories = data.get('categories', recipe.categories)\\n\\t\\t\\treturn jsonify({'message': 'Recipe updated successfully'}), 200\\n\\treturn jsonify({'message': 'Recipe not found'}), 404\\n\\n@app.route('/recipe/<int:recipe_id>', methods=['DELETE'])\\ndef delete_recipe(recipe_id):\\n\\tfor recipe in DB['recipes']:\\n\\t\\tif recipe.id == recipe_id:\\n\\t\\t\\tDB['recipes'].remove(recipe)\\n\\t\\t\\treturn jsonify({'message': 'Recipe deleted successfully'}), 200\\n\\treturn jsonify({'message': 'Recipe not found'}), 404\\n\\n@app.route('/recipe/<int:recipe_id>', methods=['GET'])\\ndef get_recipe(recipe_id):\\n\\tfor recipe in DB['recipes']:\\n\\t\\tif recipe.id == recipe_id:\\n\\t\\t\\treturn jsonify(recipe), 200\\n\\treturn jsonify({'message': 'Recipe not found'}), 404\\n\\n@app.route('/user', methods=['POST'])\\ndef add_user():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tDB['users'].append(user)\\n\\treturn jsonify({'message': 'User added successfully'}), 201\\n\\n@app.route('/user/<int:user_id>', methods=['PUT'])\\ndef update_user(user_id):\\n\\tdata = request.get_json()\\n\\tfor user in DB['users']:\\n\\t\\tif user.id == user_id:\\n\\t\\t\\tuser.name = data.get('name', user.name)\\n\\t\\t\\tuser.recipes = data.get('recipes', user.recipes)\\n\\t\\t\\tuser.favorites = data.get('favorites', user.favorites)\\n\\t\\t\\treturn jsonify({'message': 'User updated successfully'}), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/user/<int:user_id>', methods=['DELETE'])\\ndef delete_user(user_id):\\n\\tfor user in DB['users']:\\n\\t\\tif user.id == user_id:\\n\\t\\t\\tDB['users'].remove(user)\\n\\t\\t\\treturn jsonify({'message': 'User deleted successfully'}), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/user/<int:user_id>', methods=['GET'])\\ndef get_user(user_id):\\n\\tfor user in DB['users']:\\n\\t\\tif user.id == user_id:\\n\\t\\t\\treturn jsonify(user), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import Recipe, User\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_add_recipe(client):\\n\\trecipe = Recipe(id=1, name='Test Recipe', ingredients=['ingredient1', 'ingredient2'], instructions=['step1', 'step2'], images=['image1', 'image2'], categories=['category1', 'category2'])\\n\\tresponse = client.post('/recipe', json=recipe.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Recipe added successfully'}\\n\\ndef test_update_recipe(client):\\n\\trecipe = Recipe(id=1, name='Updated Recipe', ingredients=['ingredient1', 'ingredient2'], instructions=['step1', 'step2'], images=['image1', 'image2'], categories=['category1', 'category2'])\\n\\tresponse = client.put('/recipe/1', json=recipe.__dict__)\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe updated successfully'}\\n\\ndef test_delete_recipe(client):\\n\\tresponse = client.delete('/recipe/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Recipe deleted successfully'}\\n\\ndef test_get_recipe(client):\\n\\tresponse = client.get('/recipe/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == Recipe(id=1, name='Updated Recipe', ingredients=['ingredient1', 'ingredient2'], instructions=['step1', 'step2'], images=['image1', 'image2'], categories=['category1', 'category2']).__dict__\\n\\ndef test_add_user(client):\\n\\tuser = User(id=1, name='Test User', recipes=[], favorites=[])\\n\\tresponse = client.post('/user', json=user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User added successfully'}\\n\\ndef test_update_user(client):\\n\\tuser = User(id=1, name='Updated User', recipes=[], favorites=[])\\n\\tresponse = client.put('/user/1', json=user.__dict__)\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User updated successfully'}\\n\\ndef test_delete_user(client):\\n\\tresponse = client.delete('/user/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User deleted successfully'}\\n\\ndef test_get_user(client):\\n\\tresponse = client.get('/user/1')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == User(id=1, name='Updated User', recipes=[], favorites=[]).__dict__\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1509, "completion_tokens": 1525, "total_tokens": 3034}}]