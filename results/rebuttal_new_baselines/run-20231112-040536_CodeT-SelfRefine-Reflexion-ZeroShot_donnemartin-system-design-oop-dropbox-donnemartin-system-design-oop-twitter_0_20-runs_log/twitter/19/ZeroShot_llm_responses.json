[{"id": "chatcmpl-8K4tL1mYsX2RWsFVRUWAN5E7LJJwP", "object": "chat.completion", "created": 1699796055, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!\\n\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport routes\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import get_jwt_identity\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '<User %r>' % self.username\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '<Post %r>' % self.content\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request, jsonify\\nfrom app import app, db\\nfrom models import User, Post\\nfrom flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity\\n\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tusername = request.json.get('username', None)\\n\\temail = request.json.get('email', None)\\n\\tpassword = request.json.get('password', None)\\n\\n\\tif not username:\\n\\t\\treturn jsonify({'msg': 'Missing username parameter'}), 400\\n\\tif not email:\\n\\t\\treturn jsonify({'msg': 'Missing email parameter'}), 400\\n\\tif not password:\\n\\t\\treturn jsonify({'msg': 'Missing password parameter'}), 400\\n\\n\\tuser = User(username=username, email=email, password=password)\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\n\\treturn jsonify({'msg': 'User created'}), 201\\n\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tusername = request.json.get('username', None)\\n\\tpassword = request.json.get('password', None)\\n\\n\\tuser = User.query.filter_by(username=username, password=password).first()\\n\\n\\tif user is None:\\n\\t\\treturn jsonify({'msg': 'Bad username or password'}), 401\\n\\n\\taccess_token = create_access_token(identity=username)\\n\\treturn jsonify(access_token=access_token), 200\\n\\n\\n@app.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef post():\\n\\tcontent = request.json.get('content', None)\\n\\n\\tif not content:\\n\\t\\treturn jsonify({'msg': 'Missing content parameter'}), 400\\n\\n\\tusername = get_jwt_identity()\\n\\tuser = User.query.filter_by(username=username).first()\\n\\n\\tpost = Post(content=content, user_id=user.id)\\n\\tdb.session.add(post)\\n\\tdb.session.commit()\\n\\n\\treturn jsonify({'msg': 'Post created'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\twith app.app_context():\\n\\t\\tdb.drop_all()\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\n\\ndef test_post(client):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\taccess_token = response.get_json()['access_token']\\n\\n\\tresponse = client.post('/post', json={'content': 'Hello, World!'}, headers={'Authorization': 'Bearer ' + access_token})\\n\\tassert response.status_code == 201\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1186, "total_tokens": 2693}}]