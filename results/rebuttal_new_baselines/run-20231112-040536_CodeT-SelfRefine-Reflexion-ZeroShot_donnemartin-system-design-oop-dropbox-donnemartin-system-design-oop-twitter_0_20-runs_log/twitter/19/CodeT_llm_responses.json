[{"id": "chatcmpl-8K4kGj8rgTop5dFe7x7UWVEOJvyHs", "object": "chat.completion", "created": 1699795492, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, email, password, {})\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'username': username}, 'secret', algorithm='HS256')\\n\\treturn jsonify({'token': token}), 200\\n\\n@app.route('/profile', methods=['GET', 'POST'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif 'token' not in data or jwt.decode(data['token'], 'secret', algorithms=['HS256'])['username'] != username:\\n\\t\\treturn jsonify({'message': 'Invalid token'}), 400\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(users[username].profile), 200\\n\\telif request.method == 'POST':\\n\\t\\tusers[username].profile = data['profile']\\n\\t\\treturn jsonify({'message': 'Profile updated successfully'}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tcontent = data['content']\\n\\tif 'token' not in data or jwt.decode(data['token'], 'secret', algorithms=['HS256'])['username'] != username:\\n\\t\\treturn jsonify({'message': 'Invalid token'}), 400\\n\\tposts[len(posts)] = Post(username, content, 0, 0, [])\\n\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\n@app.route('/like', methods=['POST'])\\ndef like():\\n\\tdata = request.get_json()\\n\\tpost_id = data['post_id']\\n\\tif post_id not in posts:\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\tposts[post_id].likes += 1\\n\\treturn jsonify({'message': 'Post liked successfully'}), 200\\n\\n@app.route('/retweet', methods=['POST'])\\ndef retweet():\\n\\tdata = request.get_json()\\n\\tpost_id = data['post_id']\\n\\tif post_id not in posts:\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\tposts[post_id].retweets += 1\\n\\treturn jsonify({'message': 'Post retweeted successfully'}), 200\\n\\n@app.route('/reply', methods=['POST'])\\ndef reply():\\n\\tdata = request.get_json()\\n\\tpost_id = data['post_id']\\n\\treply = data['reply']\\n\\tif post_id not in posts:\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\tposts[post_id].replies.append(reply)\\n\\treturn jsonify({'message': 'Reply posted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef token():\\n\\treturn jwt.encode({'username': 'test'}, 'secret', algorithm='HS256')\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\ndef test_profile(client, token):\\n\\tresponse = client.post('/profile', json={'username': 'test', 'token': token, 'profile': {'bio': 'test bio'}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Profile updated successfully'}\\n\\tresponse = client.get('/profile', json={'username': 'test', 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'bio': 'test bio'}\\n\\ndef test_post(client, token):\\n\\tresponse = client.post('/post', json={'username': 'test', 'token': token, 'content': 'test post'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\\n\\ndef test_like(client, token):\\n\\tresponse = client.post('/like', json={'post_id': 0})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post liked successfully'}\\n\\ndef test_retweet(client, token):\\n\\tresponse = client.post('/retweet', json={'post_id': 0})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post retweeted successfully'}\\n\\ndef test_reply(client, token):\\n\\tresponse = client.post('/reply', json={'post_id': 0, 'reply': 'test reply'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Reply posted successfully'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1476, "total_tokens": 2983}}, {"id": "chatcmpl-8K4lC6fzdl02qkAB65n0S2o2cGsIX", "object": "chat.completion", "created": 1699795550, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\n\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport routes\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import create_access_token\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\t\\n\\tdef __init__(self, username, email, password):\\n\\t\\tself.username = username\\n\\t\\tself.email = email\\n\\t\\tself.password = generate_password_hash(password)\\n\\t\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password, password)\\n\\t\\n\\tdef get_token(self):\\n\\t\\treturn create_access_token(identity=self.id)\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\t\\n\\tdef __init__(self, content, user_id):\\n\\t\\tself.content = content\\n\\t\\tself.user_id = user_id\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request, jsonify\\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and user.check_password(data['password']):\\n\\t\\treturn jsonify({'access_token': user.get_token()}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n\\n@app.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tuser_id = get_jwt_identity()\\n\\tnew_post = Post(content=data['content'], user_id=user_id)\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created successfully'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\n@pytest.fixture\\n\\ndef init_database():\\n\\tdb.create_all()\\n\\tyield\\n\\tdb.drop_all()\\n\\n\\ndef test_register(client, init_database):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User registered successfully'\\n\\n\\ndef test_login(client, init_database):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_create_post(client, init_database):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\taccess_token = response.get_json()['access_token']\\n\\tresponse = client.post('/post', json={'content': 'Hello, World!'}, headers={'Authorization': f'Bearer {access_token}'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'Post created successfully'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1172, "total_tokens": 2679}}, {"id": "chatcmpl-8K4m5tKojAQQmfG7kbrFNNYwOMEm1", "object": "chat.completion", "created": 1699795605, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['username'] in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[data['username']] = data\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['username'] not in users or users[data['username']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': data['username'], 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.register()\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\tresponse = app.register()\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Username already exists'}\\n\\n\\tapp.users = {}\\n\\n\\ndef test_login():\\n\\tapp.users = {'test': {'username': 'test', 'password': 'test'}}\\n\\tresponse = app.login()\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\tresponse = app.login()\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\n\\tapp.users = {}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 497, "total_tokens": 2004}}]