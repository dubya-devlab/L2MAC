[{"id": "chatcmpl-8K3iZlU3GQUVuDIORlje1rOPehH1y", "object": "chat.completion", "created": 1699791543, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['username'] in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[data['username']] = data\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['username'] not in users or users[data['username']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': data['username'], 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/profile', methods=['PUT'])\\ndef update_profile():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tusers[username].update(data)\\n\\treturn jsonify({'message': 'Profile updated successfully'}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tposts[len(posts)] = data\\n\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\n@app.route('/post/<int:post_id>', methods=['DELETE'])\\ndef delete_post(post_id):\\n\\tif post_id not in posts:\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\tdel posts[post_id]\\n\\treturn jsonify({'message': 'Post deleted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef token():\\n\\ttoken = jwt.encode({'user': 'test', 'exp': 9999999999}, app.app.config['SECRET_KEY'])\\n\\treturn token.decode('UTF-8')\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test', 'email': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\ndef test_update_profile(client, token):\\n\\tresponse = client.put('/profile', json={'username': 'test', 'bio': 'test bio', 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Profile updated successfully'}\\n\\n\\ndef test_create_post(client, token):\\n\\tresponse = client.post('/post', json={'username': 'test', 'content': 'test post', 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\\n\\n\\ndef test_delete_post(client, token):\\n\\tresponse = client.delete('/post/0', json={'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post deleted successfully'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 936, "total_tokens": 2443}}]