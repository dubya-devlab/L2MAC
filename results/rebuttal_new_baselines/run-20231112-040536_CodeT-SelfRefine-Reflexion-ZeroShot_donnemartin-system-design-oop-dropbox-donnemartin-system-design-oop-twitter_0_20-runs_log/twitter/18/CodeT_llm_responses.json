[{"id": "chatcmpl-8K4EApv6Qu0BVgwj5kLP5dLJmNp6M", "object": "chat.completion", "created": 1699793502, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\nSECRET_KEY = 'secret'\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(data['username'], data['email'], data['password'], {})\\n\\tusers[data['username']] = new_user\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\ttoken = jwt.encode({'user': user.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, SECRET_KEY)\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\ttoken = data.get('token')\\n\\tif not token:\\n\\t\\treturn jsonify({'message': 'Token is missing'}), 401\\n\\ttry:\\n\\t\\tdata = jwt.decode(token, SECRET_KEY)\\n\\t\\tuser = users.get(data['user'])\\n\\texcept:\\n\\t\\treturn jsonify({'message': 'Token is invalid'}), 401\\n\\tnew_post = Post(user.username, data['content'], 0, 0, [])\\n\\tposts[len(posts)] = new_post\\n\\treturn jsonify({'message': 'Posted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.register()\\n\\tassert response[1] == 200\\n\\n\\tdata = response[0].get_json()\\n\\tassert data['message'] == 'Registered successfully'\\n\\n\\tassert 'test' in app.users\\n\\n\\tuser = app.users['test']\\n\\tassert user.username == 'test'\\n\\tassert user.email == 'test@test.com'\\n\\tassert user.password == 'test'\\n\\n\\tresponse = app.register()\\n\\tassert response[1] == 200\\n\\n\\tdata = response[0].get_json()\\n\\tassert data['message'] == 'Registered successfully'\\n\\n\\tassert 'test2' in app.users\\n\\n\\tuser = app.users['test2']\\n\\tassert user.username == 'test2'\\n\\tassert user.email == 'test2@test.com'\\n\\tassert user.password == 'test2'\\n\\n\\ndef test_login():\\n\\tapp.users = {}\\n\\tresponse = app.login()\\n\\tassert response[1] == 401\\n\\n\\tdata = response[0].get_json()\\n\\tassert data['message'] == 'Invalid username or password'\\n\\n\\tapp.register()\\n\\tresponse = app.login()\\n\\tassert response[1] == 200\\n\\n\\tdata = response[0].get_json()\\n\\tassert 'token' in data\\n\\n\\ttoken = data['token']\\n\\tdata = jwt.decode(token, app.SECRET_KEY)\\n\\tassert data['user'] == 'test'\\n\\n\\ndef test_post():\\n\\tapp.users = {}\\n\\tapp.posts = {}\\n\\tresponse = app.post()\\n\\tassert response[1] == 401\\n\\n\\tdata = response[0].get_json()\\n\\tassert data['message'] == 'Token is missing'\\n\\n\\tapp.register()\\n\\tresponse = app.login()\\n\\ttoken = response[0].get_json()['token']\\n\\tresponse = app.post()\\n\\tassert response[1] == 200\\n\\n\\tdata = response[0].get_json()\\n\\tassert data['message'] == 'Posted successfully'\\n\\n\\tassert len(app.posts) == 1\\n\\n\\tpost = app.posts[0]\\n\\tassert post.user == 'test'\\n\\tassert post.content == 'Hello, World!'\\n\\tassert post.likes == 0\\n\\tassert post.retweets == 0\\n\\tassert post.replies == []\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1058, "total_tokens": 2565}}]