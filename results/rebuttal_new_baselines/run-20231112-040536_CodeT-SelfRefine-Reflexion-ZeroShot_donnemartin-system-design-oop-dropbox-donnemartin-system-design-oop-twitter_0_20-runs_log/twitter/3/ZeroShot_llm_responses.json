[{"id": "chatcmpl-8Jy7en1N3fvo99oBchbYRFL5gLsTK", "object": "chat.completion", "created": 1699770034, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\n\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport routes\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom dataclasses import dataclass\\n\\n@dataclass\\nclass User(db.Model):\\n\\tid: int\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\n\\tdef __repr__(self):\\n\\t\\treturn '<User %r>' % self.username\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request, jsonify\\nfrom flask_jwt_extended import create_access_token, jwt_required\\nfrom app import app, db\\nfrom models import User\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tusername = request.json.get('username', None)\\n\\temail = request.json.get('email', None)\\n\\tpassword = request.json.get('password', None)\\n\\tuser = User(username=username, email=email, password=password)\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tusername = request.json.get('username', None)\\n\\tpassword = request.json.get('password', None)\\n\\tuser = User.query.filter_by(username=username, password=password).first()\\n\\tif user is None:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\taccess_token = create_access_token(identity=username)\\n\\treturn jsonify(access_token=access_token), 200\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef init_database():\\n\\tdb.create_all()\\n\\tyield\\n\\tdb.drop_all()\\n\\ndef test_register(client, init_database):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\tuser = User.query.filter_by(username='test').first()\\n\\tassert user is not None\\n\\ndef test_login(client, init_database):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 846, "total_tokens": 2353}}]