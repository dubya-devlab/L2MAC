[{"id": "chatcmpl-8K2X0ssohPEV0Qad2li9GxnPr4AIs", "object": "chat.completion", "created": 1699786982, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\nSECRET_KEY = 'secret'\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(data['username'], data['email'], data['password'], {})\\n\\tusers[data['username']] = new_user\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\ttoken = jwt.encode({'user': user.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, SECRET_KEY)\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\ttoken = data.get('token')\\n\\tif not token:\\n\\t\\treturn jsonify({'message': 'Token is missing'}), 401\\n\\ttry:\\n\\t\\tdata = jwt.decode(token, SECRET_KEY)\\n\\texcept:\\n\\t\\treturn jsonify({'message': 'Token is invalid'}), 401\\n\\tnew_post = Post(data['user'], data['content'], 0, 0, [])\\n\\tposts[len(posts)] = new_post\\n\\treturn jsonify({'message': 'Posted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.app.test_client().post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Registered successfully'}\\n\\tassert 'test' in app.users\\n\\ndef test_login():\\n\\tapp.users = {'test': app.User('test', 'test@test.com', 'test', {})}\\n\\tresponse = app.app.test_client().post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\tassert jwt.decode(response.get_json()['token'], app.SECRET_KEY, algorithms=['HS256'])['user'] == 'test'\\n\\n\\tresponse = app.app.test_client().post('/login', json={'username': 'test', 'password': 'wrong'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\n\\tresponse = app.app.test_client().post('/login', json={'username': 'wrong', 'password': 'test'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\ndef test_post():\\n\\tapp.users = {'test': app.User('test', 'test@test.com', 'test', {})}\\n\\ttoken = jwt.encode({'user': 'test', 'exp': 9999999999}, app.SECRET_KEY, algorithm='HS256')\\n\\tresponse = app.app.test_client().post('/post', json={'token': token, 'content': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Posted successfully'}\\n\\tassert 0 in app.posts\\n\\n\\tresponse = app.app.test_client().post('/post', json={'content': 'Hello, world!'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Token is missing'}\\n\\n\\tresponse = app.app.test_client().post('/post', json={'token': 'wrong', 'content': 'Hello, world!'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Token is invalid'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1046, "total_tokens": 2553}}, {"id": "chatcmpl-8K2XZXbwuk8gqsqlc9KZ7ZZvSg52t", "object": "chat.completion", "created": 1699787017, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport services\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = services.register_user(data)\\n\\treturn jsonify(user), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = services.authenticate_user(data)\\n\\tif user is not None:\\n\\t\\taccess_token = create_access_token(identity=user['username'])\\n\\t\\treturn jsonify(access_token=access_token), 200\\n\\treturn jsonify(message='Invalid username or password'), 401\\n\\n@app.route('/profile', methods=['GET', 'PUT'])\\n@jwt_required\\n\\ndef profile():\\n\\tif request.method == 'GET':\\n\\t\\tusername = get_jwt_identity()\\n\\t\\tuser = services.get_user(username)\\n\\t\\treturn jsonify(user), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tusername = get_jwt_identity()\\n\\t\\tuser = services.update_user(username, data)\\n\\t\\treturn jsonify(user), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom dataclasses import dataclass\\n\\n@dataclass\\nclass User(db.Model):\\n\\tid: int\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tbio: str\\n\\twebsite: str\\n\\tlocation: str\\n\\tis_private: bool\\n\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(80), nullable=False)\\n\\tbio = db.Column(db.String(280))\\n\\twebsite = db.Column(db.String(120))\\n\\tlocation = db.Column(db.String(120))\\n\\tis_private = db.Column(db.Boolean, default=False)\\n\\n\\tdb.create_all()\"\n    },\n    {\n      \"file_path\": \"services.py\",\n      \"file_contents\": \"from models import User\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nfrom app import db\\n\\n\\ndef register_user(data):\\n\\tuser = User(username=data['username'], email=data['email'], password=generate_password_hash(data['password']))\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\treturn user\\n\\ndef authenticate_user(data):\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and check_password_hash(user.password, data['password']):\\n\\t\\treturn user\\n\\treturn None\\n\\ndef get_user(username):\\n\\tuser = User.query.filter_by(username=username).first()\\n\\tif user:\\n\\t\\treturn user\\n\\treturn None\\n\\ndef update_user(username, data):\\n\\tuser = User.query.filter_by(username=username).first()\\n\\tif user:\\n\\t\\tuser.bio = data.get('bio', user.bio)\\n\\t\\tuser.website = data.get('website', user.website)\\n\\t\\tuser.location = data.get('location', user.location)\\n\\t\\tuser.is_private = data.get('is_private', user.is_private)\\n\\t\\tdb.session.commit()\\n\\t\\treturn user\\n\\treturn None\"\n    },\n    {\n      \"file_path\": \"test_services.py\",\n      \"file_contents\": \"import pytest\\nfrom services import register_user, authenticate_user, get_user, update_user\\nfrom models import User\\nfrom app import db\\n\\n\\ndef test_register_user():\\n\\tdata = {'username': 'test', 'email': 'test@test.com', 'password': 'test'}\\n\\tuser = register_user(data)\\n\\tassert user.username == data['username']\\n\\tassert user.email == data['email']\\n\\n\\ndef test_authenticate_user():\\n\\tdata = {'username': 'test', 'password': 'test'}\\n\\tuser = authenticate_user(data)\\n\\tassert user is not None\\n\\n\\ndef test_get_user():\\n\\tusername = 'test'\\n\\tuser = get_user(username)\\n\\tassert user is not None\\n\\n\\ndef test_update_user():\\n\\tusername = 'test'\\n\\tdata = {'bio': 'This is a test bio', 'website': 'https://test.com', 'location': 'Test City', 'is_private': True}\\n\\tuser = update_user(username, data)\\n\\tassert user.bio == data['bio']\\n\\tassert user.website == data['website']\\n\\tassert user.location == data['location']\\n\\tassert user.is_private == data['is_private']\\n\\n\\ndef setup_function(function):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\n\\ndef teardown_function(function):\\n\\tUser.query.delete()\\n\\tdb.session.commit()\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1253, "total_tokens": 2760}}, {"id": "chatcmpl-8K2YPzvbr3l5LEv9eT2urs8O9bfZT", "object": "chat.completion", "created": 1699787069, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['username'] in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[data['username']] = data\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['username'] not in users or users[data['username']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': data['username'], 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/profile', methods=['GET', 'PUT'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\tif 'token' not in data or 'user' not in jwt.decode(data['token'], app.config['SECRET_KEY']):\\n\\t\\treturn jsonify({'message': 'Token is missing or invalid'}), 400\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(users[jwt.decode(data['token'], app.config['SECRET_KEY'])['user']]), 200\\n\\telif request.method == 'PUT':\\n\\t\\tusers[jwt.decode(data['token'], app.config['SECRET_KEY'])['user']].update(data)\\n\\t\\treturn jsonify({'message': 'Profile updated successfully'}), 200\\n\\n@app.route('/post', methods=['POST', 'DELETE'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tif 'token' not in data or 'user' not in jwt.decode(data['token'], app.config['SECRET_KEY']):\\n\\t\\treturn jsonify({'message': 'Token is missing or invalid'}), 400\\n\\tif request.method == 'POST':\\n\\t\\tif len(data['content']) > 280:\\n\\t\\t\\treturn jsonify({'message': 'Post content exceeds the limit'}), 400\\n\\t\\tposts[len(posts)] = {'user': jwt.decode(data['token'], app.config['SECRET_KEY'])['user'], 'content': data['content']}\\n\\t\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\telif request.method == 'DELETE':\\n\\t\\tif data['post_id'] not in posts or posts[data['post_id']]['user'] != jwt.decode(data['token'], app.config['SECRET_KEY'])['user']:\\n\\t\\t\\treturn jsonify({'message': 'Post not found or unauthorized'}), 400\\n\\t\\tdel posts[data['post_id']]\\n\\t\\treturn jsonify({'message': 'Post deleted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Username already exists'}\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'wrong'})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\n\\tresponse = client.post('/login', json={'username': 'wrong', 'password': 'test'})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\ndef test_profile(client):\\n\\ttoken = client.post('/login', json={'username': 'test', 'password': 'test'}).get_json()['token']\\n\\tresponse = client.get('/profile', json={'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'username': 'test', 'password': 'test'}\\n\\n\\tresponse = client.put('/profile', json={'token': token, 'password': 'new'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Profile updated successfully'}\\n\\n\\tresponse = client.get('/profile', json={'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'username': 'test', 'password': 'new'}\\n\\n\\tresponse = client.get('/profile', json={'token': jwt.encode({'user': 'test', 'exp': 0}, app.app.config['SECRET_KEY']).decode('UTF-8')})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Token is missing or invalid'}\\n\\n\\tresponse = client.put('/profile', json={'token': jwt.encode({'user': 'test', 'exp': 0}, app.app.config['SECRET_KEY']).decode('UTF-8')})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Token is missing or invalid'}\\n\\ndef test_post(client):\\n\\ttoken = client.post('/login', json={'username': 'test', 'password': 'new'}).get_json()['token']\\n\\tresponse = client.post('/post', json={'token': token, 'content': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\\n\\n\\tresponse = client.post('/post', json={'token': token, 'content': 'Hello, world!' * 100})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Post content exceeds the limit'}\\n\\n\\tresponse = client.delete('/post', json={'token': token, 'post_id': 0})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post deleted successfully'}\\n\\n\\tresponse = client.delete('/post', json={'token': token, 'post_id': 0})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Post not found or unauthorized'}\\n\\n\\tresponse = client.post('/post', json={'token': jwt.encode({'user': 'test', 'exp': 0}, app.app.config['SECRET_KEY']).decode('UTF-8'), 'content': 'Hello, world!'})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Token is missing or invalid'}\\n\\n\\tresponse = client.delete('/post', json={'token': jwt.encode({'user': 'test', 'exp': 0}, app.app.config['SECRET_KEY'}).decode('UTF-8'), 'post_id': 0})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Token is missing or invalid'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1744, "total_tokens": 3251}}]