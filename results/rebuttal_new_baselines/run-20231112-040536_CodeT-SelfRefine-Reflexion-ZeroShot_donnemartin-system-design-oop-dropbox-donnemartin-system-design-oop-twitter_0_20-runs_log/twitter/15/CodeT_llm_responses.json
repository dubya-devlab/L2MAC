[{"id": "chatcmpl-8K3DXoUtxNyagDnhBEPMIFRnfBDcC", "object": "chat.completion", "created": 1699789619, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\n\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport routes\\n\\ndb.create_all()\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import create_access_token\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\t\\n\\tdef __init__(self, username, email, password):\\n\\t\\tself.username = username\\n\\t\\tself.email = email\\n\\t\\tself.password = generate_password_hash(password)\\n\\t\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password, password)\\n\\t\\n\\tdef get_token(self):\\n\\t\\treturn create_access_token(identity=self.id)\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\t\\n\\tdef __init__(self, content, user_id):\\n\\t\\tself.content = content\\n\\t\\tself.user_id = user_id\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request, jsonify\\nfrom app import app, db\\nfrom models import User, Post\\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\\n\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and user.check_password(data['password']):\\n\\t\\treturn jsonify({'access_token': user.get_token()}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n\\n@app.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tuser_id = get_jwt_identity()\\n\\tnew_post = Post(content=data['content'], user_id=user_id)\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created successfully'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\ndef setup_module():\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\tdb.create_all()\\n\\n\\ndef teardown_module():\\n\\tdb.drop_all()\\n\\n\\ndef test_register():\\n\\twith app.test_client() as client:\\n\\t\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\t\\tassert response.status_code == 201\\n\\t\\tassert response.get_json()['message'] == 'User registered successfully'\\n\\n\\ndef test_login():\\n\\twith app.test_client() as client:\\n\\t\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\t\\tassert response.status_code == 200\\n\\t\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_create_post():\\n\\twith app.test_client() as client:\\n\\t\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\t\\taccess_token = response.get_json()['access_token']\\n\\t\\tresponse = client.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': f'Bearer {access_token}'})\\n\\t\\tassert response.status_code == 201\\n\\t\\tassert response.get_json()['message'] == 'Post created successfully'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1109, "total_tokens": 2616}}, {"id": "chatcmpl-8K3E9O7hO89cog0AyILRqEhxI0gFk", "object": "chat.completion", "created": 1699789657, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\nSECRET_KEY = 'secret'\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(data['username'], data['email'], data['password'], {})\\n\\tusers[data['username']] = new_user\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\ttoken = jwt.encode({'user': user.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, SECRET_KEY)\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tnew_post = Post(user.username, data['content'], 0, 0, [])\\n\\tposts[len(posts)] = new_post\\n\\treturn jsonify({'message': 'Posted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.app.test_client().post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Registered successfully'}\\n\\tassert 'test' in app.users\\n\\ndef test_login():\\n\\tapp.users = {'test': app.User('test', 'test@test.com', 'test', {})}\\n\\tresponse = app.app.test_client().post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\tassert jwt.decode(response.get_json()['token'], app.SECRET_KEY, algorithms=['HS256'])['user'] == 'test'\\n\\n\\tresponse = app.app.test_client().post('/login', json={'username': 'test', 'password': 'wrong'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\n\\tresponse = app.app.test_client().post('/login', json={'username': 'wrong', 'password': 'test'})\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\ndef test_post():\\n\\tapp.users = {'test': app.User('test', 'test@test.com', 'test', {})}\\n\\tapp.posts = {}\\n\\tresponse = app.app.test_client().post('/post', json={'username': 'test', 'content': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Posted successfully'}\\n\\tassert len(app.posts) == 1\\n\\n\\tresponse = app.app.test_client().post('/post', json={'username': 'wrong', 'content': 'Hello, world!'})\\n\\tassert response.status_code == 404\\n\\tassert response.get_json() == {'message': 'User not found'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 935, "total_tokens": 2442}}, {"id": "chatcmpl-8K3Ea9xeyDNSUL4bVE4uTNApgz4aO", "object": "chat.completion", "created": 1699789684, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\nSECRET_KEY = 'secret'\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(data['username'], data['email'], data['password'], {})\\n\\tusers[data['username']] = new_user\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\ttoken = jwt.encode({'user': user.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, SECRET_KEY)\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\ttoken = jwt.decode(data['token'], SECRET_KEY)\\n\\tuser = users.get(token['user'])\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tnew_post = Post(user.username, data['content'], 0, 0, [])\\n\\tposts[len(posts)] = new_post\\n\\treturn jsonify({'message': 'Posted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.register()\\n\\tassert response[1] == 200\\n\\n\\tdata = {'username': 'test', 'email': 'test@test.com', 'password': 'test'}\\n\\tresponse = app.register(data)\\n\\tassert response[1] == 200\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Registered successfully'\\n\\n\\tresponse = app.register(data)\\n\\tassert response[1] == 400\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'User already exists'\\n\\n\\tdata = {'username': '', 'email': 'test@test.com', 'password': 'test'}\\n\\tresponse = app.register(data)\\n\\tassert response[1] == 400\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Username is required'\\n\\n\\tdata = {'username': 'test2', 'email': '', 'password': 'test'}\\n\\tresponse = app.register(data)\\n\\tassert response[1] == 400\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Email is required'\\n\\n\\tdata = {'username': 'test2', 'email': 'test2@test.com', 'password': ''}\\n\\tresponse = app.register(data)\\n\\tassert response[1] == 400\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Password is required'\\n\\n\\ndef test_login():\\n\\tapp.users = {}\\n\\tdata = {'username': 'test', 'email': 'test@test.com', 'password': 'test'}\\n\\tapp.register(data)\\n\\n\\tresponse = app.login()\\n\\tassert response[1] == 401\\n\\n\\tdata = {'username': 'test', 'password': 'test'}\\n\\tresponse = app.login(data)\\n\\tassert response[1] == 200\\n\\tassert 'token' in response[0]\\n\\n\\tdata = {'username': 'test', 'password': 'wrong'}\\n\\tresponse = app.login(data)\\n\\tassert response[1] == 401\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Invalid username or password'\\n\\n\\tdata = {'username': 'wrong', 'password': 'test'}\\n\\tresponse = app.login(data)\\n\\tassert response[1] == 401\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Invalid username or password'\\n\\n\\ndef test_post():\\n\\tapp.users = {}\\n\\tdata = {'username': 'test', 'email': 'test@test.com', 'password': 'test'}\\n\\tapp.register(data)\\n\\tdata = {'username': 'test', 'password': 'test'}\\n\\tresponse = app.login(data)\\n\\ttoken = response[0]['token']\\n\\n\\tresponse = app.post()\\n\\tassert response[1] == 401\\n\\n\\tdata = {'token': token, 'content': 'Hello, World!'}\\n\\tresponse = app.post(data)\\n\\tassert response[1] == 200\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'Posted successfully'\\n\\n\\tdata = {'token': jwt.encode({'user': 'wrong', 'exp': 0}, app.SECRET_KEY).decode('UTF-8'), 'content': 'Hello, World!'}\\n\\tresponse = app.post(data)\\n\\tassert response[1] == 404\\n\\tassert 'message' in response[0]\\n\\tassert response[0]['message'] == 'User not found'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1325, "total_tokens": 2832}}]