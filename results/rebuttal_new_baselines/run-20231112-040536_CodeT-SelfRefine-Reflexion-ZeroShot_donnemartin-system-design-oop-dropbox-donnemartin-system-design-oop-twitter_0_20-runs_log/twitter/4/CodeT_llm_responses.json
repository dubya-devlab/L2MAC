[{"id": "chatcmpl-8JyLgUDz4QBFWa3uX7Y3LOuZILYJy", "object": "chat.completion", "created": 1699770904, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom post import Post\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/users/<email>', methods=['GET', 'PUT'])\\ndef user(email):\\n\\tuser = users.get(email)\\n\\tif request.method == 'GET':\\n\\t\\tif user:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tif user:\\n\\t\\t\\tuser.update(**data)\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\n@app.route('/posts', methods=['POST'])\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tpost = Post(**data)\\n\\tposts[post.id] = post\\n\\treturn jsonify(post.to_dict()), 201\\n\\n@app.route('/posts/<post_id>', methods=['GET', 'DELETE'])\\ndef post(post_id):\\n\\tpost = posts.get(post_id)\\n\\tif request.method == 'GET':\\n\\t\\tif post:\\n\\t\\t\\treturn jsonify(post.to_dict()), 200\\n\\t\\treturn {'message': 'Post not found'}, 404\\n\\telif request.method == 'DELETE':\\n\\t\\tif post:\\n\\t\\t\\tdel posts[post_id]\\n\\t\\t\\treturn {'message': 'Post deleted'}, 200\\n\\t\\treturn {'message': 'Post not found'}, 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tusername: str\\n\\tpassword: str\\n\\tprofile_picture: str = field(default=None)\\n\\tbio: str = field(default=None)\\n\\twebsite_link: str = field(default=None)\\n\\tlocation: str = field(default=None)\\n\\tprivate: bool = field(default=False)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\\n\\n\\tdef update(self, **kwargs):\\n\\t\\tfor key, value in kwargs.items():\\n\\t\\t\\tif hasattr(self, key):\\n\\t\\t\\t\\tsetattr(self, key, value)\"\n    },\n    {\n      \"file_path\": \"post.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom datetime import datetime\\nimport uuid\\n\\n@dataclass\\nclass Post:\\n\\tuser_email: str\\n\\tcontent: str\\n\\timage: str = field(default=None)\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\tcreated_at: datetime = field(default_factory=datetime.now)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 800, "total_tokens": 2307}}, {"id": "chatcmpl-8JyMZhyIZsiY4ZOWwH0x5i97FsuGs", "object": "chat.completion", "created": 1699770959, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest_flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\n\\njwt = JWTManager(app)\\ndb = SQLAlchemy(app)\\n\\nimport models\\nimport routes\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import create_access_token\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\n\\tdef __init__(self, username, email, password):\\n\\t\\tself.username = username\\n\\t\\tself.email = email\\n\\t\\tself.password = generate_password_hash(password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password, password)\\n\\n\\tdef get_token(self):\\n\\t\\treturn create_access_token(identity=self.id)\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\n\\tdef __init__(self, content, user_id):\\n\\t\\tself.content = content\\n\\t\\tself.user_id = user_id\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request, jsonify\\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and user.check_password(data['password']):\\n\\t\\treturn jsonify({'access_token': user.get_token()}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n\\n@app.route('/post', methods=['POST'])\\n@jwt_required\\ndef post():\\n\\tdata = request.get_json()\\n\\tnew_post = Post(content=data['content'], user_id=get_jwt_identity())\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created successfully'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User registered successfully'\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_post(client):\\n\\tuser = User.query.filter_by(username='test').first()\\n\\tresponse = client.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': 'Bearer ' + user.get_token()})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'Post created successfully'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 1031, "total_tokens": 2538}}, {"id": "chatcmpl-8JyNtlWPgW8vL2Z99xjOKvggo2gaz", "object": "chat.completion", "created": 1699771041, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, email, password, {})\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'username': username}, 'secret', algorithm='HS256')\\n\\treturn jsonify({'token': token}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tcontent = data['content']\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tposts[len(posts)] = Post(username, content, 0, 0, [])\\n\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn {'username': 'test', 'email': 'test@test.com', 'password': 'test'}\\n\\n@pytest.fixture\\ndef post():\\n\\treturn {'username': 'test', 'content': 'Hello, world!'}\\n\\n@pytest.fixture\\ndef token():\\n\\treturn jwt.encode({'username': 'test'}, 'secret', algorithm='HS256')\\n\\n\\ndef test_register(client, user):\\n\\tresponse = client.post('/register', json=user)\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'User registered successfully'\\n\\n\\ndef test_login(client, user):\\n\\tclient.post('/register', json=user)\\n\\tresponse = client.post('/login', json=user)\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\ndef test_post(client, user, post, token):\\n\\tclient.post('/register', json=user)\\n\\tclient.post('/login', json=user)\\n\\tresponse = client.post('/post', json=post, headers={'Authorization': f'Bearer {token}'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Post created successfully'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1507, "completion_tokens": 805, "total_tokens": 2312}}]