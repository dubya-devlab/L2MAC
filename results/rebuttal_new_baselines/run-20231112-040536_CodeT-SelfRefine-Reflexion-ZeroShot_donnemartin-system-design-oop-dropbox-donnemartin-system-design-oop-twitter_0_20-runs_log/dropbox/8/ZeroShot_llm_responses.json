[{"id": "chatcmpl-8K0Ots4tDQ5UuUC7pS8ZojX9pkxnU", "object": "chat.completion", "created": 1699778791, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif user and user.password == password:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif user:\\n\\t\\treturn jsonify(user.__dict__), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfilename = request.args.get('filename')\\n\\tfile = files.get(filename)\\n\\tif file:\\n\\t\\treturn jsonify(file.__dict__), 200\\n\\treturn jsonify({'message': 'File not found'}), 404\\n\\n@app.route('/share', methods=['POST'])\\ndef share():\\n\\tdata = request.get_json()\\n\\tfilename = data.get('filename')\\n\\trecipient = data.get('recipient')\\n\\tfile = files.get(filename)\\n\\tif file and recipient in users:\\n\\t\\treturn jsonify({'message': 'File shared successfully'}), 200\\n\\treturn jsonify({'message': 'File or recipient not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Login successful'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile?email=test@example.com')\\n\\tassert response.status_code == 200\\n\\tuser = response.get_json()\\n\\tassert user['name'] == 'Test User'\\n\\tassert user['email'] == 'test@example.com'\\n\\tassert user['storage_used'] == 0\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'file.txt', 'size': 100, 'owner': 'test@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download?filename=file.txt')\\n\\tassert response.status_code == 200\\n\\tfile = response.get_json()\\n\\tassert file['name'] == 'file.txt'\\n\\tassert file['size'] == 100\\n\\tassert file['owner'] == 'test@example.com'\\n\\n\\ndef test_share(client):\\n\\tresponse = client.post('/share', json={'filename': 'file.txt', 'recipient': 'test2@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'File shared successfully'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1078, "total_tokens": 2559}}]