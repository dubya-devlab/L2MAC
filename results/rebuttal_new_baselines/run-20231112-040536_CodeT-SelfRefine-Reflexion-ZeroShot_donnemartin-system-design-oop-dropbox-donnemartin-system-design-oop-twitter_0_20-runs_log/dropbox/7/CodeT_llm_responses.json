[{"id": "chatcmpl-8JzrUBYBvtOxsSSoZ0zGTdVmbGzEi", "object": "chat.completion", "created": 1699776720, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif user and user.password == password:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif user:\\n\\t\\treturn jsonify(user.__dict__), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfile_name = request.args.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif file:\\n\\t\\treturn jsonify(file.__dict__), 200\\n\\treturn jsonify({'message': 'File not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Login successful'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile', query_string={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tuser = response.get_json()\\n\\tassert user['name'] == 'Test User'\\n\\tassert user['email'] == 'test@example.com'\\n\\tassert user['storage_used'] == 0\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'file.txt', 'size': 100, 'owner': 'test@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download', query_string={'file_name': 'file.txt'})\\n\\tassert response.status_code == 200\\n\\tfile = response.get_json()\\n\\tassert file['name'] == 'file.txt'\\n\\tassert file['size'] == 100\\n\\tassert file['owner'] == 'test@example.com'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 932, "total_tokens": 2413}}, {"id": "chatcmpl-8Jzs4H6cypVPdm1Eg2Q5HMWPaXlvF", "object": "chat.completion", "created": 1699776756, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom file_manager import FileManager\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User()\\n\\tresponse = user.register(data)\\n\\treturn jsonify(response)\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User()\\n\\tresponse = user.login(data)\\n\\treturn jsonify(response)\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile_manager = FileManager()\\n\\tresponse = file_manager.upload(data)\\n\\treturn jsonify(response)\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\tfile_manager = FileManager()\\n\\tresponse = file_manager.download(data)\\n\\treturn jsonify(response)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"class User:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef register(self, data):\\n\\t\\tname = data.get('name')\\n\\t\\temail = data.get('email')\\n\\t\\tpassword = data.get('password')\\n\\t\\tif not name or not email or not password:\\n\\t\\t\\treturn {'status': 'error', 'message': 'Missing required fields'}\\n\\t\\tif email in self.users:\\n\\t\\t\\treturn {'status': 'error', 'message': 'User already exists'}\\n\\t\\tself.users[email] = {'name': name, 'password': password}\\n\\t\\treturn {'status': 'success', 'message': 'User registered successfully'}\\n\\n\\tdef login(self, data):\\n\\t\\temail = data.get('email')\\n\\t\\tpassword = data.get('password')\\n\\t\\tif not email or not password:\\n\\t\\t\\treturn {'status': 'error', 'message': 'Missing required fields'}\\n\\t\\tif email not in self.users or self.users[email]['password'] != password:\\n\\t\\t\\treturn {'status': 'error', 'message': 'Invalid credentials'}\\n\\t\\treturn {'status': 'success', 'message': 'User logged in successfully'}\"\n    },\n    {\n      \"file_path\": \"file_manager.py\",\n      \"file_contents\": \"class FileManager:\\n\\tdef __init__(self):\\n\\t\\tself.files = {}\\n\\n\\tdef upload(self, data):\\n\\t\\tfile = data.get('file')\\n\\t\\tif not file:\\n\\t\\t\\treturn {'status': 'error', 'message': 'No file provided'}\\n\\t\\tself.files[file['name']] = file['content']\\n\\t\\treturn {'status': 'success', 'message': 'File uploaded successfully'}\\n\\n\\tdef download(self, data):\\n\\t\\tfile_name = data.get('file_name')\\n\\t\\tif not file_name:\\n\\t\\t\\treturn {'status': 'error', 'message': 'No file name provided'}\\n\\t\\tif file_name not in self.files:\\n\\t\\t\\treturn {'status': 'error', 'message': 'File not found'}\\n\\t\\treturn {'status': 'success', 'message': 'File downloaded successfully', 'file': {'name': file_name, 'content': self.files[file_name]}}\"\n    },\n    {\n      \"file_path\": \"test_user.py\",\n      \"file_contents\": \"import pytest\\nfrom user import User\\n\\ndef test_register():\\n\\tuser = User()\\n\\tresponse = user.register({'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'User registered successfully'\\n\\n\\tresponse = user.register({'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'User already exists'\\n\\n\\tresponse = user.register({'name': 'Test', 'email': '', 'password': 'test123'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Missing required fields'\\n\\ndef test_login():\\n\\tuser = User()\\n\\tuser.register({'name': 'Test', 'email': 'test@test.com', 'password': 'test123'})\\n\\n\\tresponse = user.login({'email': 'test@test.com', 'password': 'test123'})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'User logged in successfully'\\n\\n\\tresponse = user.login({'email': 'test@test.com', 'password': 'wrongpassword'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Invalid credentials'\\n\\n\\tresponse = user.login({'email': '', 'password': 'test123'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'Missing required fields'}\"\n    },\n    {\n      \"file_path\": \"test_file_manager.py\",\n      \"file_contents\": \"import pytest\\nfrom file_manager import FileManager\\n\\ndef test_upload():\\n\\tfile_manager = FileManager()\\n\\tresponse = file_manager.upload({'file': {'name': 'test.txt', 'content': 'Hello, World!'}})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'File uploaded successfully'\\n\\n\\tresponse = file_manager.upload({})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'No file provided'}\\n\\ndef test_download():\\n\\tfile_manager = FileManager()\\n\\tfile_manager.upload({'file': {'name': 'test.txt', 'content': 'Hello, World!'}})\\n\\n\\tresponse = file_manager.download({'file_name': 'test.txt'})\\n\\tassert response['status'] == 'success'\\n\\tassert response['message'] == 'File downloaded successfully'\\n\\tassert response['file']['name'] == 'test.txt'\\n\\tassert response['file']['content'] == 'Hello, World!'\\n\\n\\tresponse = file_manager.download({'file_name': 'nonexistent.txt'})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'File not found'\\n\\n\\tresponse = file_manager.download({})\\n\\tassert response['status'] == 'error'\\n\\tassert response['message'] == 'No file name provided'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1486, "total_tokens": 2967}}, {"id": "chatcmpl-8JzsxjrH7kLjwUkTVorDIZ30qNAZO", "object": "chat.completion", "created": 1699776811, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: list = []\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify(user.__dict__), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfile_name = request.args.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify(file.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\n@pytest.fixture\\ndef sample_file(sample_user):\\n\\treturn File('test.txt', 100, sample_user.email)\\n\\n\\ndef test_register(client, sample_user):\\n\\tresponse = client.post('/register', json=sample_user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/login', json={'email': sample_user.email, 'password': sample_user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_profile(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.get('/profile', query_string={'email': sample_user.email})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == sample_user.__dict__\\n\\n\\ndef test_upload(client, sample_user, sample_file):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/upload', json=sample_file.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\tassert app.users[sample_user.email].storage_used == sample_file.size\\n\\n\\ndef test_download(client, sample_file):\\n\\tapp.files[sample_file.name] = sample_file\\n\\tresponse = client.get('/download', query_string={'file_name': sample_file.name})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == sample_file.__dict__\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 988, "total_tokens": 2469}}]