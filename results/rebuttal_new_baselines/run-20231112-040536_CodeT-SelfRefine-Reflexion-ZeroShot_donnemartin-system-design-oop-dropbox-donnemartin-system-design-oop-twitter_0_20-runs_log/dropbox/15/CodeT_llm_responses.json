[{"id": "chatcmpl-8K32ORp4fxrtgunwLzk1sChSrNkgT", "object": "chat.completion", "created": 1699788928, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user_management, file_management, file_sharing, security\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\treturn user_management.register(data)\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\treturn user_management.login(data)\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\treturn user_management.forgot_password(data)\\n\\n@app.route('/profile', methods=['GET', 'POST'])\\ndef profile():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn user_management.update_profile(data)\\n\\telse:\\n\\t\\treturn user_management.get_profile()\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\treturn file_management.upload(data)\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\treturn file_management.download(data)\\n\\n@app.route('/organize', methods=['POST'])\\ndef organize():\\n\\tdata = request.get_json()\\n\\treturn file_management.organize(data)\\n\\n@app.route('/version', methods=['GET', 'POST'])\\ndef version():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn file_management.restore_version(data)\\n\\telse:\\n\\t\\treturn file_management.get_versions()\\n\\n@app.route('/share', methods=['POST'])\\ndef share():\\n\\tdata = request.get_json()\\n\\treturn file_sharing.share(data)\\n\\n@app.route('/activity', methods=['GET'])\\ndef activity():\\n\\treturn security.get_activity_log()\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstorage_used: int\\n\\tstorage_remaining: int\\n\\nusers = {}\\n\\n\\ndef register(data):\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn {'message': 'User registered successfully'}, 201\\n\\ndef login(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn {'message': 'Login successful'}, 200\\n\\treturn {'message': 'Invalid email or password'}, 401\\n\\ndef forgot_password(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn {'message': 'Password updated successfully'}, 200\\n\\treturn {'message': 'User not found'}, 404\\n\\ndef get_profile():\\n\\treturn [user.__dict__ for user in users.values()], 200\\n\\ndef update_profile(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.name = data.get('name', user.name)\\n\\t\\tuser.profile_picture = data.get('profile_picture', user.profile_picture)\\n\\t\\treturn {'message': 'Profile updated successfully'}, 200\\n\\treturn {'message': 'User not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\ttype: str\\n\\tversions: list\\n\\nfiles = {}\\n\\n\\ndef upload(data):\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\treturn {'message': 'File uploaded successfully'}, 201\\n\\ndef download(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\treturn file.__dict__, 200\\n\\treturn {'message': 'File not found'}, 404\\n\\ndef organize(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.name = data.get('new_name', file.name)\\n\\t\\treturn {'message': 'File organized successfully'}, 200\\n\\treturn {'message': 'File not found'}, 404\\n\\ndef get_versions():\\n\\treturn {file.name: file.versions for file in files.values()}, 200\\n\\ndef restore_version(data):\\n\\tfile = files.get(data['name'])\\n\\tif file and data['version'] in file.versions:\\n\\t\\tfile.versions.remove(data['version'])\\n\\t\\tfile.versions.append(data['version'])\\n\\t\\treturn {'message': 'Version restored successfully'}, 200\\n\\treturn {'message': 'File or version not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_sharing.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Share:\\n\\tfile_name: str\\n\\texpiry_date: str\\n\\tpassword: str\\n\\nshares = {}\\n\\n\\ndef share(data):\\n\\tshare = Share(**data)\\n\\tshares[share.file_name] = share\\n\\treturn {'message': 'File shared successfully'}, 201\"\n    },\n    {\n      \"file_path\": \"security.py\",\n      \"file_contents\": \"activity_log = []\\n\\ndef get_activity_log():\\n\\treturn activity_log, 200\"\n    },\n    {\n      \"file_path\": \"test_user_management.py\",\n      \"file_contents\": \"import pytest\\nimport user_management\\n\\ndef test_register():\\n\\tdata = {'name': 'Test', 'email': 'test@example.com', 'password': 'test', 'profile_picture': '', 'storage_used': 0, 'storage_remaining': 1000}\\n\\tresponse, status_code = user_management.register(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'User registered successfully'\\n\\ndef test_login():\\n\\tdata = {'email': 'test@example.com', 'password': 'test'}\\n\\tresponse, status_code = user_management.login(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Login successful'\\n\\ndef test_forgot_password():\\n\\tdata = {'email': 'test@example.com', 'new_password': 'new_test'}\\n\\tresponse, status_code = user_management.forgot_password(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Password updated successfully'\\n\\ndef test_get_profile():\\n\\tresponse, status_code = user_management.get_profile()\\n\\tassert status_code == 200\\n\\tassert len(response) == 1\\n\\ndef test_update_profile():\\n\\tdata = {'email': 'test@example.com', 'name': 'New Test', 'profile_picture': 'new_picture.jpg'}\\n\\tresponse, status_code = user_management.update_profile(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Profile updated successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_management.py\",\n      \"file_contents\": \"import pytest\\nimport file_management\\n\\ndef test_upload():\\n\\tdata = {'name': 'test.txt', 'size': 100, 'type': 'text/plain', 'versions': []}\\n\\tresponse, status_code = file_management.upload(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File uploaded successfully'\\n\\ndef test_download():\\n\\tdata = {'name': 'test.txt'}\\n\\tresponse, status_code = file_management.download(data)\\n\\tassert status_code == 200\\n\\tassert response['name'] == 'test.txt'\\n\\ndef test_organize():\\n\\tdata = {'name': 'test.txt', 'new_name': 'new_test.txt'}\\n\\tresponse, status_code = file_management.organize(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'File organized successfully'\\n\\ndef test_get_versions():\\n\\tresponse, status_code = file_management.get_versions()\\n\\tassert status_code == 200\\n\\tassert len(response) == 1\\n\\ndef test_restore_version():\\n\\tdata = {'name': 'new_test.txt', 'version': 'v1'}\\n\\tresponse, status_code = file_management.restore_version(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Version restored successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_sharing.py\",\n      \"file_contents\": \"import pytest\\nimport file_sharing\\n\\ndef test_share():\\n\\tdata = {'file_name': 'new_test.txt', 'expiry_date': '2022-12-31', 'password': 'share'}\\n\\tresponse, status_code = file_sharing.share(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File shared successfully'\"\n    },\n    {\n      \"file_path\": \"test_security.py\",\n      \"file_contents\": \"import pytest\\nimport security\\n\\ndef test_get_activity_log():\\n\\tresponse, status_code = security.get_activity_log()\\n\\tassert status_code == 200\\n\\tassert isinstance(response, list)\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 2073, "total_tokens": 3554}}, {"id": "chatcmpl-8K33zqwwzX1FgmMCpTnHXZODYDH3e", "object": "chat.completion", "created": 1699789027, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: list = []\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify(user.__dict__), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\towner = users.get(file.owner)\\n\\tif not owner:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\towner.storage_used += file.size\\n\\tfiles[file.name] = file\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfile_name = request.args.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify(file.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'John Doe', 'email': 'john@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'john@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Logged in successfully'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile?email=john@example.com')\\n\\tassert response.status_code == 200\\n\\tuser = json.loads(response.data)\\n\\tassert user['name'] == 'John Doe'\\n\\tassert user['email'] == 'john@example.com'\\n\\tassert user['storage_used'] == 0\\n\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'name': 'file1', 'size': 100, 'owner': 'john@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client):\\n\\tresponse = client.get('/download?file_name=file1')\\n\\tassert response.status_code == 200\\n\\tfile = json.loads(response.data)\\n\\tassert file['name'] == 'file1'\\n\\tassert file['size'] == 100\\n\\tassert file['owner'] == 'john@example.com'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 960, "total_tokens": 2441}}, {"id": "chatcmpl-8K34pg2W8GanEYuYqoR0XZxS2gQxM", "object": "chat.completion", "created": 1699789079, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user_management, file_management, file_sharing, security\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\treturn jsonify(user_management.register(data))\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\treturn jsonify(user_management.login(data))\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\treturn jsonify(user_management.forgot_password(data))\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\treturn jsonify(user_management.profile(data))\\n\\n@app.route('/change_password', methods=['POST'])\\ndef change_password():\\n\\tdata = request.get_json()\\n\\treturn jsonify(user_management.change_password(data))\\n\\n@app.route('/upload_file', methods=['POST'])\\ndef upload_file():\\n\\tdata = request.get_json()\\n\\treturn jsonify(file_management.upload_file(data))\\n\\n@app.route('/download_file', methods=['GET'])\\ndef download_file():\\n\\tdata = request.get_json()\\n\\treturn jsonify(file_management.download_file(data))\\n\\n@app.route('/organize_file', methods=['POST'])\\ndef organize_file():\\n\\tdata = request.get_json()\\n\\treturn jsonify(file_management.organize_file(data))\\n\\n@app.route('/file_version', methods=['GET'])\\ndef file_version():\\n\\tdata = request.get_json()\\n\\treturn jsonify(file_management.file_version(data))\\n\\n@app.route('/share_file', methods=['POST'])\\ndef share_file():\\n\\tdata = request.get_json()\\n\\treturn jsonify(file_sharing.share_file(data))\\n\\n@app.route('/activity_log', methods=['GET'])\\ndef activity_log():\\n\\tdata = request.get_json()\\n\\treturn jsonify(security.activity_log(data))\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int\\n\\tstorage_remaining: int\\n\\nusers = {}\\n\\n\\ndef register(data):\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn {'message': 'User registered successfully'}\\n\\ndef login(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn {'message': 'Login successful'}\\n\\treturn {'message': 'Invalid email or password'}\\n\\ndef forgot_password(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn {'message': 'Password reset successful'}\\n\\treturn {'message': 'User not found'}\\n\\ndef profile(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\treturn user.__dict__\\n\\treturn {'message': 'User not found'}\\n\\ndef change_password(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['old_password']:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn {'message': 'Password changed successfully'}\\n\\treturn {'message': 'Invalid email or old password'}\"\n    },\n    {\n      \"file_path\": \"file_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\ttype: str\\n\\tsize: int\\n\\tversions: list\\n\\nfiles = {}\\n\\n\\ndef upload_file(data):\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\treturn {'message': 'File uploaded successfully'}\\n\\ndef download_file(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\treturn file.__dict__\\n\\treturn {'message': 'File not found'}\\n\\ndef organize_file(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.name = data['new_name']\\n\\t\\treturn {'message': 'File organized successfully'}\\n\\treturn {'message': 'File not found'}\\n\\ndef file_version(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\treturn {'versions': file.versions}\\n\\treturn {'message': 'File not found'}\"\n    },\n    {\n      \"file_path\": \"file_sharing.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Share:\\n\\tfile_name: str\\n\\tshared_with: list\\n\\tpermissions: dict\\n\\nshares = {}\\n\\n\\ndef share_file(data):\\n\\tshare = Share(**data)\\n\\tshares[share.file_name] = share\\n\\treturn {'message': 'File shared successfully'}\"\n    },\n    {\n      \"file_path\": \"security.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Activity:\\n\\tuser_email: str\\n\\taction: str\\n\\nactivities = []\\n\\n\\ndef activity_log(data):\\n\\tactivity = Activity(**data)\\n\\tactivities.append(activity)\\n\\treturn {'message': 'Activity logged successfully'}\"\n    },\n    {\n      \"file_path\": \"test_user_management.py\",\n      \"file_contents\": \"import pytest\\nimport user_management\\n\\ndef test_register():\\n\\tdata = {'name': 'Test', 'email': 'test@test.com', 'password': 'test', 'storage_used': 0, 'storage_remaining': 100}\\n\\tresponse = user_management.register(data)\\n\\tassert response == {'message': 'User registered successfully'}\\n\\ndef test_login():\\n\\tdata = {'email': 'test@test.com', 'password': 'test'}\\n\\tresponse = user_management.login(data)\\n\\tassert response == {'message': 'Login successful'}\\n\\ndef test_forgot_password():\\n\\tdata = {'email': 'test@test.com', 'new_password': 'new_test'}\\n\\tresponse = user_management.forgot_password(data)\\n\\tassert response == {'message': 'Password reset successful'}\\n\\ndef test_profile():\\n\\tdata = {'email': 'test@test.com'}\\n\\tresponse = user_management.profile(data)\\n\\tassert 'name' in response and 'email' in response and 'password' in response and 'storage_used' in response and 'storage_remaining' in response\\ndef test_change_password():\\n\\tdata = {'email': 'test@test.com', 'old_password': 'new_test', 'new_password': 'test'}\\n\\tresponse = user_management.change_password(data)\\n\\tassert response == {'message': 'Password changed successfully'}\"\n    },\n    {\n      \"file_path\": \"test_file_management.py\",\n      \"file_contents\": \"import pytest\\nimport file_management\\n\\ndef test_upload_file():\\n\\tdata = {'name': 'test.txt', 'type': 'text', 'size': 1, 'versions': ['v1']}\\n\\tresponse = file_management.upload_file(data)\\n\\tassert response == {'message': 'File uploaded successfully'}\\n\\ndef test_download_file():\\n\\tdata = {'name': 'test.txt'}\\n\\tresponse = file_management.download_file(data)\\n\\tassert 'name' in response and 'type' in response and 'size' in response and 'versions' in response\\ndef test_organize_file():\\n\\tdata = {'name': 'test.txt', 'new_name': 'new_test.txt'}\\n\\tresponse = file_management.organize_file(data)\\n\\tassert response == {'message': 'File organized successfully'}\\n\\ndef test_file_version():\\n\\tdata = {'name': 'new_test.txt'}\\n\\tresponse = file_management.file_version(data)\\n\\tassert 'versions' in response\"\n    },\n    {\n      \"file_path\": \"test_file_sharing.py\",\n      \"file_contents\": \"import pytest\\nimport file_sharing\\n\\ndef test_share_file():\\n\\tdata = {'file_name': 'new_test.txt', 'shared_with': ['test2@test.com'], 'permissions': {'test2@test.com': 'read'}}\\n\\tresponse = file_sharing.share_file(data)\\n\\tassert response == {'message': 'File shared successfully'}\"\n    },\n    {\n      \"file_path\": \"test_security.py\",\n      \"file_contents\": \"import pytest\\nimport security\\n\\ndef test_activity_log():\\n\\tdata = {'user_email': 'test@test.com', 'action': 'login'}\\n\\tresponse = security.activity_log(data)\\n\\tassert response == {'message': 'Activity logged successfully'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1988, "total_tokens": 3469}}]