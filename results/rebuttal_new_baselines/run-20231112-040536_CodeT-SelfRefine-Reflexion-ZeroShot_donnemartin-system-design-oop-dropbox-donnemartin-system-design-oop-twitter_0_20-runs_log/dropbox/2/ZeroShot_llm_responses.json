[{"id": "chatcmpl-8JxIJ7PtJoFMEuCDTw4qO01gQ1BVJ", "object": "chat.completion", "created": 1699766851, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user_management, file_management, file_sharing, security\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\treturn user_management.register(data)\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\treturn user_management.login(data)\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\treturn user_management.forgot_password(data)\\n\\n@app.route('/profile', methods=['GET', 'POST'])\\ndef profile():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn user_management.update_profile(data)\\n\\telse:\\n\\t\\treturn user_management.get_profile()\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\treturn file_management.upload(data)\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\treturn file_management.download(data)\\n\\n@app.route('/organize', methods=['POST'])\\ndef organize():\\n\\tdata = request.get_json()\\n\\treturn file_management.organize(data)\\n\\n@app.route('/versioning', methods=['GET', 'POST'])\\ndef versioning():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn file_management.restore_version(data)\\n\\telse:\\n\\t\\treturn file_management.get_versions()\\n\\n@app.route('/share', methods=['POST'])\\ndef share():\\n\\tdata = request.get_json()\\n\\treturn file_sharing.share(data)\\n\\n@app.route('/activity', methods=['GET'])\\ndef activity():\\n\\treturn security.get_activity_log()\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstorage_used: int = 0\\n\\nusers = {}\\n\\n\\ndef register(data):\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn {'message': 'Registration successful'}, 201\\n\\ndef login(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn {'message': 'Login successful'}, 200\\n\\treturn {'message': 'Invalid email or password'}, 401\\n\\ndef forgot_password(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn {'message': 'Password reset successful'}, 200\\n\\treturn {'message': 'Email not found'}, 404\\n\\ndef get_profile():\\n\\treturn {'user': users}, 200\\n\\ndef update_profile(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.name = data.get('name', user.name)\\n\\t\\tuser.profile_picture = data.get('profile_picture', user.profile_picture)\\n\\t\\treturn {'message': 'Profile updated successfully'}, 200\\n\\treturn {'message': 'Email not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\ttype: str\\n\\tversions: list = None\\n\\nfiles = {}\\n\\n\\ndef upload(data):\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\treturn {'message': 'File uploaded successfully'}, 201\\n\\ndef download(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\treturn {'file': file}, 200\\n\\treturn {'message': 'File not found'}, 404\\n\\ndef organize(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.name = data.get('new_name', file.name)\\n\\t\\treturn {'message': 'File organized successfully'}, 200\\n\\treturn {'message': 'File not found'}, 404\\n\\ndef get_versions():\\n\\treturn {'files': files}, 200\\n\\ndef restore_version(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.versions = data.get('versions', file.versions)\\n\\t\\treturn {'message': 'File version restored successfully'}, 200\\n\\treturn {'message': 'File not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_sharing.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Share:\\n\\tfile_name: str\\n\\texpiry_date: str\\n\\tpassword: str\\n\\nshares = {}\\n\\n\\ndef share(data):\\n\\tshare = Share(**data)\\n\\tshares[share.file_name] = share\\n\\treturn {'message': 'File shared successfully'}, 201\"\n    },\n    {\n      \"file_path\": \"security.py\",\n      \"file_contents\": \"activity_log = []\\n\\ndef get_activity_log():\\n\\treturn {'activity_log': activity_log}, 200\"\n    },\n    {\n      \"file_path\": \"test_user_management.py\",\n      \"file_contents\": \"import pytest\\nimport user_management\\n\\ndef test_register():\\n\\tdata = {'name': 'Test', 'email': 'test@test.com', 'password': 'test'}\\n\\tresponse, status_code = user_management.register(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'Registration successful'\\n\\ndef test_login():\\n\\tdata = {'email': 'test@test.com', 'password': 'test'}\\n\\tresponse, status_code = user_management.login(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Login successful'\\n\\ndef test_forgot_password():\\n\\tdata = {'email': 'test@test.com', 'new_password': 'new_test'}\\n\\tresponse, status_code = user_management.forgot_password(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Password reset successful'\\n\\ndef test_get_profile():\\n\\tresponse, status_code = user_management.get_profile()\\n\\tassert status_code == 200\\n\\tassert 'user' in response\\n\\ndef test_update_profile():\\n\\tdata = {'email': 'test@test.com', 'name': 'New Test', 'profile_picture': 'new_test.jpg'}\\n\\tresponse, status_code = user_management.update_profile(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Profile updated successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_management.py\",\n      \"file_contents\": \"import pytest\\nimport file_management\\n\\ndef test_upload():\\n\\tdata = {'name': 'test.txt', 'size': 100, 'type': 'text/plain'}\\n\\tresponse, status_code = file_management.upload(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File uploaded successfully'\\n\\ndef test_download():\\n\\tdata = {'name': 'test.txt'}\\n\\tresponse, status_code = file_management.download(data)\\n\\tassert status_code == 200\\n\\tassert 'file' in response\\n\\ndef test_organize():\\n\\tdata = {'name': 'test.txt', 'new_name': 'new_test.txt'}\\n\\tresponse, status_code = file_management.organize(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'File organized successfully'\\n\\ndef test_get_versions():\\n\\tresponse, status_code = file_management.get_versions()\\n\\tassert status_code == 200\\n\\tassert 'files' in response\\n\\ndef test_restore_version():\\n\\tdata = {'name': 'test.txt', 'versions': ['v1', 'v2']}\\n\\tresponse, status_code = file_management.restore_version(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'File version restored successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_sharing.py\",\n      \"file_contents\": \"import pytest\\nimport file_sharing\\n\\ndef test_share():\\n\\tdata = {'file_name': 'test.txt', 'expiry_date': '2022-12-31', 'password': 'test'}\\n\\tresponse, status_code = file_sharing.share(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File shared successfully'\"\n    },\n    {\n      \"file_path\": \"test_security.py\",\n      \"file_contents\": \"import pytest\\nimport security\\n\\ndef test_get_activity_log():\\n\\tresponse, status_code = security.get_activity_log()\\n\\tassert status_code == 200\\n\\tassert 'activity_log' in response\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 2023, "total_tokens": 3504}}]