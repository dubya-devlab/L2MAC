[{"id": "chatcmpl-8K1fJbN3Czx5ryQothBDxQ1CqGE9Q", "object": "chat.completion", "created": 1699783653, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify(user.__dict__), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tfile_name = request.args.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify(file.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\n@pytest.fixture\\ndef sample_file(sample_user):\\n\\treturn File('test.txt', 100, sample_user.email)\\n\\n\\ndef test_register(client, sample_user):\\n\\tresponse = client.post('/register', json=sample_user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/login', json={'email': sample_user.email, 'password': sample_user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_profile(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.get('/profile', query_string={'email': sample_user.email})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == sample_user.__dict__\\n\\n\\ndef test_upload(client, sample_file):\\n\\tresponse = client.post('/upload', json=sample_file.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client, sample_file):\\n\\tapp.files[sample_file.name] = sample_file\\n\\tresponse = client.get('/download', query_string={'file_name': sample_file.name})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == sample_file.__dict__\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 960, "total_tokens": 2441}}, {"id": "chatcmpl-8K1fwUoSuRjOyFkfMGL6oDGXsS4uN", "object": "chat.completion", "created": 1699783692, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif user and user.password == password:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download/<filename>', methods=['GET'])\\ndef download(filename):\\n\\tfile = files.get(filename)\\n\\tif file:\\n\\t\\treturn jsonify({'file': file}), 200\\n\\treturn jsonify({'message': 'File not found'}), 404\\n\\n@app.route('/share/<filename>', methods=['GET'])\\ndef share(filename):\\n\\tfile = files.get(filename)\\n\\tif file:\\n\\t\\treturn jsonify({'shareable_link': f'http://localhost:5000/download/{filename}'}), 200\\n\\treturn jsonify({'message': 'File not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert app.users['test@example.com'].name == 'Test User'\\n\\n\\ndef test_login(client):\\n\\tapp.users['test@example.com'] = User('Test User', 'test@example.com', 'password')\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\n\\ndef test_upload(client):\\n\\tapp.users['test@example.com'] = User('Test User', 'test@example.com', 'password')\\n\\tresponse = client.post('/upload', json={'name': 'file.txt', 'size': 100, 'owner': 'test@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert app.files['file.txt'].name == 'file.txt'\\n\\tassert app.users['test@example.com'].storage_used == 100\\n\\n\\ndef test_download(client):\\n\\tapp.files['file.txt'] = File('file.txt', 100, 'test@example.com')\\n\\tresponse = client.get('/download/file.txt')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['file']['name'] == 'file.txt'\\n\\n\\ndef test_share(client):\\n\\tapp.files['file.txt'] = File('file.txt', 100, 'test@example.com')\\n\\tresponse = client.get('/share/file.txt')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['shareable_link'] == 'http://localhost:5000/download/file.txt'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 958, "total_tokens": 2439}}, {"id": "chatcmpl-8K1gZtiJ9kMhRInX68nAK7iJoRHkk", "object": "chat.completion", "created": 1699783731, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify(user.__dict__), 200\\n\\n@app.route('/change_password', methods=['POST'])\\ndef change_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\told_password = data.get('old_password')\\n\\tnew_password = data.get('new_password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != old_password:\\n\\t\\treturn jsonify({'message': 'Invalid email or old password'}), 401\\n\\tuser.password = new_password\\n\\treturn jsonify({'message': 'Password changed successfully'}), 200\\n\\n@app.route('/upload_file', methods=['POST'])\\ndef upload_file():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tuser = users.get(file.owner)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser.storage_used += file.size\\n\\tfiles[file.name] = file\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download_file', methods=['GET'])\\ndef download_file():\\n\\tfile_name = request.args.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify(file.__dict__), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\n@pytest.fixture\\ndef sample_file(sample_user):\\n\\treturn File('test.txt', 100, sample_user.email)\\n\\n\\ndef test_register(client, sample_user):\\n\\tresponse = client.post('/register', json=sample_user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/login', json={'email': sample_user.email, 'password': sample_user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_profile(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.get('/profile', query_string={'email': sample_user.email})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == sample_user.__dict__\\n\\n\\ndef test_change_password(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/change_password', json={'email': sample_user.email, 'old_password': sample_user.password, 'new_password': 'new_password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Password changed successfully'}\\n\\tassert app.users[sample_user.email].password == 'new_password'\\n\\n\\ndef test_upload_file(client, sample_user, sample_file):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/upload_file', json=sample_file.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\tassert app.users[sample_user.email].storage_used == sample_file.size\\n\\n\\ndef test_download_file(client, sample_user, sample_file):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tapp.files[sample_file.name] = sample_file\\n\\tresponse = client.get('/download_file', query_string={'file_name': sample_file.name})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == sample_file.__dict__\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1258, "total_tokens": 2739}}]