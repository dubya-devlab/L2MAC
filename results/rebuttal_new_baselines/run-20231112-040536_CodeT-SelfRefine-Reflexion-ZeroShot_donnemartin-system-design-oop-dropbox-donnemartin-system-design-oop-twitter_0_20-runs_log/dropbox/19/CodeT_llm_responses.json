[{"id": "chatcmpl-8K4bviPzedSzzbCG94doPevJhLEfM", "object": "chat.completion", "created": 1699794975, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif 'email' in data and 'password' in data and 'name' in data:\\n\\t\\tif data['email'] not in users:\\n\\t\\t\\tusers[data['email']] = {'password': data['password'], 'name': data['name'], 'files': []}\\n\\t\\t\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\t\\telse:\\n\\t\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid data'}), 400\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif 'email' in data and 'password' in data:\\n\\t\\tif data['email'] in users and users[data['email']]['password'] == data['password']:\\n\\t\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\t\\telse:\\n\\t\\t\\treturn jsonify({'message': 'Invalid credentials'}), 400\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid data'}), 400\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\temail = request.args.get('email')\\n\\tif email in users:\\n\\t\\tuser = users[email]\\n\\t\\treturn jsonify({'name': user['name'], 'email': email, 'files': user['files']}), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tif 'email' in data and 'file' in data:\\n\\t\\tif data['email'] in users:\\n\\t\\t\\tusers[data['email']]['files'].append(data['file'])\\n\\t\\t\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\t\\telse:\\n\\t\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid data'}), 400\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test', 'name': 'Test'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test', 'name': 'Test'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'User already exists'}\\n\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Invalid data'}\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Login successful'}\\n\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'wrong'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Invalid credentials'}\\n\\n\\tresponse = client.post('/login', json={'email': 'test@test.com'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Invalid data'}\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile?email=test@test.com')\\n\\tassert response.status_code == 200\\n\\tassert 'name' in json.loads(response.data)\\n\\tassert 'email' not in json.loads(response.data)\\n\\tassert 'files' in json.loads(response.data)\\n\\n\\tresponse = client.get('/profile?email=wrong@test.com')\\n\\tassert response.status_code == 404\\n\\tassert json.loads(response.data) == {'message': 'User not found'}\\n\\n\\tresponse = client.get('/profile')\\n\\tassert response.status_code == 404\\n\\tassert json.loads(response.data) == {'message': 'User not found'}\\n\\ndef test_upload(client):\\n\\tresponse = client.post('/upload', json={'email': 'test@test.com', 'file': 'test.txt'})\\n\\tassert response.status_code == 201\\n\\tassert json.loads(response.data) == {'message': 'File uploaded successfully'}\\n\\n\\tresponse = client.post('/upload', json={'email': 'wrong@test.com', 'file': 'test.txt'})\\n\\tassert response.status_code == 404\\n\\tassert json.loads(response.data) == {'message': 'User not found'}\\n\\n\\tresponse = client.post('/upload', json={'email': 'test@test.com'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data) == {'message': 'Invalid data'}\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1274, "total_tokens": 2755}}, {"id": "chatcmpl-8K4cvOcDuAqnm7e5EkXJhgvNjJ2He", "object": "chat.completion", "created": 1699795037, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user_management\\nimport file_management\\nimport file_sharing\\nimport security\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = user_management.register(data)\\n\\treturn jsonify(user), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = user_management.login(data)\\n\\treturn jsonify(user), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\tuser = user_management.get_profile(data)\\n\\treturn jsonify(user), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = file_management.upload(data)\\n\\treturn jsonify(file), 201\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\tfile = file_management.download(data)\\n\\treturn jsonify(file), 200\\n\\n@app.route('/share', methods=['POST'])\\ndef share():\\n\\tdata = request.get_json()\\n\\tlink = file_sharing.share(data)\\n\\treturn jsonify(link), 201\\n\\n@app.route('/activity', methods=['GET'])\\ndef activity():\\n\\tdata = request.get_json()\\n\\tlog = security.get_activity_log(data)\\n\\treturn jsonify(log), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int\\n\\tstorage_remaining: int\\n\\nusers = {}\\n\\n\\ndef register(data):\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn user\\n\\ndef login(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn user\\n\\treturn None\\n\\ndef get_profile(data):\\n\\treturn users.get(data['email'])\"\n    },\n    {\n      \"file_path\": \"file_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\ttype: str\\n\\tcontent: str\\n\\nfiles = {}\\n\\ndef upload(data):\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\treturn file\\n\\ndef download(data):\\n\\treturn files.get(data['name'])\"\n    },\n    {\n      \"file_path\": \"file_sharing.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass ShareableLink:\\n\\turl: str\\n\\texpiry_date: str\\n\\tpassword: str\\n\\nlinks = {}\\n\\ndef share(data):\\n\\tlink = ShareableLink(**data)\\n\\tlinks[link.url] = link\\n\\treturn link\"\n    },\n    {\n      \"file_path\": \"security.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass ActivityLog:\\n\\tuser_email: str\\n\\taction: str\\n\\ttimestamp: str\\n\\nlogs = {}\\n\\ndef get_activity_log(data):\\n\\treturn logs.get(data['user_email'])\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 803, "total_tokens": 2284}}, {"id": "chatcmpl-8K4dLH4lkcfO3FgE7ksU5YMLw7Jb8", "object": "chat.completion", "created": 1699795063, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify({'message': 'Login successful'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\treturn jsonify(user.__dict__), 200\\n\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/change_password', methods=['POST'])\\ndef change_password():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['old_password']:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn jsonify({'message': 'Password changed successfully'}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/upload_file', methods=['POST'])\\ndef upload_file():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tif user:\\n\\t\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download_file', methods=['GET'])\\ndef download_file():\\n\\tdata = request.get_json()\\n\\tfile = files.get(data['file_name'])\\n\\tif file:\\n\\t\\treturn jsonify(file.__dict__), 200\\n\\treturn jsonify({'message': 'File not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'Test User', 'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Login successful'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile', json={'email': 'test@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'name' in response.get_json()\\n\\tassert 'email' in response.get_json()\\n\\tassert 'storage_used' in response.get_json()\\n\\n\\ndef test_change_password(client):\\n\\tresponse = client.post('/change_password', json={'email': 'test@example.com', 'old_password': 'password', 'new_password': 'new_password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Password changed successfully'}\\n\\n\\ndef test_upload_file(client):\\n\\tresponse = client.post('/upload_file', json={'name': 'file.txt', 'size': 100, 'owner': 'test@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download_file(client):\\n\\tresponse = client.get('/download_file', json={'file_name': 'file.txt'})\\n\\tassert response.status_code == 200\\n\\tassert 'name' in response.get_json()\\n\\tassert 'size' in response.get_json()\\n\\tassert 'owner' in response.get_json()\\n\\tassert 'versions' in response.get_json()\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1079, "total_tokens": 2560}}]