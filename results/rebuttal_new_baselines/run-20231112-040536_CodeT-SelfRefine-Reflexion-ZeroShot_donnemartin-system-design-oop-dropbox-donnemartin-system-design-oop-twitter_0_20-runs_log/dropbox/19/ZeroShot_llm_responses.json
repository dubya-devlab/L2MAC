[{"id": "chatcmpl-8K4jSkEqxCppreEBDE0EoUkGLL4pn", "object": "chat.completion", "created": 1699795442, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tusers[file.owner].storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download/<filename>', methods=['GET'])\\ndef download(filename):\\n\\tfile = files.get(filename)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify({'message': 'File downloaded successfully', 'file': file}), 200\\n\\n@app.route('/share/<filename>', methods=['POST'])\\ndef share(filename):\\n\\tdata = request.get_json()\\n\\tfile = files.get(filename)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\treturn jsonify({'message': 'File shared successfully', 'file': file}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom app import User, File\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn User('Test User', 'test@example.com', 'password')\\n\\n@pytest.fixture\\ndef sample_file(sample_user):\\n\\treturn File('test.txt', 100, sample_user.email)\\n\\n\\ndef test_register(client, sample_user):\\n\\tresponse = client.post('/register', json=sample_user.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client, sample_user):\\n\\tapp.users[sample_user.email] = sample_user\\n\\tresponse = client.post('/login', json={'email': sample_user.email, 'password': sample_user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_upload(client, sample_file):\\n\\tresponse = client.post('/upload', json=sample_file.__dict__)\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download(client, sample_file):\\n\\tapp.files[sample_file.name] = sample_file\\n\\tresponse = client.get(f'/download/{sample_file.name}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'File downloaded successfully'\\n\\n\\ndef test_share(client, sample_file):\\n\\tapp.files[sample_file.name] = sample_file\\n\\tresponse = client.post(f'/share/{sample_file.name}', json={'email': 'share@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'File shared successfully'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 960, "total_tokens": 2441}}]