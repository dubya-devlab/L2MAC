[{"id": "chatcmpl-8K2NPBUzdRzqcRl3ghmQ681St7cI9", "object": "chat.completion", "created": 1699786387, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user_management, file_management, file_sharing, security\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\treturn user_management.register(data)\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\treturn user_management.login(data)\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\treturn user_management.forgot_password(data)\\n\\n@app.route('/profile', methods=['GET', 'POST'])\\ndef profile():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn user_management.update_profile(data)\\n\\telse:\\n\\t\\treturn user_management.get_profile()\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\treturn file_management.upload(data)\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\treturn file_management.download(data)\\n\\n@app.route('/organize', methods=['POST'])\\ndef organize():\\n\\tdata = request.get_json()\\n\\treturn file_management.organize(data)\\n\\n@app.route('/version', methods=['GET', 'POST'])\\ndef version():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn file_management.update_version(data)\\n\\telse:\\n\\t\\treturn file_management.get_version()\\n\\n@app.route('/share', methods=['POST'])\\ndef share():\\n\\tdata = request.get_json()\\n\\treturn file_sharing.share(data)\\n\\n@app.route('/activity', methods=['GET'])\\ndef activity():\\n\\treturn security.get_activity()\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int\\n\\tstorage_remaining: int\\n\\nusers = {}\\n\\n\\ndef register(data):\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn {'message': 'User registered successfully'}, 201\\n\\ndef login(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn {'message': 'Login successful'}, 200\\n\\telse:\\n\\t\\treturn {'message': 'Invalid email or password'}, 401\\n\\ndef forgot_password(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn {'message': 'Password updated successfully'}, 200\\n\\telse:\\n\\t\\treturn {'message': 'User not found'}, 404\\n\\ndef get_profile():\\n\\treturn [user.__dict__ for user in users.values()], 200\\n\\ndef update_profile(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.name = data.get('name', user.name)\\n\\t\\tuser.password = data.get('password', user.password)\\n\\t\\treturn {'message': 'Profile updated successfully'}, 200\\n\\telse:\\n\\t\\treturn {'message': 'User not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\ttype: str\\n\\tversions: list\\n\\nfiles = {}\\n\\n\\ndef upload(data):\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\treturn {'message': 'File uploaded successfully'}, 201\\n\\ndef download(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\treturn {'file': file.__dict__}, 200\\n\\telse:\\n\\t\\treturn {'message': 'File not found'}, 404\\n\\ndef organize(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.name = data.get('new_name', file.name)\\n\\t\\treturn {'message': 'File organized successfully'}, 200\\n\\telse:\\n\\t\\treturn {'message': 'File not found'}, 404\\n\\ndef get_version():\\n\\treturn [file.__dict__ for file in files.values()], 200\\n\\ndef update_version(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.versions.append(data['version'])\\n\\t\\treturn {'message': 'Version updated successfully'}, 200\\n\\telse:\\n\\t\\treturn {'message': 'File not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_sharing.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Share:\\n\\tfile_name: str\\n\\tshared_with: list\\n\\tpermissions: dict\\n\\nshares = {}\\n\\n\\ndef share(data):\\n\\tshare = Share(**data)\\n\\tshares[share.file_name] = share\\n\\treturn {'message': 'File shared successfully'}, 201\"\n    },\n    {\n      \"file_path\": \"security.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Activity:\\n\\tuser_email: str\\n\\taction: str\\n\\nactivities = []\\n\\n\\ndef get_activity():\\n\\treturn [activity.__dict__ for activity in activities], 200\"\n    },\n    {\n      \"file_path\": \"test_user_management.py\",\n      \"file_contents\": \"import pytest\\nimport user_management\\n\\ndef test_register():\\n\\tdata = {'name': 'Test', 'email': 'test@example.com', 'password': 'test', 'storage_used': 0, 'storage_remaining': 100}\\n\\tresponse, status_code = user_management.register(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'User registered successfully'\\n\\ndef test_login():\\n\\tdata = {'email': 'test@example.com', 'password': 'test'}\\n\\tresponse, status_code = user_management.login(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Login successful'\\n\\ndef test_forgot_password():\\n\\tdata = {'email': 'test@example.com', 'new_password': 'new_test'}\\n\\tresponse, status_code = user_management.forgot_password(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Password updated successfully'\\n\\ndef test_get_profile():\\n\\tresponse, status_code = user_management.get_profile()\\n\\tassert status_code == 200\\n\\tassert len(response) == 1\\n\\ndef test_update_profile():\\n\\tdata = {'email': 'test@example.com', 'name': 'New Test', 'password': 'new_test'}\\n\\tresponse, status_code = user_management.update_profile(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Profile updated successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_management.py\",\n      \"file_contents\": \"import pytest\\nimport file_management\\n\\ndef test_upload():\\n\\tdata = {'name': 'file.txt', 'size': 100, 'type': 'text', 'versions': ['v1']}\\n\\tresponse, status_code = file_management.upload(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File uploaded successfully'\\n\\ndef test_download():\\n\\tdata = {'name': 'file.txt'}\\n\\tresponse, status_code = file_management.download(data)\\n\\tassert status_code == 200\\n\\tassert response['file']['name'] == 'file.txt'\\n\\ndef test_organize():\\n\\tdata = {'name': 'file.txt', 'new_name': 'new_file.txt'}\\n\\tresponse, status_code = file_management.organize(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'File organized successfully'\\n\\ndef test_get_version():\\n\\tresponse, status_code = file_management.get_version()\\n\\tassert status_code == 200\\n\\tassert len(response) == 1\\n\\ndef test_update_version():\\n\\tdata = {'name': 'new_file.txt', 'version': 'v2'}\\n\\tresponse, status_code = file_management.update_version(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Version updated successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_sharing.py\",\n      \"file_contents\": \"import pytest\\nimport file_sharing\\n\\ndef test_share():\\n\\tdata = {'file_name': 'new_file.txt', 'shared_with': ['user@example.com'], 'permissions': {'view': True, 'edit': False}}\\n\\tresponse, status_code = file_sharing.share(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File shared successfully'\"\n    },\n    {\n      \"file_path\": \"test_security.py\",\n      \"file_contents\": \"import pytest\\nimport security\\n\\ndef test_get_activity():\\n\\tresponse, status_code = security.get_activity()\\n\\tassert status_code == 200\\n\\tassert len(response) == 0\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 2106, "total_tokens": 3587}}, {"id": "chatcmpl-8K2OPJjMxQPyh8LEqzTDf4xfQAXSh", "object": "chat.completion", "created": 1699786449, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport user_management, file_management, file_sharing, security\\n\\napp = Flask(__name__)\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\treturn user_management.register(data)\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\treturn user_management.login(data)\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\treturn user_management.forgot_password(data)\\n\\n@app.route('/profile', methods=['GET', 'POST'])\\ndef profile():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn user_management.update_profile(data)\\n\\telse:\\n\\t\\treturn user_management.get_profile()\\n\\n@app.route('/upload', methods=['POST'])\\ndef upload():\\n\\tdata = request.get_json()\\n\\treturn file_management.upload(data)\\n\\n@app.route('/download', methods=['GET'])\\ndef download():\\n\\tdata = request.get_json()\\n\\treturn file_management.download(data)\\n\\n@app.route('/organize', methods=['POST'])\\ndef organize():\\n\\tdata = request.get_json()\\n\\treturn file_management.organize(data)\\n\\n@app.route('/versioning', methods=['GET', 'POST'])\\ndef versioning():\\n\\tif request.method == 'POST':\\n\\t\\tdata = request.get_json()\\n\\t\\treturn file_management.update_version(data)\\n\\telse:\\n\\t\\treturn file_management.get_version()\\n\\n@app.route('/share', methods=['POST'])\\ndef share():\\n\\tdata = request.get_json()\\n\\treturn file_sharing.share(data)\\n\\n@app.route('/activity', methods=['GET'])\\ndef activity():\\n\\treturn security.get_activity()\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str\\n\\tstorage_used: int\\n\\tstorage_remaining: int\\n\\nusers = {}\\n\\n\\ndef register(data):\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn {'message': 'User registered successfully'}, 201\\n\\ndef login(data):\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn {'message': 'Login successful'}, 200\\n\\treturn {'message': 'Invalid email or password'}, 401\\n\\ndef forgot_password(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.password = data['new_password']\\n\\t\\treturn {'message': 'Password updated successfully'}, 200\\n\\treturn {'message': 'User not found'}, 404\\n\\ndef get_profile():\\n\\treturn [user.__dict__ for user in users.values()], 200\\n\\ndef update_profile(data):\\n\\tuser = users.get(data['email'])\\n\\tif user:\\n\\t\\tuser.name = data.get('name', user.name)\\n\\t\\tuser.profile_picture = data.get('profile_picture', user.profile_picture)\\n\\t\\treturn {'message': 'Profile updated successfully'}, 200\\n\\treturn {'message': 'User not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_management.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\ttype: str\\n\\tsize: int\\n\\tcontent: str\\n\\tversions: list\\n\\nfiles = {}\\n\\n\\ndef upload(data):\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\treturn {'message': 'File uploaded successfully'}, 201\\n\\ndef download(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\treturn {'file': file.__dict__}, 200\\n\\treturn {'message': 'File not found'}, 404\\n\\ndef organize(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.name = data.get('new_name', file.name)\\n\\t\\treturn {'message': 'File organized successfully'}, 200\\n\\treturn {'message': 'File not found'}, 404\\n\\ndef get_version():\\n\\treturn [file.__dict__ for file in files.values()], 200\\n\\ndef update_version(data):\\n\\tfile = files.get(data['name'])\\n\\tif file:\\n\\t\\tfile.versions.append(data['new_version'])\\n\\t\\treturn {'message': 'Version updated successfully'}, 200\\n\\treturn {'message': 'File not found'}, 404\"\n    },\n    {\n      \"file_path\": \"file_sharing.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Share:\\n\\tfile_name: str\\n\\tshared_with: list\\n\\tpermissions: dict\\n\\nshares = {}\\n\\n\\ndef share(data):\\n\\tshare = Share(**data)\\n\\tshares[share.file_name] = share\\n\\treturn {'message': 'File shared successfully'}, 201\"\n    },\n    {\n      \"file_path\": \"security.py\",\n      \"file_contents\": \"activities = []\\n\\ndef get_activity():\\n\\treturn activities, 200\"\n    },\n    {\n      \"file_path\": \"test_user_management.py\",\n      \"file_contents\": \"import pytest\\nimport user_management\\n\\ndef test_register():\\n\\tdata = {'name': 'Test', 'email': 'test@example.com', 'password': 'test', 'profile_picture': '', 'storage_used': 0, 'storage_remaining': 1000}\\n\\tresponse, status_code = user_management.register(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'User registered successfully'\\n\\ndef test_login():\\n\\tdata = {'email': 'test@example.com', 'password': 'test'}\\n\\tresponse, status_code = user_management.login(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Login successful'\\n\\ndef test_forgot_password():\\n\\tdata = {'email': 'test@example.com', 'new_password': 'new_test'}\\n\\tresponse, status_code = user_management.forgot_password(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Password updated successfully'\\n\\ndef test_get_profile():\\n\\tresponse, status_code = user_management.get_profile()\\n\\tassert status_code == 200\\n\\tassert len(response) == 1\\n\\ndef test_update_profile():\\n\\tdata = {'email': 'test@example.com', 'name': 'New Test'}\\n\\tresponse, status_code = user_management.update_profile(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Profile updated successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_management.py\",\n      \"file_contents\": \"import pytest\\nimport file_management\\n\\ndef test_upload():\\n\\tdata = {'name': 'file.txt', 'type': 'text', 'size': 1, 'content': 'Hello, World!', 'versions': []}\\n\\tresponse, status_code = file_management.upload(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File uploaded successfully'\\n\\ndef test_download():\\n\\tdata = {'name': 'file.txt'}\\n\\tresponse, status_code = file_management.download(data)\\n\\tassert status_code == 200\\n\\tassert response['file']['name'] == 'file.txt'\\n\\ndef test_organize():\\n\\tdata = {'name': 'file.txt', 'new_name': 'new_file.txt'}\\n\\tresponse, status_code = file_management.organize(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'File organized successfully'\\n\\ndef test_get_version():\\n\\tresponse, status_code = file_management.get_version()\\n\\tassert status_code == 200\\n\\tassert len(response) == 1\\n\\ndef test_update_version():\\n\\tdata = {'name': 'new_file.txt', 'new_version': 'Hello, World! v2'}\\n\\tresponse, status_code = file_management.update_version(data)\\n\\tassert status_code == 200\\n\\tassert response['message'] == 'Version updated successfully'\"\n    },\n    {\n      \"file_path\": \"test_file_sharing.py\",\n      \"file_contents\": \"import pytest\\nimport file_sharing\\n\\ndef test_share():\\n\\tdata = {'file_name': 'new_file.txt', 'shared_with': ['test2@example.com'], 'permissions': {'test2@example.com': 'read'}}\\n\\tresponse, status_code = file_sharing.share(data)\\n\\tassert status_code == 201\\n\\tassert response['message'] == 'File shared successfully'\"\n    },\n    {\n      \"file_path\": \"test_security.py\",\n      \"file_contents\": \"import pytest\\nimport security\\n\\ndef test_get_activity():\\n\\tresponse, status_code = security.get_activity()\\n\\tassert status_code == 200\\n\\tassert len(response) == 0\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 2064, "total_tokens": 3545}}, {"id": "chatcmpl-8K2PWgzYKfBy8y2DanwCTma5U1drZ", "object": "chat.completion", "created": 1699786518, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nfrom typing import Dict\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nfiles = {}\\n\\n@dataclass\\nclass User:\\n\\tname: str\\n\\temail: str\\n\\tpassword: str\\n\\tstorage_used: int = 0\\n\\n@dataclass\\nclass File:\\n\\tname: str\\n\\tsize: int\\n\\towner: str\\n\\tversions: Dict[int, str] = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != password:\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\t# In a real application, we would send an email to the user with a password reset link\\n\\treturn jsonify({'message': 'Password reset link sent'}), 200\\n\\n@app.route('/profile', methods=['GET'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tuser = users.get(email)\\n\\tif not user:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\treturn jsonify(user.__dict__), 200\\n\\n@app.route('/change_password', methods=['POST'])\\ndef change_password():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\told_password = data.get('old_password')\\n\\tnew_password = data.get('new_password')\\n\\tuser = users.get(email)\\n\\tif not user or user.password != old_password:\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\tuser.password = new_password\\n\\treturn jsonify({'message': 'Password changed successfully'}), 200\\n\\n@app.route('/upload_file', methods=['POST'])\\ndef upload_file():\\n\\tdata = request.get_json()\\n\\tfile = File(**data)\\n\\tfiles[file.name] = file\\n\\tuser = users.get(file.owner)\\n\\tuser.storage_used += file.size\\n\\treturn jsonify({'message': 'File uploaded successfully'}), 201\\n\\n@app.route('/download_file', methods=['GET'])\\ndef download_file():\\n\\tdata = request.get_json()\\n\\tfile_name = data.get('file_name')\\n\\tfile = files.get(file_name)\\n\\tif not file:\\n\\t\\treturn jsonify({'message': 'File not found'}), 404\\n\\t# In a real application, we would return the file for download\\n\\treturn jsonify({'message': 'File downloaded successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'name': 'John Doe', 'email': 'john@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'john@example.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Logged in successfully'}\\n\\n\\ndef test_forgot_password(client):\\n\\tresponse = client.post('/forgot_password', json={'email': 'john@example.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Password reset link sent'}\\n\\n\\ndef test_profile(client):\\n\\tresponse = client.get('/profile', json={'email': 'john@example.com'})\\n\\tassert response.status_code == 200\\n\\tuser = response.get_json()\\n\\tassert user['name'] == 'John Doe'\\n\\tassert user['email'] == 'john@example.com'\\n\\n\\ndef test_change_password(client):\\n\\tresponse = client.post('/change_password', json={'email': 'john@example.com', 'old_password': 'password', 'new_password': 'new_password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Password changed successfully'}\\n\\n\\ndef test_upload_file(client):\\n\\tresponse = client.post('/upload_file', json={'name': 'file.txt', 'size': 100, 'owner': 'john@example.com'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'File uploaded successfully'}\\n\\n\\ndef test_download_file(client):\\n\\tresponse = client.get('/download_file', json={'file_name': 'file.txt'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'File downloaded successfully'}\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 1481, "completion_tokens": 1289, "total_tokens": 2770}}]