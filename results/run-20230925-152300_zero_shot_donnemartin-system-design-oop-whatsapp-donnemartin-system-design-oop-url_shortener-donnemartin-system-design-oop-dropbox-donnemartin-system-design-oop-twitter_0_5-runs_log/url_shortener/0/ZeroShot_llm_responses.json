[{"id": "chatcmpl-82gmzHKERXDeyWpS9G1YdUA5kAHct", "object": "chat.completion", "created": 1695651829, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\npytest\\nrequests\\ngeolite2\\n\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom services.url_shortener import URLShortener\\nfrom services.user_service import UserService\\nfrom services.admin_service import AdminService\\n\\napp = Flask(__name__)\\n\\nurl_shortener = URLShortener()\\nuser_service = UserService()\\nadmin_service = AdminService()\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\tshort_url = url_shortener.shorten(data['url'], data.get('custom_alias'))\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\turl = url_shortener.get_url(short_url)\\n\\tif url is None:\\n\\t\\treturn 'URL not found', 404\\n\\treturn redirect(url, code=302)\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tuser = user_service.create_user(data['username'], data['password'])\\n\\treturn jsonify(user), 201\\n\\n@app.route('/user/<username>/urls', methods=['GET'])\\ndef get_user_urls(username):\\n\\turls = user_service.get_user_urls(username)\\n\\treturn jsonify(urls), 200\\n\\n@app.route('/admin/urls', methods=['GET'])\\ndef get_all_urls():\\n\\turls = admin_service.get_all_urls()\\n\\treturn jsonify(urls), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"services/url_shortener.py\",\n      \"file_contents\": \"import string\\nimport random\\nimport requests\\nfrom datetime import datetime\\nfrom geolite2 import geolite2\\n\\n\\nclass URLShortener:\\n\\tdef __init__(self):\\n\\t\\tself.url_data = {}\\n\\n\\tdef shorten(self, url, custom_alias=None):\\n\\t\\tif custom_alias and custom_alias in self.url_data:\\n\\t\\t\\treturn 'Alias already in use'\\n\\t\\tif not self._validate_url(url):\\n\\t\\t\\treturn 'Invalid URL'\\n\\t\\tshort_url = custom_alias if custom_alias else self._generate_short_url()\\n\\t\\tself.url_data[short_url] = {'url': url, 'clicks': [], 'created_at': datetime.now()}\\n\\t\\treturn short_url\\n\\n\\tdef get_url(self, short_url):\\n\\t\\turl_data = self.url_data.get(short_url)\\n\\t\\tif url_data:\\n\\t\\t\\turl_data['clicks'].append(self._get_click_data())\\n\\t\\t\\treturn url_data['url']\\n\\t\\treturn None\\n\\n\\tdef _validate_url(self, url):\\n\\t\\ttry:\\n\\t\\t\\tresponse = requests.get(url)\\n\\t\\t\\treturn response.status_code == 200\\n\\t\\texcept:\\n\\t\\t\\treturn False\\n\\n\\tdef _generate_short_url(self):\\n\\t\\treturn ''.join(random.choices(string.ascii_letters + string.digits, k=6))\\n\\n\\tdef _get_click_data(self):\\n\\t\\treader = geolite2.reader()\\n\\t\\tlocation = reader.get(request.remote_addr)\\n\\t\\treturn {'timestamp': datetime.now(), 'location': location}\"\n    },\n    {\n      \"file_path\": \"services/user_service.py\",\n      \"file_contents\": \"from werkzeug.security import generate_password_hash, check_password_hash\\n\\n\\nclass UserService:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef create_user(self, username, password):\\n\\t\\tif username in self.users:\\n\\t\\t\\treturn 'Username already exists'\\n\\t\\tself.users[username] = {'password': generate_password_hash(password), 'urls': []}\\n\\t\\treturn {'username': username}\\n\\n\\tdef get_user_urls(self, username):\\n\\t\\tuser = self.users.get(username)\\n\\t\\tif user:\\n\\t\\t\\treturn user['urls']\\n\\t\\treturn 'User not found'\"\n    },\n    {\n      \"file_path\": \"services/admin_service.py\",\n      \"file_contents\": \"class AdminService:\\n\\tdef __init__(self, url_shortener, user_service):\\n\\t\\tself.url_shortener = url_shortener\\n\\t\\tself.user_service = user_service\\n\\n\\tdef get_all_urls(self):\\n\\t\\treturn self.url_shortener.url_data\\n\\n\\tdef delete_url(self, short_url):\\n\\t\\tif short_url in self.url_shortener.url_data:\\n\\t\\t\\tdel self.url_shortener.url_data[short_url]\\n\\t\\t\\treturn 'URL deleted'\\n\\t\\treturn 'URL not found'\\n\\n\\tdef delete_user(self, username):\\n\\t\\tif username in self.user_service.users:\\n\\t\\t\\tdel self.user_service.users[username]\\n\\t\\t\\treturn 'User deleted'\\n\\t\\treturn 'User not found'\"\n    },\n    {\n      \"file_path\": \"test_url_shortener.py\",\n      \"file_contents\": \"import pytest\\nfrom services.url_shortener import URLShortener\\n\\n\\ndef test_shorten_url():\\n\\turl_shortener = URLShortener()\\n\\tshort_url = url_shortener.shorten('https://www.google.com')\\n\\tassert len(short_url) == 6\\n\\tassert url_shortener.get_url(short_url) == 'https://www.google.com'\\n\\n\\tcustom_url = url_shortener.shorten('https://www.google.com', 'google')\\n\\tassert custom_url == 'google'\\n\\tassert url_shortener.get_url('google') == 'https://www.google.com'\\n\\n\\tinvalid_url = url_shortener.shorten('invalid_url')\\n\\tassert invalid_url == 'Invalid URL'\\n\\n\\tused_alias = url_shortener.shorten('https://www.google.com', 'google')\\n\\tassert used_alias == 'Alias already in use'\"\n    },\n    {\n      \"file_path\": \"test_user_service.py\",\n      \"file_contents\": \"import pytest\\nfrom services.user_service import UserService\\n\\n\\ndef test_create_user():\\n\\tuser_service = UserService()\\n\\tuser = user_service.create_user('test', 'password')\\n\\tassert user == {'username': 'test'}\\n\\n\\texisting_user = user_service.create_user('test', 'password')\\n\\tassert existing_user == 'Username already exists'\\n\\n\\turls = user_service.get_user_urls('test')\\n\\tassert urls == []\\n\\n\\tinvalid_user = user_service.get_user_urls('invalid')\\n\\tassert invalid_user == 'User not found'\"\n    },\n    {\n      \"file_path\": \"test_admin_service.py\",\n      \"file_contents\": \"import pytest\\nfrom services.url_shortener import URLShortener\\nfrom services.user_service import UserService\\nfrom services.admin_service import AdminService\\n\\n\\ndef test_admin_service():\\n\\turl_shortener = URLShortener()\\n\\tuser_service = UserService()\\n\\tadmin_service = AdminService(url_shortener, user_service)\\n\\n\\turl_shortener.shorten('https://www.google.com')\\n\\tassert len(admin_service.get_all_urls()) == 1\\n\\n\\tuser_service.create_user('test', 'password')\\n\\tassert admin_service.delete_user('test') == 'User deleted'\\n\\tassert admin_service.delete_user('invalid') == 'User not found'\\n\\n\\tassert admin_service.delete_url('invalid') == 'URL not found'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"completion_tokens": 1662, "prompt_tokens": 1342, "total_tokens": 3004}}]