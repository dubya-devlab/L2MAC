[{"id": "chatcmpl-8Kl62AdNROODUAiqUg02TXDj3mD58", "object": "chat.completion", "created": 1699958290, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n# Mock database\\nDB = {\\n\\t'users': {},\\n\\t'recipes': {},\\n\\t'ratings': {},\\n\\t'reviews': {},\\n\\t'admins': {}\\n}\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list = []\\n\\tfollowing: list = []\\n\\tinterests: list = []\\n\\n\\t@classmethod\\n\\tdef create(cls, username, password):\\n\\t\\tid = len(DB['users']) + 1\\n\\t\\tuser = cls(id, username, password)\\n\\t\\tDB['users'][id] = user\\n\\t\\treturn user\\n\\n\\tdef change_password(self, new_password):\\n\\t\\tself.password = new_password\\n\\n\\tdef save_favorite(self, recipe_id):\\n\\t\\tself.favorites.append(recipe_id)\\n\\n\\tdef follow(self, user_id):\\n\\t\\tself.following.append(user_id)\\n\\n\\tdef add_interest(self, interest):\\n\\t\\tself.interests.append(interest)\\n\\n\\tdef get_feed(self):\\n\\t\\t# Mock implementation\\n\\t\\treturn {'recent_activity': []}\\n\\n\\tdef get_recommendations(self):\\n\\t\\t# Mock implementation\\n\\t\\treturn []\\n\\n\\tdef get_notifications(self):\\n\\t\\t# Mock implementation\\n\\t\\treturn []\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list = []\\n\\n\\t@classmethod\\n\\tdef create(cls, title, ingredients, instructions, image, categories=[]):\\n\\t\\tid = len(DB['recipes']) + 1\\n\\t\\trecipe = cls(id, title, ingredients, instructions, image, categories)\\n\\t\\tDB['recipes'][id] = recipe\\n\\t\\treturn recipe\\n\\n\\tdef edit(self, new_data):\\n\\t\\tfor key, value in new_data.items():\\n\\t\\t\\tsetattr(self, key, value)\\n\\n\\tdef delete(self):\\n\\t\\tDB['recipes'].pop(self.id)\\n\\n@dataclass\\nclass Rating:\\n\\tid: int\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\t@classmethod\\n\\tdef submit_rating(cls, recipe_id, rating):\\n\\t\\tid = len(DB['ratings']) + 1\\n\\t\\trating = cls(id, recipe_id, rating)\\n\\t\\tDB['ratings'][id] = rating\\n\\t\\treturn rating\\n\\n\\t@classmethod\\n\\tdef get_average_rating(cls, recipe_id):\\n\\t\\t# Mock implementation\\n\\t\\treturn 5.0\\n\\n@dataclass\\nclass Review:\\n\\tid: int\\n\\trecipe_id: int\\n\\ttext: str\\n\\n\\t@classmethod\\n\\tdef submit_review(cls, recipe_id, text):\\n\\t\\tid = len(DB['reviews']) + 1\\n\\t\\treview = cls(id, recipe_id, text)\\n\\t\\tDB['reviews'][id] = review\\n\\t\\treturn review\\n\\n\\t@classmethod\\n\\tdef get_reviews(cls, recipe_id):\\n\\t\\t# Mock implementation\\n\\t\\treturn []\\n\\n@dataclass\\nclass Admin:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\n\\t@classmethod\\n\\tdef create(cls, username, password):\\n\\t\\tid = len(DB['admins']) + 1\\n\\t\\tadmin = cls(id, username, password)\\n\\t\\tDB['admins'][id] = admin\\n\\t\\treturn admin\\n\\n\\tdef edit_recipe(self, recipe_id, new_data):\\n\\t\\trecipe = DB['recipes'][recipe_id]\\n\\t\\trecipe.edit(new_data)\\n\\n\\tdef remove_recipe(self, recipe_id):\\n\\t\\tDB['recipes'].pop(recipe_id)\\n\\n\\tdef get_site_statistics(self):\\n\\t\\t# Mock implementation\\n\\t\\treturn {'total_users': len(DB['users']), 'total_recipes': len(DB['recipes'])}\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform/test_models.py\",\n      \"file_contents\": \"import pytest\\nfrom recipe_platform.models import User, Recipe, Rating, Review, Admin\\n\\n# Test User model\\ndef test_user_creation():\\n\\tuser = User.create('user1', 'pass1')\\n\\tassert user.username == 'user1'\\n\\tassert user.password == 'pass1'\\n\\n# Test Recipe model\\ndef test_recipe_creation():\\n\\trecipe = Recipe.create('recipe1', ['ingredient1'], 'instructions1', 'image1')\\n\\tassert recipe.title == 'recipe1'\\n\\n# Test Rating model\\ndef test_rating_submission():\\n\\trating = Rating.submit_rating(1, 5)\\n\\tassert rating.recipe_id == 1\\n\\tassert rating.rating == 5\\n\\n# Test Review model\\ndef test_review_submission():\\n\\treview = Review.submit_review(1, 'Great recipe!')\\n\\tassert review.recipe_id == 1\\n\\tassert review.text == 'Great recipe!'\\n\\n# Test Admin model\\ndef test_admin_creation():\\n\\tadmin = Admin.create('admin1', 'pass1')\\n\\tassert admin.username == 'admin1'\\n\\tassert admin.password == 'pass1'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 1184, "total_tokens": 3733}}]