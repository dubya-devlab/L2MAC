[{"id": "chatcmpl-8Kg4RDzs1W1tsrHQMjORNuCnTqn4k", "object": "chat.completion", "created": 1699938971, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tsubmitted_recipes: list\\n\\tfollowing: list\\n\\n\\tdef change_password(self, new_password):\\n\\t\\tself.password = new_password\\n\\n\\tdef save_favorite(self, recipe_id):\\n\\t\\tself.favorites.append(recipe_id)\\n\\n\\tdef follow(self, user_id):\\n\\t\\tself.following.append(user_id)\\n\\n\\n@dataclass\\nclass Admin(User):\\n\\tdef edit_recipe(self, recipe_id, new_data):\\n\\t\\t# Admin can edit any recipe\\n\\t\\tpass\\n\\n\\tdef remove_recipe(self, recipe_id):\\n\\t\\t# Admin can remove any recipe\\n\\t\\tpass\\n\\n\\tdef get_site_statistics(self):\\n\\t\\t# Admin can get site usage statistics\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\tdef edit(self, new_data):\\n\\t\\t# Edit recipe details\\n\\t\\tpass\\n\\n\\tdef delete(self):\\n\\t\\t# Delete the recipe\\n\\t\\tpass\\n\\n\\tdef is_valid(self):\\n\\t\\t# Validate recipe format\\n\\t\\tpass\\n\\n\\tdef has_valid_categories(self):\\n\\t\\t# Validate recipe categories\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeRating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\t@staticmethod\\n\\tdef submit_rating(recipe_id, rating):\\n\\t\\t# Submit a new rating for a recipe\\n\\t\\tpass\\n\\n\\t@staticmethod\\n\\tdef get_average_rating(recipe_id):\\n\\t\\t# Get the average rating of a recipe\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeReview:\\n\\trecipe_id: int\\n\\treview: str\\n\\n\\t@staticmethod\\n\\tdef submit_review(recipe_id, review):\\n\\t\\t# Submit a new review for a recipe\\n\\t\\tpass\\n\\n\\t@staticmethod\\n\\tdef get_reviews(recipe_id):\\n\\t\\t# Get all reviews of a recipe\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeSharing:\\n\\trecipe_id: int\\n\\tplatform: str\\n\\n\\t@staticmethod\\n\\tdef share(recipe_id, platform):\\n\\t\\t# Share a recipe on a social media platform\\n\\t\\tpass\"\n    },\n    {\n      \"file_path\": \"recipe_platform/database.py\",\n      \"file_contents\": \"from .models import User, Admin, Recipe, RecipeRating, RecipeReview, RecipeSharing\\n\\n\\n# Mock database\\nusers = {}\\nadmins = {}\\nrecipes = {}\\nrecipe_ratings = {}\\nrecipe_reviews = {}\\nrecipe_shares = {}\\n\\n\\ndef get_user_by_username(username):\\n\\treturn users.get(username)\\n\\n\\ndef get_admin_by_username(username):\\n\\treturn admins.get(username)\\n\\n\\ndef get_recipe_by_id(recipe_id):\\n\\treturn recipes.get(recipe_id)\\n\\n\\ndef get_recipe_ratings_by_id(recipe_id):\\n\\treturn recipe_ratings.get(recipe_id)\\n\\n\\ndef get_recipe_reviews_by_id(recipe_id):\\n\\treturn recipe_reviews.get(recipe_id)\\n\\n\\ndef get_recipe_shares_by_id(recipe_id):\\n\\treturn recipe_shares.get(recipe_id)\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform/test_models.py\",\n      \"file_contents\": \"import pytest\\nfrom recipe_platform.models import User, Admin, Recipe, RecipeRating, RecipeReview, RecipeSharing\\n\\n\\ndef test_user():\\n\\tuser = User(id=1, username='user1', password='pass1', favorites=[], submitted_recipes=[], following=[])\\n\\tassert user.username == 'user1'\\n\\n\\ndef test_admin():\\n\\tadmin = Admin(id=1, username='admin1', password='pass1', favorites=[], submitted_recipes=[], following=[])\\n\\tassert admin.username == 'admin1'\\n\\n\\ndef test_recipe():\\n\\trecipe = Recipe(id=1, title='recipe1', ingredients=['ingredient1'], instructions='instructions1', image='image1', categories=['category1'])\\n\\tassert recipe.title == 'recipe1'\\n\\n\\ndef test_recipe_rating():\\n\\trating = RecipeRating(recipe_id=1, rating=5)\\n\\tassert rating.rating == 5\\n\\n\\ndef test_recipe_review():\\n\\treview = RecipeReview(recipe_id=1, review='review1')\\n\\tassert review.review == 'review1'\\n\\n\\ndef test_recipe_sharing():\\n\\tsharing = RecipeSharing(recipe_id=1, platform='platform1')\\n\\tassert sharing.platform == 'platform1'\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform/test_database.py\",\n      \"file_contents\": \"import pytest\\nfrom recipe_platform.database import get_user_by_username, get_admin_by_username, get_recipe_by_id, get_recipe_ratings_by_id, get_recipe_reviews_by_id, get_recipe_shares_by_id\\n\\n\\ndef test_get_user_by_username():\\n\\tuser = get_user_by_username('user1')\\n\\tassert user is not None\\n\\n\\ndef test_get_admin_by_username():\\n\\tadmin = get_admin_by_username('admin1')\\n\\tassert admin is not None\\n\\n\\ndef test_get_recipe_by_id():\\n\\trecipe = get_recipe_by_id(1)\\n\\tassert recipe is not None\\n\\n\\ndef test_get_recipe_ratings_by_id():\\n\\tratings = get_recipe_ratings_by_id(1)\\n\\tassert ratings is not None\\n\\n\\ndef test_get_recipe_reviews_by_id():\\n\\treviews = get_recipe_reviews_by_id(1)\\n\\tassert reviews is not None\\n\\n\\ndef test_get_recipe_shares_by_id():\\n\\tshares = get_recipe_shares_by_id(1)\\n\\tassert shares is not None\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 1316, "total_tokens": 3865}}]