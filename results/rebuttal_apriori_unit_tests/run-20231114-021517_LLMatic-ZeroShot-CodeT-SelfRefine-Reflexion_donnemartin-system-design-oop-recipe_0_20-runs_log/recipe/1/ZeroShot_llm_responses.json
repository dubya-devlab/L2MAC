[{"id": "chatcmpl-8KiPC7O8Omc3fwc9c3Vt5AlqyckGu", "object": "chat.completion", "created": 1699947946, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list = []\\n\\tfollowing: list = []\\n\\tinterests: list = []\\n\\n\\t@classmethod\\n\\tdef create(cls, username, password):\\n\\t\\tid = len(DB.get('users', [])) + 1\\n\\t\\tuser = cls(id, username, password)\\n\\t\\tDB.setdefault('users', []).append(user)\\n\\t\\treturn user\\n\\n\\t@classmethod\\n\\tdef get_by_username(cls, username):\\n\\t\\tfor user in DB.get('users', []):\\n\\t\\t\\tif user.username == username:\\n\\t\\t\\t\\treturn user\\n\\n\\tdef change_password(self, new_password):\\n\\t\\tself.password = new_password\\n\\n\\tdef save_favorite(self, recipe_id):\\n\\t\\tself.favorites.append(recipe_id)\\n\\n\\tdef follow(self, user_id):\\n\\t\\tself.following.append(user_id)\\n\\n\\tdef add_interest(self, interest):\\n\\t\\tself.interests.append(interest)\\n\\n\\tdef get_notifications(self):\\n\\t\\t# Mock implementation\\n\\t\\treturn ['new_{}_recipe'.format(interest) for interest in self.interests]\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list = []\\n\\n\\t@classmethod\\n\\tdef create(cls, title, ingredients, instructions, image, categories=[]):\\n\\t\\tid = len(DB.get('recipes', [])) + 1\\n\\t\\trecipe = cls(id, title, ingredients, instructions, image, categories)\\n\\t\\tDB.setdefault('recipes', []).append(recipe)\\n\\t\\treturn recipe\\n\\n\\t@classmethod\\n\\tdef get_by_id(cls, id):\\n\\t\\tfor recipe in DB.get('recipes', []):\\n\\t\\t\\tif recipe.id == id:\\n\\t\\t\\t\\treturn recipe\\n\\n\\tdef edit(self, title=None, ingredients=None, instructions=None, image=None, categories=None):\\n\\t\\tif title:\\n\\t\\t\\tself.title = title\\n\\t\\tif ingredients:\\n\\t\\t\\tself.ingredients = ingredients\\n\\t\\tif instructions:\\n\\t\\t\\tself.instructions = instructions\\n\\t\\tif image:\\n\\t\\t\\tself.image = image\\n\\t\\tif categories:\\n\\t\\t\\tself.categories = categories\\n\\n\\tdef delete(self):\\n\\t\\tDB['recipes'].remove(self)\\n\\n\\t@classmethod\\n\\tdef search(cls, query):\\n\\t\\treturn [recipe for recipe in DB.get('recipes', []) if query in recipe.title]\\n\\n\\t@classmethod\\n\\tdef search_by_category(cls, category):\\n\\t\\treturn [recipe for recipe in DB.get('recipes', []) if category in recipe.categories]\\n\\n@dataclass\\nclass Rating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\t@classmethod\\n\\tdef submit_rating(cls, recipe_id, rating):\\n\\t\\tDB.setdefault('ratings', []).append(cls(recipe_id, rating))\\n\\n\\t@classmethod\\n\\tdef get_average_rating(cls, recipe_id):\\n\\t\\trecipe_ratings = [rating.rating for rating in DB.get('ratings', []) if rating.recipe_id == recipe_id]\\n\\t\\treturn sum(recipe_ratings) / len(recipe_ratings) if recipe_ratings else 0\\n\\n@dataclass\\nclass Review:\\n\\trecipe_id: int\\n\\ttext: str\\n\\n\\t@classmethod\\n\\tdef submit_review(cls, recipe_id, text):\\n\\t\\tDB.setdefault('reviews', []).append(cls(recipe_id, text))\\n\\n\\t@classmethod\\n\\tdef get_reviews(cls, recipe_id):\\n\\t\\treturn [review for review in DB.get('reviews', []) if review.recipe_id == recipe_id]\\n\\n@dataclass\\nclass Admin(User):\\n\\tdef edit_recipe(self, recipe_id, new_data):\\n\\t\\trecipe = Recipe.get_by_id(recipe_id)\\n\\t\\tif recipe:\\n\\t\\t\\trecipe.edit(**new_data)\\n\\n\\tdef remove_recipe(self, recipe_id):\\n\\t\\trecipe = Recipe.get_by_id(recipe_id)\\n\\t\\tif recipe:\\n\\t\\t\\trecipe.delete()\\n\\n\\tdef get_site_statistics(self):\\n\\t\\t# Mock implementation\\n\\t\\treturn {\\n\\t\\t\\t'total_users': len(DB.get('users', [])),\\n\\t\\t\\t'total_recipes': len(DB.get('recipes', []))\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform/test_models.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\n\\nfrom recipe_platform.models import User, Recipe, Rating, Review, Admin\\n\\n\\ndef test_user_creation():\\n\\tuser = User.create('user1', 'pass1')\\n\\tassert user.username == 'user1'\\n\\tassert user.password == 'pass1'\\n\\n\\ndef test_recipe_creation():\\n\\trecipe = Recipe.create('recipe1', ['ingredient1'], 'instructions1', 'image1')\\n\\tassert recipe.title == 'recipe1'\\n\\tassert recipe.ingredients == ['ingredient1']\\n\\tassert recipe.instructions == 'instructions1'\\n\\tassert recipe.image == 'image1'\\n\\n\\ndef test_rating_submission():\\n\\tRating.submit_rating(1, 5)\\n\\tassert Rating.get_average_rating(1) == 5\\n\\n\\ndef test_review_submission():\\n\\tReview.submit_review(1, 'Great recipe!')\\n\\tassert Review.get_reviews(1)[0].text == 'Great recipe!'\\n\\n\\ndef test_admin_functions():\\n\\tadmin = Admin.create('admin1', 'pass1')\\n\\tadmin.edit_recipe(1, {'title': 'new title'})\\n\\trecipe = Recipe.get_by_id(1)\\n\\tassert recipe.title == 'new title'\\n\\tadmin.remove_recipe(1)\\n\\tassert Recipe.get_by_id(1) is None\\n\\tstats = admin.get_site_statistics()\\n\\tassert 'total_users' in stats\\n\\tassert 'total_recipes' in stats\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 1367, "total_tokens": 3916}}]