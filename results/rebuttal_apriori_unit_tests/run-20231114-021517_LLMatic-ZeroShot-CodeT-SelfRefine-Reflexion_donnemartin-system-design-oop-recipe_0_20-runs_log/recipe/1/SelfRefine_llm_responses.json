[{"id": "chatcmpl-8Kj32XLkgkstBaFomFYisUg1rDKbS", "object": "chat.completion", "created": 1699950416, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tsubmitted_recipes: list\\n\\tfollowing: list\\n\\n\\n@dataclass\\nclass Admin(User):\\n\\tpass\\n\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\n@dataclass\\nclass Rating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\n@dataclass\\nclass Review:\\n\\trecipe_id: int\\n\\treview: str\\n\\n\\n@dataclass\\nclass Activity:\\n\\tuser_id: int\\n\\tactivity_type: str\\n\\tactivity_data: dict\"\n    },\n    {\n      \"file_path\": \"recipe_platform/database.py\",\n      \"file_contents\": \"from .models import User, Admin, Recipe, Rating, Review, Activity\\n\\n\\n# Mock database\\nusers = {}\\nadmins = {}\\nrecipes = {}\\nratings = {}\\nreviews = {}\\nactivities = {}\\n\\n\\n# User related operations\\n\\ndef create_user(id, username, password):\\n\\tusers[id] = User(id, username, password, [], [], [])\\n\\n\\ndef get_user_by_username(username):\\n\\tfor user in users.values():\\n\\t\\tif user.username == username:\\n\\t\\t\\treturn user\\n\\n\\ndef save_favorite(user_id, recipe_id):\\n\\tusers[user_id].favorites.append(recipe_id)\\n\\n\\ndef follow(user_id, followee_id):\\n\\tusers[user_id].following.append(followee_id)\\n\\n\\n# Admin related operations\\n\\ndef create_admin(id, username, password):\\n\\tadmins[id] = Admin(id, username, password, [], [], [])\\n\\n\\ndef get_admin_by_username(username):\\n\\tfor admin in admins.values():\\n\\t\\tif admin.username == username:\\n\\t\\t\\treturn admin\\n\\n\\ndef edit_recipe(admin_id, recipe_id, new_data):\\n\\trecipe = recipes[recipe_id]\\n\\tfor key, value in new_data.items():\\n\\t\\tsetattr(recipe, key, value)\\n\\n\\ndef remove_recipe(admin_id, recipe_id):\\n\\tif recipe_id in recipes:\\n\\t\\tdel recipes[recipe_id]\\n\\n\\n# Recipe related operations\\n\\ndef create_recipe(id, title, ingredients, instructions, image, categories):\\n\\trecipes[id] = Recipe(id, title, ingredients, instructions, image, categories)\\n\\n\\ndef get_recipe_by_id(id):\\n\\treturn recipes.get(id)\\n\\n\\ndef search_recipes(query):\\n\\treturn [recipe for recipe in recipes.values() if query in recipe.title]\\n\\n\\ndef search_recipes_by_category(category):\\n\\treturn [recipe for recipe in recipes.values() if category in recipe.categories]\\n\\n\\n# Rating related operations\\n\\ndef submit_rating(recipe_id, rating):\\n\\tratings[recipe_id] = ratings.get(recipe_id, []) + [Rating(recipe_id, rating)]\\n\\n\\ndef get_average_rating(recipe_id):\\n\\trecipe_ratings = ratings.get(recipe_id, [])\\n\\treturn sum(rating.rating for rating in recipe_ratings) / len(recipe_ratings) if recipe_ratings else 0\\n\\n\\n# Review related operations\\n\\ndef submit_review(recipe_id, review):\\n\\treviews[recipe_id] = reviews.get(recipe_id, []) + [Review(recipe_id, review)]\\n\\n\\ndef get_reviews(recipe_id):\\n\\treturn reviews.get(recipe_id, [])\\n\\n\\n# Activity related operations\\n\\ndef add_activity(user_id, activity_type, activity_data):\\n\\tactivities[user_id] = activities.get(user_id, []) + [Activity(user_id, activity_type, activity_data)]\\n\\n\\ndef get_activities(user_id):\\n\\treturn activities.get(user_id, [])\"\n    },\n    {\n      \"file_path\": \"recipe_platform/routes.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom .database import *\\n\\n\\napp = Flask(__name__)\\n\\n\\n@app.route('/submit_recipe', methods=['POST'])\\ndef submit_recipe():\\n\\tdata = request.json\\n\\tcreate_recipe(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/edit_recipe/<int:recipe_id>', methods=['PUT'])\\ndef edit_recipe(recipe_id):\\n\\tdata = request.json\\n\\tedit_recipe(recipe_id, data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/delete_recipe/<int:recipe_id>', methods=['DELETE'])\\ndef delete_recipe(recipe_id):\\n\\tremove_recipe(recipe_id)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/search_recipe', methods=['GET'])\\ndef search_recipe():\\n\\tquery = request.args.get('query')\\n\\tresults = search_recipes(query)\\n\\treturn {'results': [recipe.__dict__ for recipe in results]}, 200\\n\\n\\n@app.route('/search_recipe_by_category', methods=['GET'])\\ndef search_recipe_by_category():\\n\\tcategory = request.args.get('category')\\n\\tresults = search_recipes_by_category(category)\\n\\treturn {'results': [recipe.__dict__ for recipe in results]}, 200\\n\\n\\n@app.route('/submit_rating', methods=['POST'])\\ndef submit_rating():\\n\\tdata = request.json\\n\\tsubmit_rating(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/submit_review', methods=['POST'])\\ndef submit_review():\\n\\tdata = request.json\\n\\tsubmit_review(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/get_reviews/<int:recipe_id>', methods=['GET'])\\ndef get_reviews(recipe_id):\\n\\treviews = get_reviews(recipe_id)\\n\\treturn {'reviews': [review.__dict__ for review in reviews]}, 200\\n\\n\\n@app.route('/get_average_rating/<int:recipe_id>', methods=['GET'])\\ndef get_average_rating(recipe_id):\\n\\taverage_rating = get_average_rating(recipe_id)\\n\\treturn {'average_rating': average_rating}, 200\\n\\n\\n@app.route('/follow/<int:followee_id>', methods=['POST'])\\ndef follow(followee_id):\\n\\tdata = request.json\\n\\tfollow(data['user_id'], followee_id)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/get_feed/<int:user_id>', methods=['GET'])\\ndef get_feed(user_id):\\n\\tactivities = get_activities(user_id)\\n\\treturn {'feed': [activity.__dict__ for activity in activities]}, 200\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\n\\nfrom recipe_platform.database import *\\n\\n\\ndef test_recipe_submission():\\n\\t# Generate random data for recipe submission\\n\\ttitle = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\\n\\tingredients = ['ingredient1', 'ingredient2']\\n\\tinstructions = 'Mix and cook'\\n\\timage = 'image_url'\\n\\tcategories = ['Italian', 'Gluten-Free']\\n\\n\\tcreate_recipe(1, title, ingredients, instructions, image, categories)\\n\\trecipe = get_recipe_by_id(1)\\n\\n\\tassert recipe.title == title\\n\\tassert recipe.ingredients == ingredients\\n\\tassert recipe.instructions == instructions\\n\\tassert recipe.image == image\\n\\tassert recipe.categories == categories\\n\\n\\ndef test_recipe_edit_delete():\\n\\tnew_title = 'New Title'\\n\\tedit_recipe(1, new_title)\\n\\trecipe = get_recipe_by_id(1)\\n\\tassert recipe.title == new_title\\n\\n\\tremove_recipe(1)\\n\\tassert get_recipe_by_id(1) is None\\n\\n\\ndef test_recipe_search():\\n\\tsearch_query = 'chocolate'\\n\\tcreate_recipe(2, search_query, [], '', '', [])\\n\\tsearch_result = search_recipes(search_query)\\n\\tassert all(search_query in recipe.title for recipe in search_result)\\n\\n\\ndef test_recipe_categorization_search():\\n\\tcategory = 'Vegan'\\n\\tcreate_recipe(3, '', [], '', '', [category])\\n\\tsearch_result = search_recipes_by_category(category)\\n\\tassert all(category in recipe.categories for recipe in search_result)\\n\\n\\ndef test_account_creation_management():\\n\\tuser_data = {'id': 1, 'username': 'user123', 'password': 'pass123'}\\n\\tcreate_user(**user_data)\\n\\tuser = get_user_by_username(user_data['username'])\\n\\tassert user.username == user_data['username']\\n\\tassert user.password == user_data['password']\\n\\n\\ndef test_save_favorite_recipes():\\n\\tuser_id = 1\\n\\trecipe_id = 2\\n\\tsave_favorite(user_id, recipe_id)\\n\\tuser = get_user_by_username('user123')\\n\\tassert recipe_id in user.favorites\\n\\n\\ndef test_recipe_rating():\\n\\trecipe_id = 2\\n\\trating = 5\\n\\tsubmit_rating(recipe_id, rating)\\n\\taverage_rating = get_average_rating(recipe_id)\\n\\tassert average_rating == rating\\n\\n\\ndef test_recipe_review():\\n\\trecipe_id = 2\\n\\treview = 'Great recipe!'\\n\\tsubmit_review(recipe_id, review)\\n\\treviews = get_reviews(recipe_id)\\n\\tassert any(r.review == review for r in reviews)\\n\\n\\ndef test_user_following():\\n\\tfollower_id = 1\\n\\tfollowee_id = 2\\n\\tcreate_user(followee_id, 'user2', 'pass2')\\n\\tfollow(follower_id, followee_id)\\n\\tfollower = get_user_by_username('user123')\\n\\tassert followee_id in follower.following\\n\\n\\ndef test_admin_manage_recipes():\\n\\tadmin_data = {'id': 1, 'username': 'admin1', 'password': 'adminpass'}\\n\\tcreate_admin(**admin_data)\\n\\tadmin = get_admin_by_username(admin_data['username'])\\n\\tassert admin.username == admin_data['username']\\n\\tassert admin.password == admin_data['password']\\n\\n\\trecipe_id = 3\\n\\tnew_data = {'title': 'Updated Title'}\\n\\tedit_recipe(admin.id, recipe_id, new_data)\\n\\trecipe = get_recipe_by_id(recipe_id)\\n\\tassert recipe.title == new_data['title']\\n\\n\\tremove_recipe(admin.id, recipe_id)\\n\\tassert get_recipe_by_id(recipe_id) is None\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 2325, "total_tokens": 4874}}, {"id": "chatcmpl-8Kj5KIcRHXvORnR9qPHyOStZ1lvPr", "object": "chat.completion", "created": 1699950558, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "The generated code uses a mock database implemented with Python dictionaries. While this is fine for a simple prototype, it's not suitable for a production application. The code could be improved by integrating a real database system, such as SQLite for a simple, file-based database, or a more robust system like PostgreSQL for larger applications. This would provide persistent storage, better performance, and more advanced features like transactions and indexing."}, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "usage": {"prompt_tokens": 3363, "completion_tokens": 82, "total_tokens": 3445}}, {"id": "chatcmpl-8Kj5X0yjnhy8KBjbQhKkmeCC6wEm6", "object": "chat.completion", "created": 1699950571, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "function_call", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tsubmitted_recipes: list\\n\\tfollowing: list\\n\\n\\n@dataclass\\nclass Admin(User):\\n\\tpass\\n\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\n@dataclass\\nclass Rating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\n@dataclass\\nclass Review:\\n\\trecipe_id: int\\n\\treview: str\\n\\n\\n@dataclass\\nclass Activity:\\n\\tuser_id: int\\n\\tactivity_type: str\\n\\tactivity_data: dict\"\n    },\n    {\n      \"file_path\": \"recipe_platform/database.py\",\n      \"file_contents\": \"from .models import User, Admin, Recipe, Rating, Review, Activity\\n\\n\\n# Mock database\\nusers = {}\\nadmins = {}\\nrecipes = {}\\nratings = {}\\nreviews = {}\\nactivities = {}\\n\\n\\n# User related operations\\n\\ndef create_user(id, username, password):\\n\\tusers[id] = User(id, username, password, [], [], [])\\n\\n\\ndef get_user_by_username(username):\\n\\tfor user in users.values():\\n\\t\\tif user.username == username:\\n\\t\\t\\treturn user\\n\\n\\ndef save_favorite(user_id, recipe_id):\\n\\tusers[user_id].favorites.append(recipe_id)\\n\\n\\ndef follow(user_id, followee_id):\\n\\tusers[user_id].following.append(followee_id)\\n\\n\\n# Admin related operations\\n\\ndef create_admin(id, username, password):\\n\\tadmins[id] = Admin(id, username, password, [], [], [])\\n\\n\\ndef get_admin_by_username(username):\\n\\tfor admin in admins.values():\\n\\t\\tif admin.username == username:\\n\\t\\t\\treturn admin\\n\\n\\ndef edit_recipe(admin_id, recipe_id, new_data):\\n\\trecipe = recipes[recipe_id]\\n\\tfor key, value in new_data.items():\\n\\t\\tsetattr(recipe, key, value)\\n\\n\\ndef remove_recipe(admin_id, recipe_id):\\n\\tif recipe_id in recipes:\\n\\t\\tdel recipes[recipe_id]\\n\\n\\n# Recipe related operations\\n\\ndef create_recipe(id, title, ingredients, instructions, image, categories):\\n\\trecipes[id] = Recipe(id, title, ingredients, instructions, image, categories)\\n\\n\\ndef get_recipe_by_id(id):\\n\\treturn recipes.get(id)\\n\\n\\ndef search_recipes(query):\\n\\treturn [recipe for recipe in recipes.values() if query in recipe.title]\\n\\n\\ndef search_recipes_by_category(category):\\n\\treturn [recipe for recipe in recipes.values() if category in recipe.categories]\\n\\n\\n# Rating related operations\\n\\ndef submit_rating(recipe_id, rating):\\n\\tratings[recipe_id] = ratings.get(recipe_id, []) + [Rating(recipe_id, rating)]\\n\\n\\ndef get_average_rating(recipe_id):\\n\\trecipe_ratings = ratings.get(recipe_id, [])\\n\\treturn sum(rating.rating for rating in recipe_ratings) / len(recipe_ratings) if recipe_ratings else 0\\n\\n\\n# Review related operations\\n\\ndef submit_review(recipe_id, review):\\n\\treviews[recipe_id] = reviews.get(recipe_id, []) + [Review(recipe_id, review)]\\n\\n\\ndef get_reviews(recipe_id):\\n\\treturn reviews.get(recipe_id, [])\\n\\n\\n# Activity related operations\\n\\ndef add_activity(user_id, activity_type, activity_data):\\n\\tactivities[user_id] = activities.get(user_id, []) + [Activity(user_id, activity_type, activity_data)]\\n\\n\\ndef get_activities(user_id):\\n\\treturn activities.get(user_id, [])\"\n    },\n    {\n      \"file_path\": \"recipe_platform/routes.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom .database import *\\n\\n\\napp = Flask(__name__)\\n\\n\\n@app.route('/submit_recipe', methods=['POST'])\\ndef submit_recipe():\\n\\tdata = request.json\\n\\tcreate_recipe(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/edit_recipe/<int:recipe_id>', methods=['PUT'])\\ndef edit_recipe(recipe_id):\\n\\tdata = request.json\\n\\tedit_recipe(1, recipe_id, data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/delete_recipe/<int:recipe_id>', methods=['DELETE'])\\ndef delete_recipe(recipe_id):\\n\\tremove_recipe(1, recipe_id)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/search_recipe', methods=['GET'])\\ndef search_recipe():\\n\\tquery = request.args.get('query')\\n\\tresults = search_recipes(query)\\n\\treturn {'results': [recipe.__dict__ for recipe in results]}, 200\\n\\n\\n@app.route('/search_recipe_by_category', methods=['GET'])\\ndef search_recipe_by_category():\\n\\tcategory = request.args.get('category')\\n\\tresults = search_recipes_by_category(category)\\n\\treturn {'results': [recipe.__dict__ for recipe in results]}, 200\\n\\n\\n@app.route('/submit_rating', methods=['POST'])\\ndef submit_rating():\\n\\tdata = request.json\\n\\tsubmit_rating(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/submit_review', methods=['POST'])\\ndef submit_review():\\n\\tdata = request.json\\n\\tsubmit_review(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/get_reviews/<int:recipe_id>', methods=['GET'])\\ndef get_reviews(recipe_id):\\n\\treviews = get_reviews(recipe_id)\\n\\treturn {'reviews': [review.__dict__ for review in reviews]}, 200\\n\\n\\n@app.route('/get_average_rating/<int:recipe_id>', methods=['GET'])\\ndef get_average_rating(recipe_id):\\n\\taverage_rating = get_average_rating(recipe_id)\\n\\treturn {'average_rating': average_rating}, 200\\n\\n\\n@app.route('/follow/<int:followee_id>', methods=['POST'])\\ndef follow(followee_id):\\n\\tdata = request.json\\n\\tfollow(data['user_id'], followee_id)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/get_feed/<int:user_id>', methods=['GET'])\\ndef get_feed(user_id):\\n\\tactivities = get_activities(user_id)\\n\\treturn {'feed': [activity.__dict__ for activity in activities]}, 200\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\n\\nfrom recipe_platform.database import *\\n\\n\\ndef test_recipe_submission():\\n\\t# Generate random data for recipe submission\\n\\ttitle = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\\n\\tingredients = ['ingredient1', 'ingredient2']\\n\\tinstructions = 'Mix and cook'\\n\\timage = 'image_url'\\n\\tcategories = ['Italian', 'Gluten-Free']\\n\\n\\tcreate_recipe(1, title, ingredients, instructions, image, categories)\\n\\trecipe = get_recipe_by_id(1)\\n\\n\\tassert recipe.title == title\\n\\tassert recipe.ingredients == ingredients\\n\\tassert recipe.instructions == instructions\\n\\tassert recipe.image == image\\n\\tassert recipe.categories == categories\\n\\n\\ndef test_recipe_edit_delete():\\n\\tnew_title = 'New Title'\\n\\tedit_recipe(1, 1, {'title': new_title})\\n\\trecipe = get_recipe_by_id(1)\\n\\tassert recipe.title == new_title\\n\\n\\tremove_recipe(1, 1)\\n\\tassert get_recipe_by_id(1) is None\\n\\n\\ndef test_recipe_search():\\n\\tsearch_query = 'chocolate'\\n\\tcreate_recipe(2, search_query, [], '', '', [])\\n\\tsearch_result = search_recipes(search_query)\\n\\tassert all(search_query in recipe.title for recipe in search_result)\\n\\n\\ndef test_recipe_categorization_search():\\n\\tcategory = 'Vegan'\\n\\tcreate_recipe(3, '', [], '', '', [category])\\n\\tsearch_result = search_recipes_by_category(category)\\n\\tassert all(category in recipe.categories for recipe in search_result)\\n\\n\\ndef test_account_creation_management():\\n\\tuser_data = {'id': 1, 'username': 'user123', 'password': 'pass123'}\\n\\tcreate_user(**user_data)\\n\\tuser = get_user_by_username(user_data['username'])\\n\\tassert user.username == user_data['username']\\n\\tassert user.password == user_data['password']\\n\\n\\ndef test_save_favorite_recipes():\\n\\tuser_id = 1\\n\\trecipe_id = 2\\n\\tsave_favorite(user_id, recipe_id)\\n\\tuser = get_user_by_username('user123')\\n\\tassert recipe_id in user.favorites\\n\\n\\ndef test_recipe_rating():\\n\\trecipe_id = 2\\n\\trating = 5\\n\\tsubmit_rating(recipe_id, rating)\\n\\taverage_rating = get_average_rating(recipe_id)\\n\\tassert average_rating == rating\\n\\n\\ndef test_recipe_review():\\n\\trecipe_id = 2\\n\\treview = 'Great recipe!'\\n\\tsubmit_review(recipe_id, review)\\n\\treviews = get_reviews(recipe_id)\\n\\tassert any(r.review == review for r in reviews)\\n\\n\\ndef test_user_following():\\n\\tfollower_id = 1\\n\\tfollowee_id = 2\\n\\tcreate_user(followee_id, 'user2', 'pass2')\\n\\tfollow(follower_id, followee_id)\\n\\tfollower = get_user_by_username('user123')\\n\\tassert followee_id in follower.following\\n\\n\\ndef test_admin_manage_recipes():\\n\\tadmin_data = {'id': 1, 'username': 'admin1', 'password': 'adminpass'}\\n\\tcreate_admin(**admin_data)\\n\\tadmin = get_admin_by_username(admin_data['username'])\\n\\tassert admin.username == admin_data['username']\\n\\tassert admin.password == admin_data['password']\\n\\n\\trecipe_id = 3\\n\\tnew_data = {'title': 'Updated Title'}\\n\\tedit_recipe(admin.id, recipe_id, new_data)\\n\\trecipe = get_recipe_by_id(recipe_id)\\n\\tassert recipe.title == new_data['title']\\n\\n\\tremove_recipe(admin.id, recipe_id)\\n\\tassert get_recipe_by_id(recipe_id) is None\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 3519, "completion_tokens": 2348, "total_tokens": 5867}}, {"id": "chatcmpl-8Kj8QVTQx2hLVcnwESEGd04nO3t41", "object": "chat.completion", "created": 1699950750, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "content": "The generated code has some function redefinition errors in the routes.py file. It seems like the function names in the Flask routes are not unique which is causing the issue. Each route should have a unique function name to avoid conflicts. This can be improved by ensuring that each route has a unique function name that accurately describes its functionality."}, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "usage": {"prompt_tokens": 6206, "completion_tokens": 66, "total_tokens": 6272}}, {"id": "chatcmpl-8Kj8V7sXYFXedEEyNfQ3SfG7Sm9ws", "object": "chat.completion", "created": 1699950755, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "length", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tsubmitted_recipes: list\\n\\tfollowing: list\\n\\n\\n@dataclass\\nclass Admin(User):\\n\\tpass\\n\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\n@dataclass\\nclass Rating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\n@dataclass\\nclass Review:\\n\\trecipe_id: int\\n\\treview: str\\n\\n\\n@dataclass\\nclass Activity:\\n\\tuser_id: int\\n\\tactivity_type: str\\n\\tactivity_data: dict\"\n    },\n    {\n      \"file_path\": \"recipe_platform/database.py\",\n      \"file_contents\": \"from .models import User, Admin, Recipe, Rating, Review, Activity\\n\\n\\n# Mock database\\nusers = {}\\nadmins = {}\\nrecipes = {}\\nratings = {}\\nreviews = {}\\nactivities = {}\\n\\n\\n# User related operations\\n\\ndef create_user(id, username, password):\\n\\tusers[id] = User(id, username, password, [], [], [])\\n\\n\\ndef get_user_by_username(username):\\n\\tfor user in users.values():\\n\\t\\tif user.username == username:\\n\\t\\t\\treturn user\\n\\n\\ndef save_favorite(user_id, recipe_id):\\n\\tusers[user_id].favorites.append(recipe_id)\\n\\n\\ndef follow(user_id, followee_id):\\n\\tusers[user_id].following.append(followee_id)\\n\\n\\n# Admin related operations\\n\\ndef create_admin(id, username, password):\\n\\tadmins[id] = Admin(id, username, password, [], [], [])\\n\\n\\ndef get_admin_by_username(username):\\n\\tfor admin in admins.values():\\n\\t\\tif admin.username == username:\\n\\t\\t\\treturn admin\\n\\n\\ndef edit_recipe(admin_id, recipe_id, new_data):\\n\\trecipe = recipes[recipe_id]\\n\\tfor key, value in new_data.items():\\n\\t\\tsetattr(recipe, key, value)\\n\\n\\ndef remove_recipe(admin_id, recipe_id):\\n\\tif recipe_id in recipes:\\n\\t\\tdel recipes[recipe_id]\\n\\n\\n# Recipe related operations\\n\\ndef create_recipe(id, title, ingredients, instructions, image, categories):\\n\\trecipes[id] = Recipe(id, title, ingredients, instructions, image, categories)\\n\\n\\ndef get_recipe_by_id(id):\\n\\treturn recipes.get(id)\\n\\n\\ndef search_recipes(query):\\n\\treturn [recipe for recipe in recipes.values() if query in recipe.title]\\n\\n\\ndef search_recipes_by_category(category):\\n\\treturn [recipe for recipe in recipes.values() if category in recipe.categories]\\n\\n\\n# Rating related operations\\n\\ndef submit_rating(recipe_id, rating):\\n\\tratings[recipe_id] = ratings.get(recipe_id, []) + [Rating(recipe_id, rating)]\\n\\n\\ndef get_average_rating(recipe_id):\\n\\trecipe_ratings = ratings.get(recipe_id, [])\\n\\treturn sum(rating.rating for rating in recipe_ratings) / len(recipe_ratings) if recipe_ratings else 0\\n\\n\\n# Review related operations\\n\\ndef submit_review(recipe_id, review):\\n\\treviews[recipe_id] = reviews.get(recipe_id, []) + [Review(recipe_id, review)]\\n\\n\\ndef get_reviews(recipe_id):\\n\\treturn reviews.get(recipe_id, [])\\n\\n\\n# Activity related operations\\n\\ndef add_activity(user_id, activity_type, activity_data):\\n\\tactivities[user_id] = activities.get(user_id, []) + [Activity(user_id, activity_type, activity_data)]\\n\\n\\ndef get_activities(user_id):\\n\\treturn activities.get(user_id, [])\"\n    },\n    {\n      \"file_path\": \"recipe_platform/routes.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom .database import *\\n\\n\\napp = Flask(__name__)\\n\\n\\n@app.route('/submit_recipe', methods=['POST'])\\ndef submit_recipe_route():\\n\\tdata = request.json\\n\\tcreate_recipe(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/edit_recipe/<int:recipe_id>', methods=['PUT'])\\ndef edit_recipe_route(recipe_id):\\n\\tdata = request.json\\n\\tedit_recipe(1, recipe_id, data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/delete_recipe/<int:recipe_id>', methods=['DELETE'])\\ndef delete_recipe_route(recipe_id):\\n\\tremove_recipe(1, recipe_id)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/search_recipe', methods=['GET'])\\ndef search_recipe_route():\\n\\tquery = request.args.get('query')\\n\\tresults = search_recipes(query)\\n\\treturn {'results': [recipe.__dict__ for recipe in results]}, 200\\n\\n\\n@app.route('/search_recipe_by_category', methods=['GET'])\\ndef search_recipe_by_category_route():\\n\\tcategory = request.args.get('category')\\n\\tresults = search_recipes_by_category(category)\\n\\treturn {'results': [recipe.__dict__ for recipe in results]}, 200\\n\\n\\n@app.route('/submit_rating', methods=['POST'])\\ndef submit_rating_route():\\n\\tdata = request.json\\n\\tsubmit_rating(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/submit_review', methods=['POST'])\\ndef submit_review_route():\\n\\tdata = request.json\\n\\tsubmit_review(**data)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/get_reviews/<int:recipe_id>', methods=['GET'])\\ndef get_reviews_route(recipe_id):\\n\\treviews = get_reviews(recipe_id)\\n\\treturn {'reviews': [review.__dict__ for review in reviews]}, 200\\n\\n\\n@app.route('/get_average_rating/<int:recipe_id>', methods=['GET'])\\ndef get_average_rating_route(recipe_id):\\n\\taverage_rating = get_average_rating(recipe_id)\\n\\treturn {'average_rating': average_rating}, 200\\n\\n\\n@app.route('/follow/<int:followee_id>', methods=['POST'])\\ndef follow_route(followee_id):\\n\\tdata = request.json\\n\\tfollow(data['user_id'], followee_id)\\n\\treturn {'status': 'success'}, 200\\n\\n\\n@app.route('/get_feed/<int:user_id>', methods=['GET'])\\ndef get_feed_route(user_id):\\n\\tactivities = get_activities(user_id)\\n\\treturn {'feed': [activity.__dict__ for activity in activities]}, 200\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\n\\nfrom recipe_platform.database import *\\n\\n\\ndef test_recipe_submission():\\n\\t# Generate random data for recipe submission\\n\\ttitle = ''.join(random.choices(string.ascii_uppercase + string.digits, k=10))\\n\\tingredients = ['ingredient1', 'ingredient2']\\n\\tinstructions = 'Mix and cook'\\n\\timage = 'image_url'\\n\\tcategories = ['Italian', 'Gluten-Free']\\n\\n\\tcreate_recipe(1, title, ingredients, instructions, image, categories)\\n\\trecipe = get_recipe_by_id(1)\\n\\n\\tassert recipe.title == title\\n\\tassert recipe.ingredients == ingredients\\n\\tassert recipe.instructions == instructions\\n\\tassert recipe.image == image\\n\\tassert recipe.categories == categories\\n\\n\\ndef test_recipe_edit_delete():\\n\\tnew_title = 'New Title'\\n\\tedit_recipe(1, 1, {'title': new_title})\\n\\trecipe = get_recipe_by_id(1)\\n\\tassert recipe.title == new_title\\n\\n\\tremove_recipe(1, 1)\\n\\tassert get_recipe_by_id(1) is None\\n\\n\\ndef test_recipe_search():\\n\\tsearch_query = 'chocolate'\\n\\tcreate_recipe(2, search_query, [], '', '', [])\\n\\tsearch_result = search_recipes(search_query)\\n\\tassert all(search_query in recipe.title for recipe in search_result)\\n\\n\\ndef test_recipe_categorization_search():\\n\\tcategory = 'Vegan'\\n\\tcreate_recipe(3, '', [], '', '', [category])\\n\\tsearch_result = search"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 6346, "completion_tokens": 1847, "total_tokens": 8193}}]