[{"id": "chatcmpl-8KiahSsOVZ35fbH3cdu5eBWrrnUR5", "object": "chat.completion", "created": 1699948659, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tfollowing: list\\n\\tsubmitted_recipes: list\\n\\n\\tdef change_password(self, new_password):\\n\\t\\tself.password = new_password\\n\\n\\tdef save_favorite(self, recipe_id):\\n\\t\\tself.favorites.append(recipe_id)\\n\\n\\tdef follow(self, user_id):\\n\\t\\tself.following.append(user_id)\\n\\n\\n@dataclass\\nclass Admin(User):\\n\\tdef edit_recipe(self, recipe_id, new_data):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a database.\\n\\t\\tpass\\n\\n\\tdef remove_recipe(self, recipe_id):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a database.\\n\\t\\tpass\\n\\n\\tdef get_site_statistics(self):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a database.\\n\\t\\treturn {'total_users': 0, 'total_recipes': 0}\\n\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\tdef edit(self, new_data):\\n\\t\\tfor key, value in new_data.items():\\n\\t\\t\\tsetattr(self, key, value)\\n\\n\\tdef delete(self):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a database.\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeRating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\t@staticmethod\\n\\tdef get_average_rating(recipe_id):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a database.\\n\\t\\treturn 5.0\\n\\n\\n@dataclass\\nclass RecipeReview:\\n\\trecipe_id: int\\n\\treview: str\\n\\n\\t@staticmethod\\n\\tdef get_reviews(recipe_id):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a database.\\n\\t\\treturn []\\n\\n\\n@dataclass\\nclass RecipeSharing:\\n\\trecipe_id: int\\n\\tplatform: str\\n\\n\\t@staticmethod\\n\\tdef share(recipe_id, platform):\\n\\t\\t# This is a placeholder. In a real scenario, this would interact with a social media API.\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform/test_models.py\",\n      \"file_contents\": \"import pytest\\nfrom recipe_platform.models import User, Admin, Recipe, RecipeRating, RecipeReview, RecipeSharing\\n\\n\\ndef test_user_creation():\\n\\tuser = User(id=1, username='user1', password='pass1', favorites=[], following=[], submitted_recipes=[])\\n\\tassert user.username == 'user1'\\n\\n\\ndef test_admin_creation():\\n\\tadmin = Admin(id=1, username='admin1', password='pass1', favorites=[], following=[], submitted_recipes=[])\\n\\tassert admin.username == 'admin1'\\n\\n\\ndef test_recipe_creation():\\n\\trecipe = Recipe(id=1, title='recipe1', ingredients=['ingredient1'], instructions='instructions1', image='image1', categories=['category1'])\\n\\tassert recipe.title == 'recipe1'\\n\\n\\ndef test_recipe_rating_creation():\\n\\trating = RecipeRating(recipe_id=1, rating=5)\\n\\tassert rating.rating == 5\\n\\n\\ndef test_recipe_review_creation():\\n\\treview = RecipeReview(recipe_id=1, review='review1')\\n\\tassert review.review == 'review1'\\n\\n\\ndef test_recipe_sharing_creation():\\n\\tsharing = RecipeSharing(recipe_id=1, platform='platform1')\\n\\tassert sharing.platform == 'platform1'\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 886, "total_tokens": 3435}}, {"id": "chatcmpl-8KitexDqHstHL69jQX4WDdKooFzpR", "object": "chat.completion", "created": 1699949834, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tfollowing: list\\n\\tsubmitted_recipes: list\\n\\n\\t@classmethod\\n\\tdef create(cls, username, password):\\n\\t\\tuser_id = len(DB.get('users', [])) + 1\\n\\t\\tuser = cls(id=user_id, username=username, password=password, favorites=[], following=[], submitted_recipes=[])\\n\\t\\tDB.setdefault('users', []).append(user)\\n\\t\\treturn user\\n\\n\\tdef change_password(self, new_password):\\n\\t\\tself.password = new_password\\n\\n\\tdef save_favorite(self, recipe_id):\\n\\t\\tself.favorites.append(recipe_id)\\n\\n\\tdef follow(self, user_id):\\n\\t\\tself.following.append(user_id)\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\t@classmethod\\n\\tdef create(cls, title, ingredients, instructions, image, categories):\\n\\t\\trecipe_id = len(DB.get('recipes', [])) + 1\\n\\t\\trecipe = cls(id=recipe_id, title=title, ingredients=ingredients, instructions=instructions, image=image, categories=categories)\\n\\t\\tDB.setdefault('recipes', []).append(recipe)\\n\\t\\treturn recipe\\n\\n\\tdef edit(self, new_data):\\n\\t\\tfor key, value in new_data.items():\\n\\t\\t\\tsetattr(self, key, value)\\n\\n\\tdef delete(self):\\n\\t\\tDB['recipes'].remove(self)\\n\\n@dataclass\\nclass Rating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\t@classmethod\\n\\tdef submit_rating(cls, recipe_id, rating):\\n\\t\\tnew_rating = cls(recipe_id=recipe_id, rating=rating)\\n\\t\\tDB.setdefault('ratings', []).append(new_rating)\\n\\n@dataclass\\nclass Review:\\n\\trecipe_id: int\\n\\ttext: str\\n\\n\\t@classmethod\\n\\tdef submit_review(cls, recipe_id, text):\\n\\t\\tnew_review = cls(recipe_id=recipe_id, text=text)\\n\\t\\tDB.setdefault('reviews', []).append(new_review)\\n\\n@dataclass\\nclass Admin:\\n\\tusername: str\\n\\n\\tdef edit_recipe(self, recipe_id, new_data):\\n\\t\\trecipe = next((r for r in DB['recipes'] if r.id == recipe_id), None)\\n\\t\\tif recipe:\\n\\t\\t\\trecipe.edit(new_data)\\n\\n\\tdef remove_recipe(self, recipe_id):\\n\\t\\trecipe = next((r for r in DB['recipes'] if r.id == recipe_id), None)\\n\\t\\tif recipe:\\n\\t\\t\\trecipe.delete()\\n\\n\\tdef get_site_statistics(self):\\n\\t\\treturn {\\n\\t\\t\\t'total_users': len(DB.get('users', [])),\\n\\t\\t\\t'total_recipes': len(DB.get('recipes', []))\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform/test_models.py\",\n      \"file_contents\": \"import pytest\\nfrom recipe_platform.models import User, Recipe, Rating, Review, Admin\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User.create(username='test', password='test')\\n\\n@pytest.fixture\\ndef recipe():\\n\\treturn Recipe.create(title='test', ingredients=['test'], instructions='test', image='test', categories=['test'])\\n\\n@pytest.fixture\\ndef admin():\\n\\treturn Admin(username='admin')\\n\\n\\ndef test_user_creation(user):\\n\\tassert user.username == 'test'\\n\\tassert user.password == 'test'\\n\\n\\ndef test_recipe_creation(recipe):\\n\\tassert recipe.title == 'test'\\n\\tassert 'test' in recipe.ingredients\\n\\tassert recipe.instructions == 'test'\\n\\tassert recipe.image == 'test'\\n\\tassert 'test' in recipe.categories\\n\\n\\ndef test_user_change_password(user):\\n\\tuser.change_password('new_password')\\n\\tassert user.password == 'new_password'\\n\\n\\ndef test_user_save_favorite(user, recipe):\\n\\tuser.save_favorite(recipe.id)\\n\\tassert recipe.id in user.favorites\\n\\n\\ndef test_user_follow(user):\\n\\tuser.follow(1)\\n\\tassert 1 in user.following\\n\\n\\ndef test_recipe_edit(recipe):\\n\\trecipe.edit({'title': 'new_title'})\\n\\tassert recipe.title == 'new_title'\\n\\n\\ndef test_recipe_delete(recipe):\\n\\trecipe.delete()\\n\\tassert recipe not in Recipe.DB['recipes']\\n\\n\\ndef test_rating_submission(recipe):\\n\\tRating.submit_rating(recipe.id, 5)\\n\\tassert any(r.recipe_id == recipe.id and r.rating == 5 for r in Rating.DB['ratings'])\\n\\n\\ndef test_review_submission(recipe):\\n\\tReview.submit_review(recipe.id, 'Great!')\\n\\tassert any(r.recipe_id == recipe.id and r.text == 'Great!' for r in Review.DB['reviews'])\\n\\n\\ndef test_admin_edit_recipe(admin, recipe):\\n\\tadmin.edit_recipe(recipe.id, {'title': 'admin_title'})\\n\\tassert recipe.title == 'admin_title'\\n\\n\\ndef test_admin_remove_recipe(admin, recipe):\\n\\tadmin.remove_recipe(recipe.id)\\n\\tassert recipe not in Recipe.DB['recipes']\\n\\n\\ndef test_admin_get_site_statistics(admin):\\n\\tstats = admin.get_site_statistics()\\n\\tassert 'total_users' in stats\\n\\tassert 'total_recipes' in stats\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 1246, "total_tokens": 3795}}, {"id": "chatcmpl-8Kj298iUyHtAEyEoezS2SNfz2xlCf", "object": "chat.completion", "created": 1699950361, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"recipe_platform/models.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\tpassword: str\\n\\tfavorites: list\\n\\tsubmitted_recipes: list\\n\\tfollowing: list\\n\\n\\tdef change_password(self, new_password):\\n\\t\\tself.password = new_password\\n\\n\\tdef save_favorite(self, recipe_id):\\n\\t\\tself.favorites.append(recipe_id)\\n\\n\\tdef follow(self, user_id):\\n\\t\\tself.following.append(user_id)\\n\\n\\n@dataclass\\nclass Admin(User):\\n\\tdef edit_recipe(self, recipe_id, new_data):\\n\\t\\t# Admin can edit any recipe\\n\\t\\tpass\\n\\n\\tdef remove_recipe(self, recipe_id):\\n\\t\\t# Admin can remove any recipe\\n\\t\\tpass\\n\\n\\tdef get_site_statistics(self):\\n\\t\\t# Admin can get site statistics\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass Recipe:\\n\\tid: int\\n\\ttitle: str\\n\\tingredients: list\\n\\tinstructions: str\\n\\timage: str\\n\\tcategories: list\\n\\n\\tdef edit(self, new_data):\\n\\t\\t# Edit recipe details\\n\\t\\tpass\\n\\n\\tdef delete(self):\\n\\t\\t# Delete the recipe\\n\\t\\tpass\\n\\n\\tdef is_valid(self):\\n\\t\\t# Validate recipe format\\n\\t\\tpass\\n\\n\\tdef has_valid_categories(self):\\n\\t\\t# Validate recipe categories\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeRating:\\n\\trecipe_id: int\\n\\trating: int\\n\\n\\t@staticmethod\\n\\tdef submit_rating(recipe_id, rating):\\n\\t\\t# Submit a new rating for a recipe\\n\\t\\tpass\\n\\n\\t@staticmethod\\n\\tdef get_average_rating(recipe_id):\\n\\t\\t# Get the average rating of a recipe\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeReview:\\n\\trecipe_id: int\\n\\treview: str\\n\\n\\t@staticmethod\\n\\tdef submit_review(recipe_id, review):\\n\\t\\t# Submit a new review for a recipe\\n\\t\\tpass\\n\\n\\t@staticmethod\\n\\tdef get_reviews(recipe_id):\\n\\t\\t# Get all reviews of a recipe\\n\\t\\tpass\\n\\n\\n@dataclass\\nclass RecipeSharing:\\n\\trecipe_id: int\\n\\tplatform: str\\n\\n\\t@staticmethod\\n\\tdef share(recipe_id, platform):\\n\\t\\t# Share a recipe on a social media platform\\n\\t\\tpass\"\n    },\n    {\n      \"file_path\": \"recipe_platform/__init__.py\",\n      \"file_contents\": \"from flask import Flask\\nfrom . import models\\n\\napp = Flask(__name__)\\n\\n@app.route('/')\\ndef hello_world():\\n\\treturn 'Hello, World!'\"\n    },\n    {\n      \"file_path\": \"test_recipe_platform.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\n\\nfrom recipe_platform.models import User, Admin, Recipe, RecipeRating, RecipeReview, RecipeSharing\\n\\n\\ndef test_user_creation():\\n\\tuser = User(id=1, username='user1', password='pass1', favorites=[], submitted_recipes=[], following=[])\\n\\tassert user.username == 'user1'\\n\\n\\ndef test_admin_creation():\\n\\tadmin = Admin(id=1, username='admin1', password='pass1', favorites=[], submitted_recipes=[], following=[])\\n\\tassert admin.username == 'admin1'\\n\\n\\ndef test_recipe_creation():\\n\\trecipe = Recipe(id=1, title='recipe1', ingredients=['ingredient1'], instructions='instructions1', image='image1', categories=['category1'])\\n\\tassert recipe.title == 'recipe1'\\n\\n\\ndef test_recipe_rating_creation():\\n\\trating = RecipeRating(recipe_id=1, rating=5)\\n\\tassert rating.rating == 5\\n\\n\\ndef test_recipe_review_creation():\\n\\treview = RecipeReview(recipe_id=1, review='review1')\\n\\tassert review.review == 'review1'\\n\\n\\ndef test_recipe_sharing_creation():\\n\\tsharing = RecipeSharing(recipe_id=1, platform='platform1')\\n\\tassert sharing.platform == 'platform1'\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2549, "completion_tokens": 944, "total_tokens": 3493}}]