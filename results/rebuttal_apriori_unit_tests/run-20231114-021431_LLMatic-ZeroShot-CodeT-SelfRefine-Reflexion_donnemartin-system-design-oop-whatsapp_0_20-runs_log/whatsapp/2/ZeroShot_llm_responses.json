[{"id": "chatcmpl-8KjEvLHYhy04TEjeEKVQloNTGO6mN", "object": "chat.completion", "created": 1699951153, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"auth_service.py\",\n      \"file_contents\": \"class AuthService:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef sign_up(self, email, password):\\n\\t\\tif email in self.users:\\n\\t\\t\\treturn False\\n\\t\\tself.users[email] = {'password': password}\\n\\t\\treturn True\\n\\n\\tdef recover_password(self, email):\\n\\t\\tif email not in self.users:\\n\\t\\t\\treturn False\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"user_service.py\",\n      \"file_contents\": \"class UserService:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef set_profile(self, user_id, picture_path, status_message):\\n\\t\\tself.users[user_id] = {'picture': picture_path, 'status': status_message}\\n\\t\\treturn True\\n\\n\\tdef set_privacy(self, user_id, privacy_settings):\\n\\t\\tif user_id not in self.users:\\n\\t\\t\\treturn False\\n\\t\\tself.users[user_id]['privacy'] = privacy_settings\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"contact_service.py\",\n      \"file_contents\": \"class ContactService:\\n\\tdef __init__(self):\\n\\t\\tself.contacts = {}\\n\\n\\tdef block_contact(self, user_id, contact_id):\\n\\t\\tif user_id not in self.contacts:\\n\\t\\t\\tself.contacts[user_id] = {'blocked': []}\\n\\t\\tself.contacts[user_id]['blocked'].append(contact_id)\\n\\t\\treturn True\\n\\n\\tdef unblock_contact(self, user_id, contact_id):\\n\\t\\tif user_id not in self.contacts or contact_id not in self.contacts[user_id]['blocked']:\\n\\t\\t\\treturn False\\n\\t\\tself.contacts[user_id]['blocked'].remove(contact_id)\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"group_service.py\",\n      \"file_contents\": \"class GroupService:\\n\\tdef __init__(self):\\n\\t\\tself.groups = {}\\n\\t\\tself.group_id_counter = 0\\n\\n\\tdef create_group(self, user_id, group_name):\\n\\t\\tself.group_id_counter += 1\\n\\t\\tself.groups[self.group_id_counter] = {'name': group_name, 'admin': user_id}\\n\\t\\treturn self.group_id_counter\\n\\n\\tdef edit_group(self, user_id, group_id, new_group_name):\\n\\t\\tif group_id not in self.groups or self.groups[group_id]['admin'] != user_id:\\n\\t\\t\\treturn False\\n\\t\\tself.groups[group_id]['name'] = new_group_name\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"message_service.py\",\n      \"file_contents\": \"class MessageService:\\n\\tdef __init__(self):\\n\\t\\tself.messages = {}\\n\\t\\tself.message_id_counter = 0\\n\\n\\tdef send_message(self, sender_id, receiver_id, message):\\n\\t\\tself.message_id_counter += 1\\n\\t\\tself.messages[self.message_id_counter] = {'sender': sender_id, 'receiver': receiver_id, 'content': message, 'read': False}\\n\\t\\treturn self.message_id_counter\\n\\n\\tdef receive_message(self, receiver_id):\\n\\t\\tfor message_id, message in self.messages.items():\\n\\t\\t\\tif message['receiver'] == receiver_id:\\n\\t\\t\\t\\treturn message['content']\\n\\t\\treturn None\\n\\n\\tdef mark_as_read(self, receiver_id, message_id):\\n\\t\\tif message_id not in self.messages or self.messages[message_id]['receiver'] != receiver_id:\\n\\t\\t\\treturn False\\n\\t\\tself.messages[message_id]['read'] = True\\n\\t\\treturn True\\n\\n\\tdef encrypt_message(self, sender_id, message):\\n\\t\\treturn ''.join(chr(ord(c) + 1) for c in message)\\n\\n\\tdef decrypt_message(self, receiver_id, encrypted_message):\\n\\t\\treturn ''.join(chr(ord(c) - 1) for c in encrypted_message)\\n\\n\\tdef send_image(self, sender_id, receiver_id, image_path):\\n\\t\\tself.message_id_counter += 1\\n\\t\\tself.messages[self.message_id_counter] = {'sender': sender_id, 'receiver': receiver_id, 'content': image_path, 'read': False}\\n\\t\\treturn self.message_id_counter\\n\\n\\tdef receive_image(self, receiver_id):\\n\\t\\tfor message_id, message in self.messages.items():\\n\\t\\t\\tif message['receiver'] == receiver_id:\\n\\t\\t\\t\\treturn message['content']\\n\\t\\treturn None\\n\\n\\tdef send_content(self, sender_id, receiver_id, content):\\n\\t\\tself.message_id_counter += 1\\n\\t\\tself.messages[self.message_id_counter] = {'sender': sender_id, 'receiver': receiver_id, 'content': content, 'read': False}\\n\\t\\treturn self.message_id_counter\\n\\n\\tdef receive_content(self, receiver_id):\\n\\t\\tfor message_id, message in self.messages.items():\\n\\t\\t\\tif message['receiver'] == receiver_id:\\n\\t\\t\\t\\treturn message['content']\\n\\t\\treturn None\"\n    },\n    {\n      \"file_path\": \"group_chat_service.py\",\n      \"file_contents\": \"class GroupChatService:\\n\\tdef __init__(self):\\n\\t\\tself.groups = {}\\n\\t\\tself.group_id_counter = 0\\n\\n\\tdef create_group(self, user_id, group_name, group_picture):\\n\\t\\tself.group_id_counter += 1\\n\\t\\tself.groups[self.group_id_counter] = {'name': group_name, 'picture': group_picture, 'admin': user_id, 'participants': [user_id], 'admin_permissions': {user_id: ['Add members', 'Remove members', 'Edit group info']}}\\n\\t\\treturn self.group_id_counter\\n\\n\\tdef add_participant(self, group_id, participant_id):\\n\\t\\tif group_id not in self.groups or participant_id in self.groups[group_id]['participants']:\\n\\t\\t\\treturn False\\n\\t\\tself.groups[group_id]['participants'].append(participant_id)\\n\\t\\treturn True\\n\\n\\tdef remove_participant(self, group_id, participant_id):\\n\\t\\tif group_id not in self.groups or participant_id not in self.groups[group_id]['participants']:\\n\\t\\t\\treturn False\\n\\t\\tself.groups[group_id]['participants'].remove(participant_id)\\n\\t\\treturn True\\n\\n\\tdef assign_admin(self, group_id, user_id):\\n\\t\\tif group_id not in self.groups or user_id not in self.groups[group_id]['participants']:\\n\\t\\t\\treturn False\\n\\t\\tself.groups[group_id]['admin_permissions'][user_id] = ['Add members', 'Remove members', 'Edit group info']\\n\\t\\treturn True\\n\\n\\tdef change_admin_permissions(self, group_id, user_id, new_permissions):\\n\\t\\tif group_id not in self.groups or user_id not in self.groups[group_id]['admin_permissions']:\\n\\t\\t\\treturn False\\n\\t\\tself.groups[group_id]['admin_permissions'][user_id] = new_permissions\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"status_service.py\",\n      \"file_contents\": \"class StatusService:\\n\\tdef __init__(self):\\n\\t\\tself.statuses = {}\\n\\n\\tdef post_image_status(self, user_id, image_status, duration):\\n\\t\\tself.statuses[user_id] = {'image': image_status, 'duration': duration}\\n\\t\\treturn True\\n\\n\\tdef set_status_visibility(self, user_id, visibility_settings):\\n\\t\\tif user_id not in self.statuses:\\n\\t\\t\\treturn False\\n\\t\\tself.statuses[user_id]['visibility'] = visibility_settings\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"web_app_service.py\",\n      \"file_contents\": \"class WebAppService:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef access_web_version(self, user_id):\\n\\t\\tself.users[user_id] = {'web_access': True}\\n\\t\\treturn True\"\n    },\n    {\n      \"file_path\": \"offline_service.py\",\n      \"file_contents\": \"class OfflineService:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\t\\tself.messages = {}\\n\\t\\tself.message_id_counter = 0\\n\\n\\tdef set_offline(self, user_id):\\n\\t\\tself.users[user_id] = {'online': False}\\n\\n\\tdef set_online(self, user_id):\\n\\t\\tself.users[user_id] = {'online': True}\\n\\n\\tdef send_message(self, sender_id, receiver_id, message):\\n\\t\\tif self.users[sender_id]['online']:\\n\\t\\t\\treturn 'Sent'\\n\\t\\tself.message_id_counter += 1\\n\\t\\tself.messages[self.message_id_counter] = {'sender': sender_id, 'receiver': receiver_id, 'content': message, 'sent': False}\\n\\t\\treturn 'Queued'\\n\\n\\tdef check_message_sent(self, sender_id, receiver_id):\\n\\t\\tfor message_id, message in self.messages.items():\\n\\t\\t\\tif message['sender'] == sender_id and message['receiver'] == receiver_id:\\n\\t\\t\\t\\treturn message['sent']\\n\\t\\treturn False\"\n    },\n    {\n      \"file_path\": \"user_status_service.py\",\n      \"file_contents\": \"class UserStatusService:\\n\\tdef __init__(self):\\n\\t\\tself.users = {}\\n\\n\\tdef set_status(self, user_id, status):\\n\\t\\tself.users[user_id] = {'status': status}\\n\\n\\tdef get_status(self, user_id):\\n\\t\\tif user_id not in self.users:\\n\\t\\t\\treturn None\\n\\t\\treturn self.users[user_id]['status']\"\n    },\n    {\n      \"file_path\": \"test_services.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\nfrom auth_service import AuthService\\nfrom user_service import UserService\\nfrom contact_service import ContactService\\nfrom group_service import GroupService\\nfrom message_service import MessageService\\nfrom group_chat_service import GroupChatService\\nfrom status_service import StatusService\\nfrom web_app_service import WebAppService\\nfrom offline_service import OfflineService\\nfrom user_status_service import UserStatusService\\n\\n@pytest.fixture\\ndef auth_service():\\n\\treturn AuthService()\\n\\n@pytest.fixture\\ndef user_service():\\n\\treturn UserService()\\n\\n@pytest.fixture\\ndef contact_service():\\n\\treturn ContactService()\\n\\n@pytest.fixture\\ndef group_service():\\n\\treturn GroupService()\\n\\n@pytest.fixture\\ndef message_service():\\n\\treturn MessageService()\\n\\n@pytest.fixture\\ndef group_chat_service():\\n\\treturn GroupChatService()\\n\\n@pytest.fixture\\ndef status_service():\\n\\treturn StatusService()\\n\\n@pytest.fixture\\ndef web_app_service():\\n\\treturn WebAppService()\\n\\n@pytest.fixture\\ndef offline_service():\\n\\treturn OfflineService()\\n\\n@pytest.fixture\\ndef user_status_service():\\n\\treturn UserStatusService()\\n\\n@pytest.fixture\\ndef user_emails(auth_service):\\n\\treturn list(auth_service.users.keys())\\n\\n@pytest.fixture\\ndef user_id():\\n\\treturn random.randint(1, 100)\\n\\n@pytest.fixture\\ndef contacts_list():\\n\\treturn [random.randint(1, 100) for _ in range(10)]\\n\\n@pytest.fixture\\ndef group_id(group_service, user_id):\\n\\treturn group_service.create_group(user_id, 'Test Group')\\n\\n@pytest.fixture\\ndef user_ids():\\n\\treturn [random.randint(1, 100) for _ in range(10)]\\n\\n# Tests go here\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2751, "completion_tokens": 2538, "total_tokens": 5289}}]