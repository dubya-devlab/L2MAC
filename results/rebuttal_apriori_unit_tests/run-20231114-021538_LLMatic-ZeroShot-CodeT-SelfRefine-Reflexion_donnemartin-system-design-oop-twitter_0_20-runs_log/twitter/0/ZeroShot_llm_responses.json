[{"id": "chatcmpl-8KeLqIMTcShttQ82omGDb4KOWshuk", "object": "chat.completion", "created": 1699932362, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"my_oms.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nimport jwt\\nimport datetime\\nfrom functools import wraps\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[email] = {\\n\\t\\t'username': username,\\n\\t\\t'password': generate_password_hash(password),\\n\\t\\t'posts': []\\n\\t}\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email not in users or not check_password_hash(users[email]['password'], password):\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 400\\n\\ttoken = jwt.encode({'user': email, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tcontent = data['content']\\n\\tif email not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 400\\n\\tusers[email]['posts'].append(content)\\n\\treturn jsonify({'message': 'Posted successfully'}), 200\\n\\n@app.route('/posts', methods=['GET'])\\ndef get_posts():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tif email not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 400\\n\\treturn jsonify({'posts': users[email]['posts']}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_my_oms.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\nfrom my_oms import app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('path', ['/register', '/login', '/post', '/posts'])\\n\\ndef test_endpoints(client, path):\\n\\tresponse = client.get(path)\\n\\tassert response.status_code != 404\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert b'Registered successfully' in response.data\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert b'token' in response.data\\n\\n\\ndef test_post(client):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tclient.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/post', json={'email': 'test@test.com', 'content': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert b'Posted successfully' in response.data\\n\\n\\ndef test_get_posts(client):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tclient.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tclient.post('/post', json={'email': 'test@test.com', 'content': 'Hello, world!'})\\n\\tresponse = client.get('/posts', json={'email': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert b'Hello, world!' in response.data\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2154, "completion_tokens": 1020, "total_tokens": 3174}}]