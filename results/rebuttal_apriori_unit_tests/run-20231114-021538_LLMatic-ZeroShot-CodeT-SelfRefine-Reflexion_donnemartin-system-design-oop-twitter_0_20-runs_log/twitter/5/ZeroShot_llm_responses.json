[{"id": "chatcmpl-8KmvDNyDoDcZFp2kHrQtBiWa9nT4u", "object": "chat.completion", "created": 1699965307, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"my_oms.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nimport jwt\\nimport datetime\\nfrom functools import wraps\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[email] = {\\n\\t\\t'username': username,\\n\\t\\t'password': generate_password_hash(password),\\n\\t\\t'profile': {\\n\\t\\t\\t'bio': '',\\n\\t\\t\\t'website': '',\\n\\t\\t\\t'location': '',\\n\\t\\t\\t'private': False\\n\\t\\t},\\n\\t\\t'posts': [],\\n\\t\\t'following': [],\\n\\t\\t'followers': [],\\n\\t\\t'messages': [],\\n\\t\\t'notifications': []\\n\\t}\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email not in users or not check_password_hash(users[email]['password'], password):\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 400\\n\\ttoken = jwt.encode({'user': email, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_my_oms.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\nfrom my_oms import app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef random_string(length=10):\\n\\treturn ''.join(random.choice(string.ascii_letters) for _ in range(length))\\n\\n@pytest.fixture\\ndef random_email(random_string):\\n\\treturn f'{random_string}@example.com'\\n\\n@pytest.fixture\\ndef random_password(random_string):\\n\\treturn random_string\\n\\n@pytest.fixture\\ndef new_user(random_email, random_password):\\n\\treturn {'email': random_email, 'password': random_password, 'username': 'testuser'}\\n\\ndef test_register(client, new_user):\\n\\tresponse = client.post('/register', data=json.dumps(new_user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'Registered successfully' in response.data\\n\\ndef test_login(client, new_user):\\n\\tclient.post('/register', data=json.dumps(new_user), content_type='application/json')\\n\\tresponse = client.post('/login', data=json.dumps(new_user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'token' in response.data\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2154, "completion_tokens": 743, "total_tokens": 2897}}]