[{"id": "chatcmpl-8KhOeBDKO9iMc5vJmgEt40Wa5GrWW", "object": "chat.completion", "created": 1699944068, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"my_oms.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nimport jwt\\nimport datetime\\nfrom functools import wraps\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users:\\n\\t\\treturn jsonify({'message': 'User already exists!'}), 409\\n\\telse:\\n\\t\\tusers[email] = {\\n\\t\\t\\t'username': username,\\n\\t\\t\\t'password': generate_password_hash(password, method='sha256'),\\n\\t\\t\\t'posts': []\\n\\t\\t}\\n\\t\\treturn jsonify({'message': 'Registered successfully!'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users and check_password_hash(users[email]['password'], password):\\n\\t\\ttoken = jwt.encode({'user': email, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\t\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid credentials!'}), 401\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tuser = data['user']\\n\\tcontent = data['content']\\n\\tif user in users:\\n\\t\\tpost_id = len(posts) + 1\\n\\t\\tposts[post_id] = {\\n\\t\\t\\t'user': user,\\n\\t\\t\\t'content': content\\n\\t\\t}\\n\\t\\tusers[user]['posts'].append(post_id)\\n\\t\\treturn jsonify({'message': 'Posted successfully!'}), 201\\n\\telse:\\n\\t\\treturn jsonify({'message': 'User does not exist!'}), 404\\n\\n@app.route('/post/<post_id>', methods=['DELETE'])\\ndef delete_post(post_id):\\n\\tdata = request.get_json()\\n\\tuser = data['user']\\n\\tif int(post_id) in posts and posts[int(post_id)]['user'] == user:\\n\\t\\tdel posts[int(post_id)]\\n\\t\\tusers[user]['posts'].remove(int(post_id))\\n\\t\\treturn jsonify({'message': 'Post deleted successfully!'}), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Post does not exist or you do not have permission to delete this post!'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_my_oms.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\nfrom my_oms import app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\ndef random_string(length=10):\\n\\treturn ''.join(random.choice(string.ascii_letters) for _ in range(length))\\n\\ndef test_user_registration(client):\\n\\tusername = random_string()\\n\\temail = f'{random_string()}@example.com'\\n\\tpassword = random_string()\\n\\tresponse = client.post('/register', json={'username': username, 'email': email, 'password': password})\\n\\tassert response.status_code == 201\\n\\ndef test_user_authentication(client):\\n\\tusername = random_string()\\n\\temail = f'{random_string()}@example.com'\\n\\tpassword = random_string()\\n\\tclient.post('/register', json={'username': username, 'email': email, 'password': password})\\n\\tresponse = client.post('/login', json={'email': email, 'password': password})\\n\\tassert response.status_code == 200\\n\\ndef test_create_post(client):\\n\\tusername = random_string()\\n\\temail = f'{random_string()}@example.com'\\n\\tpassword = random_string()\\n\\tclient.post('/register', json={'username': username, 'email': email, 'password': password})\\n\\tresponse = client.post('/post', json={'user': email, 'content': random_string(280)})\\n\\tassert response.status_code == 201\\n\\ndef test_delete_post(client):\\n\\tusername = random_string()\\n\\temail = f'{random_string()}@example.com'\\n\\tpassword = random_string()\\n\\tclient.post('/register', json={'username': username, 'email': email, 'password': password})\\n\\tclient.post('/post', json={'user': email, 'content': random_string(280)})\\n\\tresponse = client.delete('/post/1', json={'user': email})\\n\\tassert response.status_code == 200\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2154, "completion_tokens": 1126, "total_tokens": 3280}}, {"id": "chatcmpl-8KhaTSwINynQvPOBxj3869fDiPTd7", "object": "chat.completion", "created": 1699944801, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"my_oms.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nimport jwt\\nimport datetime\\nfrom functools import wraps\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[email] = {\\n\\t\\t'username': username,\\n\\t\\t'password': generate_password_hash(password),\\n\\t\\t'profile': {},\\n\\t\\t'posts': [],\\n\\t\\t'following': [],\\n\\t\\t'followers': [],\\n\\t\\t'messages': [],\\n\\t\\t'notifications': []\\n\\t}\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif email not in users or not check_password_hash(users[email]['password'], password):\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 400\\n\\ttoken = jwt.encode({'user': email, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_my_oms.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\nfrom my_oms import app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef random_string(length=10):\\n\\treturn ''.join(random.choice(string.ascii_letters) for _ in range(length))\\n\\n@pytest.fixture\\ndef random_email(random_string):\\n\\treturn f'{random_string}@example.com'\\n\\n@pytest.fixture\\ndef random_password(random_string):\\n\\treturn random_string\\n\\n@pytest.fixture\\ndef new_user(random_email, random_password):\\n\\treturn {'email': random_email, 'password': random_password, 'username': 'testuser'}\\n\\n\\ndef test_register(client, new_user):\\n\\tresponse = client.post('/register', data=json.dumps(new_user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'Registered successfully' in response.data\\n\\n\\ndef test_login(client, new_user):\\n\\tclient.post('/register', data=json.dumps(new_user), content_type='application/json')\\n\\tresponse = client.post('/login', data=json.dumps(new_user), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert b'token' in response.data\"\n    }\n  ]\n}"}, "content": null}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2154, "completion_tokens": 706, "total_tokens": 2860}}, {"id": "chatcmpl-8KhiEBEe6ZvPjvUK6JxEW8sOMKZd9", "object": "chat.completion", "created": 1699945282, "model": "gpt-4", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "choices": [{"index": 0, "finish_reason": "stop", "message": {"role": "assistant", "function_call": {"name": "write_files", "arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"oms/user.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tbio: str = ''\\n\\twebsite: str = ''\\n\\tlocation: str = ''\\n\\tis_private: bool = False\\n\\tfollowers: list = None\\n\\tfollowing: list = None\\n\\tlikes: list = None\\n\\tretweets: list = None\\n\\tmentions: list = None\\n\\tmessages: list = None\\n\\t\\n\\tdef __post_init__(self):\\n\\t\\tself.followers = self.followers or []\\n\\t\\tself.following = self.following or []\\n\\t\\tself.likes = self.likes or []\\n\\t\\tself.retweets = self.retweets or []\\n\\t\\tself.mentions = self.mentions or []\\n\\t\\tself.messages = self.messages or []\"\n    },\n    {\n      \"file_path\": \"oms/post.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Post:\\n\\tid: int\\n\\tuser_id: int\\n\\tcontent: str\\n\\tlikes: list = None\\n\\tretweets: list = None\\n\\treplies: list = None\\n\\t\\n\\tdef __post_init__(self):\\n\\t\\tself.likes = self.likes or []\\n\\t\\tself.retweets = self.retweets or []\\n\\t\\tself.replies = self.replies or []\"\n    },\n    {\n      \"file_path\": \"oms/message.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\n\\n@dataclass\\nclass Message:\\n\\tid: int\\n\\tsender_id: int\\n\\treceiver_id: int\\n\\tcontent: str\"\n    },\n    {\n      \"file_path\": \"oms/oms.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom .user import User\\nfrom .post import Post\\nfrom .message import Message\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\nmessages = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.id] = user\\n\\treturn jsonify({'status': 'success'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['id'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify({'status': 'success'}), 200\\n\\treturn jsonify({'status': 'failure'}), 401\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tpost = Post(**data)\\n\\tposts[post.id] = post\\n\\treturn jsonify({'status': 'success'}), 200\\n\\n@app.route('/message', methods=['POST'])\\ndef message():\\n\\tdata = request.get_json()\\n\\tmessage = Message(**data)\\n\\tmessages[message.id] = message\\n\\treturn jsonify({'status': 'success'}), 200\"\n    },\n    {\n      \"file_path\": \"test_oms.py\",\n      \"file_contents\": \"import pytest\\nimport random\\nimport string\\nfrom oms.oms import app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.mark.parametrize('endpoint', ['/register', '/login', '/post', '/message'])\\ndef test_endpoints(client, endpoint):\\n\\tresponse = client.post(endpoint, json={})\\n\\tassert response.status_code == 200\"\n    }\n  ]\n}"}}, "content_filter_results": {}}], "usage": {"prompt_tokens": 2154, "completion_tokens": 845, "total_tokens": 2999}}]