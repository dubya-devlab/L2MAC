[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\tcustom = data.get('custom')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\t# For simplicity, we'll just check if it starts with http\\n\\tif not original_url.startswith('http'):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Generate shortened URL\\n\\tshortened_url = ''.join(random.choices(string.ascii_letters + string.digits, k=5))\\n\\tif custom:\\n\\t\\tshortened_url = custom\\n\\n\\t# Create URL object and store in database\\n\\turl = URL(original_url, shortened_url, user, 0, [], expiration)\\n\\turls[shortened_url] = url\\n\\n\\t# If user is provided, add URL to user's list\\n\\tif user:\\n\\t\\tusers[user].urls.append(url)\\n\\n\\treturn jsonify({'shortened_url': shortened_url}), 200\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_url(shortened_url):\\n\\t# Check if URL exists\\n\\tif shortened_url not in urls:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Check if URL is expired\\n\\tif urls[shortened_url].expiration and urls[shortened_url].expiration < datetime.now():\\n\\t\\treturn jsonify({'error': 'URL expired'}), 410\\n\\n\\t# Increment click count and add click data\\n\\turls[shortened_url].clicks += 1\\n\\turls[shortened_url].click_data.append({'time': datetime.now().isoformat()})\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(urls[shortened_url].original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tdata = request.get_json()\\n\\tuser = data.get('user')\\n\\n\\t# If user is provided, return analytics for user's URLs\\n\\tif user:\\n\\t\\treturn jsonify({'urls': [url.__dict__ for url in users[user].urls]}), 200\\n\\n\\t# Otherwise, return analytics for all URLs\\n\\treturn jsonify({'urls': [url.__dict__ for url in urls.values()]}), 200\\n\\n@app.route('/register', methods=['POST'])\\ndef register_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\n\\t# Check if username is taken\\n\\tif username in users:\\n\\t\\treturn jsonify({'error': 'Username taken'}), 400\\n\\n\\t# Create user and store in database\\n\\tuser = User(username, password, [])\\n\\tusers[username] = user\\n\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/admin', methods=['GET'])\\ndef admin_dashboard():\\n\\t# For simplicity, we'll just return all URLs and users\\n\\treturn jsonify({'urls': [url.__dict__ for url in urls.values()], 'users': [user.__dict__ for user in users.values()]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'shortened_url' in json.loads(response.data)\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com'})\\n\\tshortened_url = json.loads(response.data)['shortened_url']\\n\\tresponse = client.get(f'/{shortened_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.get('/analytics')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in json.loads(response.data)\\n\\n\\ndef test_register_user(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'message' in json.loads(response.data)\\n\\n\\ndef test_admin_dashboard(client):\\n\\tresponse = client.get('/admin')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in json.loads(response.data)\\n\\tassert 'users' in json.loads(response.data)\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710324903, "id": "chatcmpl-92FvTB2tfjbVaxmYVZJ7oBAV4HBga", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1219, "prompt_tokens": 1393, "total_tokens": 2612}}]