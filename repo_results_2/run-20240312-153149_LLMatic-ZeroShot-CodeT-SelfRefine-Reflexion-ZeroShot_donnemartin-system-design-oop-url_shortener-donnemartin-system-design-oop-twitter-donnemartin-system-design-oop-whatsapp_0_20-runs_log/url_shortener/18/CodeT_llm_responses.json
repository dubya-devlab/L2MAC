[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser = data.get('user')\\n\\texpiration = data.get('expiration')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turls[short_url] = URL(original_url, short_url, user, 0, [], expiration)\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and (not url.expiration or url.expiration > datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\turl.click_data.append({'time': datetime.now().isoformat()})\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn 'URL not found or expired', 404\\n\\n@app.route('/analytics/<short_url>', methods=['GET'])\\ndef get_analytics(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url:\\n\\t\\treturn jsonify({'clicks': url.clicks, 'click_data': url.click_data}), 200\\n\\telse:\\n\\t\\treturn 'URL not found', 404\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tusers[username] = {'urls': []}\\n\\treturn jsonify({'message': 'User created'}), 201\\n\\n@app.route('/user/<username>', methods=['GET'])\\ndef get_user(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\treturn jsonify(user), 200\\n\\telse:\\n\\t\\treturn 'User not found', 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test', 'expiration': None}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test', 'expiration': None}), content_type='application/json')\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user': 'test', 'expiration': None}), content_type='application/json')\\n\\tshort_url = response.get_json()['short_url']\\n\\tresponse = client.get(f'/analytics/{short_url}')\\n\\tassert response.status_code == 200\\n\\tassert 'clicks' in response.get_json()\\n\\tassert 'click_data' in response.get_json()\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/user', data=json.dumps({'username': 'test'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'message' in response.get_json()\\n\\n\\ndef test_get_user(client):\\n\\tresponse = client.post('/user', data=json.dumps({'username': 'test'}), content_type='application/json')\\n\\tresponse = client.get('/user/test')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710415814, "id": "chatcmpl-92dZmfDrgExHfVSQl7JNVpLK98HSo", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1008, "prompt_tokens": 1393, "total_tokens": 2401}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=shortened_url, clicks=0, click_data=[], expiration=expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 410\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\t\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import Flask\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef valid_url():\\n\\treturn 'https://www.google.com'\\n\\n@pytest.fixture\\ndef invalid_url():\\n\\treturn 'https://www.invalidurl.com'\\n\\n@pytest.fixture\\ndef shortened_url():\\n\\treturn 'goog'\\n\\n@pytest.fixture\\ndef expiration():\\n\\treturn (datetime.now() + timedelta(days=1)).isoformat()\\n\\ndef test_shorten_url(client, valid_url, shortened_url, expiration):\\n\\tresponse = client.post('/shorten', json={'url': valid_url, 'shortened': shortened_url, 'expiration': expiration})\\n\\tassert response.status_code == 200\\n\\tassert 'URL shortened successfully' in response.get_json()['message']\\n\\n\\t# Test with invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalidurl', 'shortened': shortened_url, 'expiration': expiration})\\n\\tassert response.status_code == 400\\n\\tassert 'Invalid URL' in response.get_json()['error']\\n\\n\\t# Test with already used shortened URL\\n\\tresponse = client.post('/shorten', json={'url': valid_url, 'shortened': shortened_url, 'expiration': expiration})\\n\\tassert response.status_code == 400\\n\\tassert 'Shortened URL already in use' in response.get_json()['error']\\n\\n\\t# Test with expired URL\\n\\tresponse = client.post('/shorten', json={'url': valid_url, 'shortened': 'expired', 'expiration': (datetime.now() - timedelta(days=1)).isoformat()})\\n\\tassert response.status_code == 200\\n\\tresponse = client.get('/expired')\\n\\tassert response.status_code == 410\\n\\tassert 'URL has expired' in response.get_json()['error']\\n\\n\\t# Test redirection\\n\\tresponse = client.get('/' + shortened_url)\\n\\tassert response.status_code == 302\\n\\tassert response.location == valid_url\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710415888, "id": "chatcmpl-92dayTjgC9hsnX00Hi4jP9SK8cBuU", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 995, "prompt_tokens": 1393, "total_tokens": 2388}}]