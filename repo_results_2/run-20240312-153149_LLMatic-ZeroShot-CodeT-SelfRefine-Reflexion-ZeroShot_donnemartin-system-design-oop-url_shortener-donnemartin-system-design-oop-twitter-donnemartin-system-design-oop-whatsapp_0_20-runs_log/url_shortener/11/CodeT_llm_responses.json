[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\tid: str\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: list\\n\\texpiration_date: datetime\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser_id = str(uuid.uuid4())\\n\\tuser = User(id=user_id, username=data['username'], password=data['password'], urls={})\\n\\tusers[user_id] = user\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.username == data['username'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify({'user_id': user.id}), 200\\n\\treturn jsonify({'error': 'Invalid username or password'}), 401\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten():\\n\\tdata = request.get_json()\\n\\turl_id = str(uuid.uuid4())\\n\\tshort_url = f'http://short.ly/{url_id}'\\n\\turl = URL(id=url_id, original_url=data['original_url'], short_url=short_url, user_id=data['user_id'], clicks=[], expiration_date=data['expiration_date'])\\n\\turls[url_id] = url\\n\\tusers[data['user_id']].urls[url_id] = url\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<url_id>', methods=['GET'])\\ndef redirect_to_original(url_id):\\n\\turl = urls.get(url_id)\\n\\tif url and datetime.now() <= url.expiration_date:\\n\\t\\turl.clicks.append({'timestamp': datetime.now().isoformat(), 'ip': request.remote_addr})\\n\\t\\treturn redirect(url.original_url, code=302)\\n\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/analytics/<url_id>', methods=['GET'])\\ndef analytics(url_id):\\n\\turl = urls.get(url_id)\\n\\tif url:\\n\\t\\treturn jsonify({'clicks': url.clicks}), 200\\n\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n@app.route('/admin', methods=['GET'])\\ndef admin():\\n\\treturn jsonify({'users': [user.__dict__ for user in users.values()], 'urls': [url.__dict__ for url in urls.values()]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_login(client):\\n\\tclient.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_shorten(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten', json={'original_url': 'http://example.com', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in json.loads(response.data)\\n\\n\\ndef test_redirect_to_original(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten', json={'original_url': 'http://example.com', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\turl_id = short_url.split('/')[-1]\\n\\tresponse = client.get(f'/{url_id}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_analytics(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tuser_id = json.loads(response.data)['user_id']\\n\\tresponse = client.post('/shorten', json={'original_url': 'http://example.com', 'user_id': user_id, 'expiration_date': '2022-12-31T23:59:59'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\turl_id = short_url.split('/')[-1]\\n\\tclient.get(f'/{url_id}')\\n\\tresponse = client.get(f'/analytics/{url_id}')\\n\\tassert response.status_code == 200\\n\\tassert len(json.loads(response.data)['clicks']) == 1\\n\\n\\ndef test_admin(client):\\n\\tresponse = client.get('/admin')\\n\\tassert response.status_code == 200\\n\\tassert 'users' in json.loads(response.data)\\n\\tassert 'urls' in json.loads(response.data)\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710355371, "id": "chatcmpl-92NqtbpRzavWTS9R0LSyOaXP4zwDX", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1341, "prompt_tokens": 1393, "total_tokens": 2734}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport pytz\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_details: list\\n\\texpiration_date: datetime\\n\\n@app.route('/create_user', methods=['POST'])\\ndef create_user():\\n\\tuser_id = str(uuid.uuid4())\\n\\tusers[user_id] = User(user_id, {})\\n\\treturn jsonify({'user_id': user_id}), 201\\n\\n@app.route('/shorten_url', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data['original_url']\\n\\tuser_id = data.get('user_id')\\n\\tshort_url = str(uuid.uuid4())[:8]\\n\\texpiration_date = data.get('expiration_date')\\n\\tif expiration_date:\\n\\t\\texpiration_date = datetime.strptime(expiration_date, '%Y-%m-%d %H:%M:%S')\\n\\turls[short_url] = URL(original_url, short_url, user_id, 0, [], expiration_date)\\n\\tif user_id:\\n\\t\\tusers[user_id].urls[short_url] = urls[short_url]\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_original(short_url):\\n\\turl = urls.get(short_url)\\n\\tif not url or (url.expiration_date and url.expiration_date < datetime.now(pytz.UTC)):\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\turl.clicks += 1\\n\\turl.click_details.append({'click_time': datetime.now(pytz.UTC).isoformat()})\\n\\treturn redirect(url.original_url, code=302)\\n\\n@app.route('/analytics/<short_url>', methods=['GET'])\\ndef get_analytics(short_url):\\n\\turl = urls.get(short_url)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\treturn jsonify({'clicks': url.clicks, 'click_details': url.click_details}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_create_user(client):\\n\\tresponse = client.post('/create_user')\\n\\tassert response.status_code == 201\\n\\tassert 'user_id' in json.loads(response.data)\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in json.loads(response.data)\\n\\n\\ndef test_redirect_to_original(client):\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_get_analytics(client):\\n\\tresponse = client.post('/shorten_url', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/analytics/{short_url}')\\n\\tassert response.status_code == 200\\n\\tassert 'clicks' in json.loads(response.data)\\n\\tassert 'click_details' in json.loads(response.data)\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710355417, "id": "chatcmpl-92Nrd2ILI2XR5paQZ80T8DmJjaO8b", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 912, "prompt_tokens": 1393, "total_tokens": 2305}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=shortened_url, clicks=0, click_data=[], expiration=expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 201\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_to_url(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists and has not expired\\n\\tif not url or datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<shortened>', methods=['GET'])\\ndef get_analytics(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\treturn jsonify({'data': url}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('http://example.com', 'exmpl', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('http://google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('http://invalid.com', 'inval', (datetime.now() + timedelta(days=1)).isoformat())\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': url, 'shortened': shortened, 'expiration': expiration}), content_type='application/json')\\n\\t\\n\\tif 'invalid' in url:\\n\\t\\tassert response.status_code == 400\\n\\telse:\\n\\t\\tassert response.status_code == 201\\n\\t\\tassert app.DB[shortened].original == url\\n\\n@pytest.mark.parametrize('shortened', ['exmpl', 'goog', 'inval'])\\ndef test_redirect_to_url(client, reset_db, shortened):\\n\\tresponse = client.get(f'/{shortened}')\\n\\t\\n\\tif shortened in app.DB and datetime.now() < app.DB[shortened].expiration:\\n\\t\\tassert response.status_code == 302\\n\\telse:\\n\\t\\tassert response.status_code == 404\\n\\n@pytest.mark.parametrize('shortened', ['exmpl', 'goog', 'inval'])\\ndef test_get_analytics(client, reset_db, shortened):\\n\\tresponse = client.get(f'/analytics/{shortened}')\\n\\t\\n\\tif shortened in app.DB:\\n\\t\\tassert response.status_code == 200\\n\\telse:\\n\\t\\tassert response.status_code == 404\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710355447, "id": "chatcmpl-92Ns7H1JjrSvviwI7IT0b89DHF9sA", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1008, "prompt_tokens": 1393, "total_tokens": 2401}}]