[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport services\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = services.register_user(data)\\n\\treturn jsonify(user), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = services.authenticate_user(data)\\n\\tif user:\\n\\t\\taccess_token = create_access_token(identity=user['username'])\\n\\t\\treturn jsonify(access_token=access_token), 200\\n\\treturn jsonify(message='Invalid username or password'), 401\\n\\n@app.route('/profile', methods=['GET', 'PUT'])\\n@jwt_required\\n\\ndef profile():\\n\\tif request.method == 'GET':\\n\\t\\tusername = get_jwt_identity()\\n\\t\\tuser = services.get_user(username)\\n\\t\\treturn jsonify(user), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tusername = get_jwt_identity()\\n\\t\\tuser = services.update_user(username, data)\\n\\t\\treturn jsonify(user), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\tbio = db.Column(db.String(280))\\n\\twebsite = db.Column(db.String(120))\\n\\tlocation = db.Column(db.String(120))\\n\\tis_private = db.Column(db.Boolean, default=False)\\n\\n\\ndef __repr__(self):\\n\\treturn '<User %r>' % self.username\"\n    },\n    {\n      \"file_path\": \"services.py\",\n      \"file_contents\": \"from models import User\\nfrom app import db\\n\\n\\ndef register_user(data):\\n\\tuser = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(user)\\n\\tdb.session.commit()\\n\\treturn user\\n\\n\\ndef authenticate_user(data):\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and user.password == data['password']:\\n\\t\\treturn user\\n\\treturn None\\n\\n\\ndef get_user(username):\\n\\tuser = User.query.filter_by(username=username).first()\\n\\tif user:\\n\\t\\treturn user\\n\\treturn None\\n\\n\\ndef update_user(username, data):\\n\\tuser = User.query.filter_by(username=username).first()\\n\\tif user:\\n\\t\\tuser.bio = data.get('bio', user.bio)\\n\\t\\tuser.website = data.get('website', user.website)\\n\\t\\tuser.location = data.get('location', user.location)\\n\\t\\tuser.is_private = data.get('is_private', user.is_private)\\n\\t\\tdb.session.commit()\\n\\t\\treturn user\\n\\treturn None\"\n    },\n    {\n      \"file_path\": \"test_services.py\",\n      \"file_contents\": \"import pytest\\nfrom services import register_user, authenticate_user, get_user, update_user\\nfrom models import User\\n\\n\\ndef test_register_user():\\n\\tdata = {'username': 'test', 'email': 'test@test.com', 'password': 'test'}\\n\\tuser = register_user(data)\\n\\tassert user.username == data['username']\\n\\tassert user.email == data['email']\\n\\n\\ndef test_authenticate_user():\\n\\tdata = {'username': 'test', 'password': 'test'}\\n\\tuser = authenticate_user(data)\\n\\tassert user.username == data['username']\\n\\n\\ndef test_get_user():\\n\\tusername = 'test'\\n\\tuser = get_user(username)\\n\\tassert user.username == username\\n\\n\\ndef test_update_user():\\n\\tusername = 'test'\\n\\tdata = {'bio': 'This is a test bio'}\\n\\tuser = update_user(username, data)\\n\\tassert user.bio == data['bio']\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app\\n\\n\\ndef test_register():\\n\\twith app.test_client() as c:\\n\\t\\tresp = c.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\t\\tassert resp.status_code == 201\\n\\n\\ndef test_login():\\n\\twith app.test_client() as c:\\n\\t\\tresp = c.post('/login', json={'username': 'test', 'password': 'test'})\\n\\t\\tassert resp.status_code == 200\\n\\n\\ndef test_profile():\\n\\twith app.test_client() as c:\\n\\t\\tresp = c.get('/profile')\\n\\t\\tassert resp.status_code == 200\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710287866, "id": "chatcmpl-926I6NNxqjP8HBaNpxanWMAMBxqj7", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1249, "prompt_tokens": 1507, "total_tokens": 2756}}]