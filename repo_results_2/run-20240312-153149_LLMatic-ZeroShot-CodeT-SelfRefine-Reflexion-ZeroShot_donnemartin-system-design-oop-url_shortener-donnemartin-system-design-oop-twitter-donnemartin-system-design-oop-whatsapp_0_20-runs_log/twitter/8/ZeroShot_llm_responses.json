[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest_flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\n\\njwt = JWTManager(app)\\ndb = SQLAlchemy(app)\\n\\nfrom models import User, Post\\nfrom views import user_blueprint, post_blueprint\\n\\napp.register_blueprint(user_blueprint)\\napp.register_blueprint(post_blueprint)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import get_jwt_identity\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\t\\n\\tdef __repr__(self):\\n\\t\\treturn '<User %r>' % self.username\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\t\\n\\tdef __repr__(self):\\n\\t\\treturn '<Post %r>' % self.content\"\n    },\n    {\n      \"file_path\": \"views.py\",\n      \"file_contents\": \"from flask import Blueprint, request, jsonify\\nfrom flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nfrom models import User, Post\\nfrom app import db\\n\\nuser_blueprint = Blueprint('user', __name__)\\npost_blueprint = Blueprint('post', __name__)\\n\\n\\n@user_blueprint.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=generate_password_hash(data['password']))\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Registered successfully'}), 201\\n\\n\\n@user_blueprint.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and check_password_hash(user.password, data['password']):\\n\\t\\taccess_token = create_access_token(identity=user.username)\\n\\t\\treturn jsonify(access_token=access_token), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n\\n@post_blueprint.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tuser_id = User.query.filter_by(username=get_jwt_identity()).first().id\\n\\tnew_post = Post(content=data['content'], user_id=user_id)\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\ndef setup_module():\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\tapp.config['TESTING'] = True\\n\\twith app.app_context():\\n\\t\\tdb.create_all()\\n\\n\\ndef teardown_module():\\n\\twith app.app_context():\\n\\t\\tdb.drop_all()\\n\\n\\ndef test_register():\\n\\twith app.test_client() as client:\\n\\t\\tres = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\t\\tassert res.status_code == 201\\n\\t\\tassert 'Registered successfully' in res.get_json()['message']\\n\\n\\ndef test_login():\\n\\twith app.test_client() as client:\\n\\t\\tres = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\t\\tassert res.status_code == 200\\n\\t\\tassert 'access_token' in res.get_json()\\n\\n\\ndef test_create_post():\\n\\twith app.test_client() as client:\\n\\t\\tres = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\t\\taccess_token = res.get_json()['access_token']\\n\\t\\tres = client.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': 'Bearer ' + access_token})\\n\\t\\tassert res.status_code == 201\\n\\t\\tassert 'Post created' in res.get_json()['message']\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710327935, "id": "chatcmpl-92GiN1v5Djt1DHGHNvo1pPVrCSDnz", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1148, "prompt_tokens": 1507, "total_tokens": 2655}}]