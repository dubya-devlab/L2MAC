[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'  # Change this!\\n\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nfrom models import User, Post\\nfrom views import user_blueprint, post_blueprint\\n\\napp.register_blueprint(user_blueprint)\\napp.register_blueprint(post_blueprint)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import get_jwt_identity\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\n\\tdef check_password(self, password):\\n\\t\\t# This should be replaced with a more secure password check\\n\\t\\treturn self.password == password\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\n\\tdef get_username(self):\\n\\t\\treturn User.query.get(self.user_id).username\"\n    },\n    {\n      \"file_path\": \"views.py\",\n      \"file_contents\": \"from flask import Blueprint, request, jsonify\\nfrom flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity\\nfrom models import User, Post\\nfrom app import db\\n\\nuser_blueprint = Blueprint('user', __name__)\\npost_blueprint = Blueprint('post', __name__)\\n\\n\\n@user_blueprint.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Registered successfully'}), 201\\n\\n\\n@user_blueprint.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and user.check_password(data['password']):\\n\\t\\taccess_token = create_access_token(identity=user.username)\\n\\t\\treturn jsonify(access_token=access_token), 200\\n\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\n\\n@post_blueprint.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tusername = get_jwt_identity()\\n\\tuser = User.query.filter_by(username=username).first()\\n\\tnew_post = Post(content=data['content'], user_id=user.id)\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\n@pytest.fixture\\n\\ndef init_database():\\n\\tdb.create_all()\\n\\tyield\\n\\tdb.drop_all()\\n\\n\\ndef test_register(client, init_database):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\n\\ndef test_login(client, init_database):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\n\\ndef test_create_post(client, init_database):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\taccess_token = response.get_json()['access_token']\\n\\tresponse = client.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': f'Bearer {access_token}'})\\n\\tassert response.status_code == 201\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710283011, "id": "chatcmpl-9251n57O5OxvlNxvu5uQJFaJjSjlT", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1144, "prompt_tokens": 1507, "total_tokens": 2651}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\nSECRET_KEY = 'secret'\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(data['username'], data['email'], data['password'], {})\\n\\tusers[data['username']] = new_user\\n\\treturn jsonify({'message': 'Registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user or user.password != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\ttoken = jwt.encode({'user': user.username, 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, SECRET_KEY)\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\ttoken = data.get('token')\\n\\tif not token:\\n\\t\\treturn jsonify({'message': 'Token is missing'}), 401\\n\\ttry:\\n\\t\\tdata = jwt.decode(token, SECRET_KEY)\\n\\texcept:\\n\\t\\treturn jsonify({'message': 'Token is invalid'}), 401\\n\\tnew_post = Post(data['user'], data['content'], 0, 0, [])\\n\\tposts[len(posts)] = new_post\\n\\treturn jsonify({'message': 'Posted successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tresponse = app.register()\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Registered successfully'}\\n\\n\\tresponse = app.login()\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\tresponse = app.post()\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Posted successfully'}\\n\\n\\tresponse = app.login()\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\n\\tresponse = app.post()\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Token is missing'}\\n\\n\\tresponse = app.post()\\n\\tassert response.status_code == 401\\n\\tassert response.get_json() == {'message': 'Token is invalid'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710283051, "id": "chatcmpl-9252R6AXtQNf0rs59S1FxdNXWfHZ3", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 716, "prompt_tokens": 1507, "total_tokens": 2223}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['username'] in users:\\n\\t\\treturn jsonify({'message': 'User already exists'}), 400\\n\\tusers[data['username']] = data\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['username'] not in users or users[data['username']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': data['username'], 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tif 'user' not in data or data['user'] not in users:\\n\\t\\treturn jsonify({'message': 'Invalid user'}), 400\\n\\tif 'text' not in data or len(data['text']) > 280:\\n\\t\\treturn jsonify({'message': 'Invalid post'}), 400\\n\\tposts[len(posts)] = {'user': data['user'], 'text': data['text']}\\n\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef token():\\n\\treturn jwt.encode({'user': 'test', 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.app.config['SECRET_KEY']).decode('UTF-8')\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\ndef test_post(client, token):\\n\\tresponse = client.post('/post', json={'user': 'test', 'text': 'Hello, world!', 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710283076, "id": "chatcmpl-9252qUu0H3AdbKo3kLtYBww3hOHoD", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 696, "prompt_tokens": 1507, "total_tokens": 2203}}]