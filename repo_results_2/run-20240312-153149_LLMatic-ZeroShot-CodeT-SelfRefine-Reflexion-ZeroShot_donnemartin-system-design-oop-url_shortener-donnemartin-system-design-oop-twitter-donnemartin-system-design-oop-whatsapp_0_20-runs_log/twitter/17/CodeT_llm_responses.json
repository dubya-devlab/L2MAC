[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@dataclass\\nclass User:\\n\\tid: int\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tid: int\\n\\tuser_id: int\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(len(users) + 1, data['username'], data['email'], data['password'], {})\\n\\tusers[user.id] = user\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.username == data['username'] and user.password == data['password']:\\n\\t\\t\\ttoken = jwt.encode({'user_id': user.id}, 'secret', algorithm='HS256')\\n\\t\\t\\treturn jsonify({'token': token}), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tpost = Post(len(posts) + 1, data['user_id'], data['content'], 0, 0, [])\\n\\tposts[post.id] = post\\n\\treturn jsonify({'message': 'Post created successfully'}), 201\\n\\n@app.route('/like', methods=['POST'])\\ndef like():\\n\\tdata = request.get_json()\\n\\tpost = posts.get(data['post_id'])\\n\\tif post:\\n\\t\\tpost.likes += 1\\n\\t\\treturn jsonify({'message': 'Post liked'}), 200\\n\\treturn jsonify({'message': 'Post not found'}), 404\\n\\n@app.route('/retweet', methods=['POST'])\\ndef retweet():\\n\\tdata = request.get_json()\\n\\tpost = posts.get(data['post_id'])\\n\\tif post:\\n\\t\\tpost.retweets += 1\\n\\t\\treturn jsonify({'message': 'Post retweeted'}), 200\\n\\treturn jsonify({'message': 'Post not found'}), 404\\n\\n@app.route('/reply', methods=['POST'])\\ndef reply():\\n\\tdata = request.get_json()\\n\\tpost = posts.get(data['post_id'])\\n\\tif post:\\n\\t\\tpost.replies.append(data['reply'])\\n\\t\\treturn jsonify({'message': 'Reply added'}), 200\\n\\treturn jsonify({'message': 'Post not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef token():\\n\\treturn jwt.encode({'user_id': 1}, 'secret', algorithm='HS256')\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\ndef test_post(client, token):\\n\\tresponse = client.post('/post', json={'user_id': 1, 'content': 'Hello, world!', 'token': token})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\\n\\ndef test_like(client, token):\\n\\tresponse = client.post('/like', json={'post_id': 1, 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post liked'}\\n\\ndef test_retweet(client, token):\\n\\tresponse = client.post('/retweet', json={'post_id': 1, 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post retweeted'}\\n\\ndef test_reply(client, token):\\n\\tresponse = client.post('/reply', json={'post_id': 1, 'reply': 'Nice post!', 'token': token})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Reply added'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710408617, "id": "chatcmpl-92bhhdCo20ccMjOdKUU2XSHa7Xua8", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1133, "prompt_tokens": 1507, "total_tokens": 2640}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom post import Post\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or not user.check_password(password):\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<email>', methods=['GET', 'PUT', 'DELETE'])\\ndef user(email):\\n\\tuser = users.get(email)\\n\\tif request.method == 'GET':\\n\\t\\tif not user:\\n\\t\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tif not user:\\n\\t\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\t\\tuser.update(**data)\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\telif request.method == 'DELETE':\\n\\t\\tif not user:\\n\\t\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\t\\tdel users[email]\\n\\t\\treturn jsonify({'message': 'User deleted'}), 200\\n\\n@app.route('/posts', methods=['POST'])\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tpost = Post(**data)\\n\\tposts[post.id] = post\\n\\treturn jsonify(post.to_dict()), 201\\n\\n@app.route('/posts/<post_id>', methods=['GET', 'DELETE'])\\ndef post(post_id):\\n\\tpost = posts.get(post_id)\\n\\tif request.method == 'GET':\\n\\t\\tif not post:\\n\\t\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\t\\treturn jsonify(post.to_dict()), 200\\n\\telif request.method == 'DELETE':\\n\\t\\tif not post:\\n\\t\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\t\\tdel posts[post_id]\\n\\t\\treturn jsonify({'message': 'Post deleted'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from werkzeug.security import generate_password_hash, check_password_hash\\nfrom dataclasses import dataclass\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tusername: str\\n\\tpassword: str\\n\\tbio: str = ''\\n\\twebsite: str = ''\\n\\tlocation: str = ''\\n\\tprivate: bool = False\\n\\n\\tdef __post_init__(self):\\n\\t\\tself.password = generate_password_hash(self.password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password, password)\\n\\n\\tdef update(self, **kwargs):\\n\\t\\tfor key, value in kwargs.items():\\n\\t\\t\\tif hasattr(self, key):\\n\\t\\t\\t\\tsetattr(self, key, value)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {key: value for key, value in self.__dict__.items() if key != 'password'}\"\n    },\n    {\n      \"file_path\": \"post.py\",\n      \"file_contents\": \"from dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\n@dataclass\\nclass Post:\\n\\tuser_email: str\\n\\tcontent: str\\n\\timage_url: str = ''\\n\\tlikes: int = 0\\n\\tretweets: int = 0\\n\\treplies: int = 0\\n\\tid: str = str(uuid.uuid4())\\n\\tcreated_at: str = str(datetime.utcnow())\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710408684, "id": "chatcmpl-92bimWTfVum2xDsqg0YKFlOt96VFX", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 965, "prompt_tokens": 1507, "total_tokens": 2472}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\n\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport routes\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom dataclasses import dataclass\\n\\n@dataclass\\nclass User(db.Model):\\n\\tid: int\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(80), nullable=False)\\n\\n@dataclass\\nclass Post(db.Model):\\n\\tid: int\\n\\tuser_id: int\\n\\tcontent: str\\n\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\n\\tuser = db.relationship('User', backref=db.backref('posts', lazy=True))\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request\\nfrom flask_jwt_extended import create_access_token\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nfrom app import app, db\\nfrom models import User, Post\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=generate_password_hash(data['password']))\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn {'message': 'User created'}, 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif not user or not check_password_hash(user.password, data['password']):\\n\\t\\treturn {'message': 'Invalid credentials'}, 401\\n\\ttoken = create_access_token(identity=user.id)\\n\\treturn {'access_token': token}, 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tnew_post = Post(user_id=data['user_id'], content=data['content'])\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn {'message': 'Post created'}, 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\twith app.app_context():\\n\\t\\tdb.drop_all()\\n\\n@pytest.fixture\\ndef init_database():\\n\\twith app.app_context():\\n\\t\\tdb.create_all()\\n\\t\\tyield db\\n\\n\\twith app.app_context():\\n\\t\\tdb.drop_all()\\n\\n\\ndef test_register(client, init_database):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'User created'}\\n\\n\\ndef test_login(client, init_database):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_database.session.add(user)\\n\\tinit_database.session.commit()\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_post(client, init_database):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_database.session.add(user)\\n\\tinit_database.session.commit()\\n\\tresponse = client.post('/post', json={'user_id': user.id, 'content': 'Hello, world!'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == {'message': 'Post created'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710408732, "id": "chatcmpl-92bjYWGd2WJcx1JpbuQYLqSxrZCXj", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1101, "prompt_tokens": 1507, "total_tokens": 2608}}]