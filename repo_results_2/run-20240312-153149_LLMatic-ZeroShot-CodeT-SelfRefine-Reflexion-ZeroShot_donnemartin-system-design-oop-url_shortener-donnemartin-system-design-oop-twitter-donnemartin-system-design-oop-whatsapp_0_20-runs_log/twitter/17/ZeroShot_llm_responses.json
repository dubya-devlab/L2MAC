[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom post import Post\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['email'])\\n\\tif user and user.password == data['password']:\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/users/<email>', methods=['GET', 'PUT'])\\ndef user(email):\\n\\tuser = users.get(email)\\n\\tif request.method == 'GET':\\n\\t\\tif user:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tif user:\\n\\t\\t\\tuser.update(**data)\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/posts', methods=['POST'])\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tpost = Post(**data)\\n\\tposts[post.id] = post\\n\\treturn jsonify(post.to_dict()), 201\\n\\n@app.route('/posts/<post_id>', methods=['GET', 'DELETE'])\\ndef post(post_id):\\n\\tpost = posts.get(post_id)\\n\\tif request.method == 'GET':\\n\\t\\tif post:\\n\\t\\t\\treturn jsonify(post.to_dict()), 200\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\telif request.method == 'DELETE':\\n\\t\\tif post:\\n\\t\\t\\tdel posts[post_id]\\n\\t\\t\\treturn jsonify({'message': 'Post deleted'}), 200\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tusername: str\\n\\tpassword: str\\n\\tprofile_picture: str = field(default=None)\\n\\tbio: str = field(default=None)\\n\\twebsite_link: str = field(default=None)\\n\\tlocation: str = field(default=None)\\n\\tprivate: bool = field(default=False)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\\n\\n\\tdef update(self, **kwargs):\\n\\t\\tfor key, value in kwargs.items():\\n\\t\\t\\tif hasattr(self, key):\\n\\t\\t\\t\\tsetattr(self, key, value)\"\n    },\n    {\n      \"file_path\": \"post.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom datetime import datetime\\nimport uuid\\n\\n@dataclass\\nclass Post:\\n\\tuser_email: str\\n\\tcontent: str\\n\\timage: str = field(default=None)\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\tcreated_at: datetime = field(default_factory=datetime.now)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom post import Post\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User(email='test@test.com', username='test', password='test')\\n\\n@pytest.fixture\\ndef post(user):\\n\\treturn Post(user_email=user.email, content='Hello, World!')\\n\\ndef test_register(client, user):\\n\\tresponse = client.post('/register', json=user.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_login(client, user):\\n\\tapp.users[user.email] = user\\n\\tresponse = client.post('/login', json={'email': user.email, 'password': user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_create_post(client, post):\\n\\tresponse = client.post('/posts', json=post.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == post.to_dict()\\n\\ndef test_get_post(client, post):\\n\\tapp.posts[post.id] = post\\n\\tresponse = client.get(f'/posts/{post.id}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == post.to_dict()\\n\\ndef test_delete_post(client, post):\\n\\tapp.posts[post.id] = post\\n\\tresponse = client.delete(f'/posts/{post.id}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post deleted'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710409218, "id": "chatcmpl-92brOnW9bFM8POL7a3qtQQj7HY0H4", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1205, "prompt_tokens": 1507, "total_tokens": 2712}}]