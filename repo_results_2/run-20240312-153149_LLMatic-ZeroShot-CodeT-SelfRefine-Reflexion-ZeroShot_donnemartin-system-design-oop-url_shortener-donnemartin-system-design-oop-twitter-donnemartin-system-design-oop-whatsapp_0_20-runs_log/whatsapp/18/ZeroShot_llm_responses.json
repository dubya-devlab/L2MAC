[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.check_password(data['password']):\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn jsonify({'error': 'Invalid email or password'}), 401\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email']:\\n\\t\\t\\tuser.reset_password()\\n\\t\\t\\treturn jsonify({'message': 'Password reset'}), 200\\n\\treturn jsonify({'error': 'Email not found'}), 404\\n\\n@app.route('/users/<user_id>/profile', methods=['GET', 'PUT'])\\ndef user_profile(user_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tuser.update_profile(data)\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<user_id>/block', methods=['POST'])\\ndef block_user(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\tblocked_user = users.get(data['blocked_user_id'])\\n\\tif not blocked_user:\\n\\t\\treturn jsonify({'error': 'Blocked user not found'}), 404\\n\\tuser.block_user(blocked_user)\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<user_id>/unblock', methods=['POST'])\\ndef unblock_user(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\tunblocked_user = users.get(data['unblocked_user_id'])\\n\\tif not unblocked_user:\\n\\t\\treturn jsonify({'error': 'Unblocked user not found'}), 404\\n\\tuser.unblock_user(unblocked_user)\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<user_id>/chats', methods=['POST'])\\ndef create_chat(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\tchat = Chat(user)\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chats/<chat_id>', methods=['GET', 'PUT', 'DELETE'])\\ndef manage_chat(chat_id):\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn jsonify({'error': 'Chat not found'}), 404\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(chat.to_dict()), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tchat.update_chat(data)\\n\\t\\treturn jsonify(chat.to_dict()), 200\\n\\telif request.method == 'DELETE':\\n\\t\\tdel chats[chat_id]\\n\\t\\treturn jsonify({'message': 'Chat deleted'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nimport uuid\\nimport hashlib\\n\\n@dataclass\\nclass User:\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = ''\\n\\tstatus_message: str = ''\\n\\tblocked_users: List[str] = field(default_factory=list)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn self.password == hashlib.sha256(password.encode()).hexdigest()\\n\\n\\tdef reset_password(self):\\n\\t\\tself.password = hashlib.sha256('default'.encode()).hexdigest()\\n\\n\\tdef update_profile(self, data):\\n\\t\\tself.profile_picture = data.get('profile_picture', self.profile_picture)\\n\\t\\tself.status_message = data.get('status_message', self.status_message)\\n\\n\\tdef block_user(self, user):\\n\\t\\tself.blocked_users.append(user.id)\\n\\n\\tdef unblock_user(self, user):\\n\\t\\tself.blocked_users.remove(user.id)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'profile_picture': self.profile_picture,\\n\\t\\t\\t'status_message': self.status_message,\\n\\t\\t\\t'blocked_users': self.blocked_users\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom typing import List\\nimport uuid\\n\\n@dataclass\\nclass Chat:\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\tusers: List[str]\\n\\tmessages: List[dict] = field(default_factory=list)\\n\\n\\tdef update_chat(self, data):\\n\\t\\tself.users = data.get('users', self.users)\\n\\t\\tself.messages = data.get('messages', self.messages)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'users': self.users,\\n\\t\\t\\t'messages': self.messages\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\ndef test_login(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['id'] == user.id\\n\\ndef test_forgot_password(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/forgot_password', json={'email': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Password reset'\\n\\ndef test_user_profile(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.get(f'/users/{user.id}/profile')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['id'] == user.id\\n\\ndef test_block_user(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tblocked_user = User('blocked@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tapp.users[blocked_user.id] = blocked_user\\n\\tresponse = client.post(f'/users/{user.id}/block', json={'blocked_user_id': blocked_user.id})\\n\\tassert response.status_code == 200\\n\\tassert blocked_user.id in response.get_json()['blocked_users']\\n\\ndef test_create_chat(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post(f'/users/{user.id}/chats')\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\ndef test_manage_chat(client):\\n\\tuser = User('test@test.com', 'test')\\n\\tchat = Chat([user.id])\\n\\tapp.users[user.id] = user\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.get(f'/chats/{chat.id}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['id'] == chat.id\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710424577, "id": "chatcmpl-92fr7Z4PuS10IHY4acV89xKGrf3yE", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 2000, "prompt_tokens": 1378, "total_tokens": 3378}}]