[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport json\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nmessages = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or password'}), 400\\n\\tif data['email'] in users:\\n\\t\\treturn jsonify({'error': 'Email already registered'}), 400\\n\\tusers[data['email']] = {'password': data['password'], 'profile': {}, 'contacts': [], 'groups': [], 'status': []}\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'password' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or password'}), 400\\n\\tif data['email'] not in users or users[data['email']]['password'] != data['password']:\\n\\t\\treturn jsonify({'error': 'Invalid email or password'}), 400\\n\\treturn jsonify({'message': 'User logged in successfully'}), 200\\n\\n@app.route('/update_profile', methods=['POST'])\\ndef update_profile():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'profile' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or profile data'}), 400\\n\\tif data['email'] not in users:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\tusers[data['email']]['profile'] = data['profile']\\n\\treturn jsonify({'message': 'Profile updated successfully'}), 200\\n\\n@app.route('/add_contact', methods=['POST'])\\ndef add_contact():\\n\\tdata = request.get_json()\\n\\tif 'email' not in data or 'contact' not in data:\\n\\t\\treturn jsonify({'error': 'Missing email or contact'}), 400\\n\\tif data['email'] not in users or data['contact'] not in users:\\n\\t\\treturn jsonify({'error': 'User or contact not found'}), 404\\n\\tusers[data['email']]['contacts'].append(data['contact'])\\n\\treturn jsonify({'message': 'Contact added successfully'}), 200\\n\\n@app.route('/send_message', methods=['POST'])\\ndef send_message():\\n\\tdata = request.get_json()\\n\\tif 'sender' not in data or 'receiver' not in data or 'message' not in data:\\n\\t\\treturn jsonify({'error': 'Missing sender, receiver or message'}), 400\\n\\tif data['sender'] not in users or data['receiver'] not in users:\\n\\t\\treturn jsonify({'error': 'Sender or receiver not found'}), 404\\n\\tmessages.setdefault(data['sender'], []).append({'to': data['receiver'], 'message': data['message']})\\n\\treturn jsonify({'message': 'Message sent successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User logged in successfully'}\\n\\n\\ndef test_update_profile(client):\\n\\tresponse = client.post('/update_profile', json={'email': 'test@test.com', 'profile': {'picture': 'pic.jpg', 'status': 'Hello'}})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Profile updated successfully'}\\n\\n\\ndef test_add_contact(client):\\n\\tresponse = client.post('/add_contact', json={'email': 'test@test.com', 'contact': 'contact@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Contact added successfully'}\\n\\n\\ndef test_send_message(client):\\n\\tresponse = client.post('/send_message', json={'sender': 'test@test.com', 'receiver': 'contact@test.com', 'message': 'Hello'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Message sent successfully'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710346015, "id": "chatcmpl-92LPzZjebXHQevQUgJJmCO0jbVm4z", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1118, "prompt_tokens": 1378, "total_tokens": 2496}}]