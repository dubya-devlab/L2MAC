[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn 'Invalid email or password', 401\\n\\n@app.route('/forgot_password', methods=['POST'])\\ndef forgot_password():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email']:\\n\\t\\t\\tuser.reset_password()\\n\\t\\t\\treturn 'Password reset email sent', 200\\n\\treturn 'Email not found', 404\\n\\n@app.route('/users/<user_id>', methods=['GET', 'PUT'])\\ndef user(user_id):\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn 'User not found', 404\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tuser.update_profile(data)\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/users/<user_id>/block', methods=['POST'])\\ndef block_user(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn 'User not found', 404\\n\\tuser_to_block = users.get(data['user_to_block'])\\n\\tif not user_to_block:\\n\\t\\treturn 'User to block not found', 404\\n\\tuser.block_user(user_to_block)\\n\\treturn 'User blocked', 200\\n\\n@app.route('/users/<user_id>/unblock', methods=['POST'])\\ndef unblock_user(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif not user:\\n\\t\\treturn 'User not found', 404\\n\\tuser_to_unblock = users.get(data['user_to_unblock'])\\n\\tif not user_to_unblock:\\n\\t\\treturn 'User to unblock not found', 404\\n\\tuser.unblock_user(user_to_unblock)\\n\\treturn 'User unblocked', 200\\n\\n@app.route('/chats', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chats/<chat_id>', methods=['GET', 'PUT'])\\ndef chat(chat_id):\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn 'Chat not found', 404\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(chat.to_dict()), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tchat.update_chat(data)\\n\\t\\treturn jsonify(chat.to_dict()), 200\\n\\n@app.route('/chats/<chat_id>/add_user', methods=['POST'])\\ndef add_user_to_chat(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn 'Chat not found', 404\\n\\tuser_to_add = users.get(data['user_to_add'])\\n\\tif not user_to_add:\\n\\t\\treturn 'User to add not found', 404\\n\\tchat.add_user(user_to_add)\\n\\treturn 'User added to chat', 200\\n\\n@app.route('/chats/<chat_id>/remove_user', methods=['POST'])\\ndef remove_user_from_chat(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif not chat:\\n\\t\\treturn 'Chat not found', 404\\n\\tuser_to_remove = users.get(data['user_to_remove'])\\n\\tif not user_to_remove:\\n\\t\\treturn 'User to remove not found', 404\\n\\tchat.remove_user(user_to_remove)\\n\\treturn 'User removed from chat', 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nimport uuid\\n\\n@dataclass\\nclass User:\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = None\\n\\tstatus_message: str = None\\n\\tblocked_users: list = field(default_factory=list)\\n\\n\\tdef reset_password(self):\\n\\t\\tself.password = 'new_password'\\n\\n\\tdef update_profile(self, data):\\n\\t\\tself.profile_picture = data.get('profile_picture', self.profile_picture)\\n\\t\\tself.status_message = data.get('status_message', self.status_message)\\n\\n\\tdef block_user(self, user):\\n\\t\\tself.blocked_users.append(user.id)\\n\\n\\tdef unblock_user(self, user):\\n\\t\\tself.blocked_users.remove(user.id)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'profile_picture': self.profile_picture,\\n\\t\\t\\t'status_message': self.status_message,\\n\\t\\t\\t'blocked_users': self.blocked_users\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nimport uuid\\n\\n@dataclass\\nclass Chat:\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\tname: str\\n\\tusers: list = field(default_factory=list)\\n\\n\\tdef add_user(self, user):\\n\\t\\tself.users.append(user.id)\\n\\n\\tdef remove_user(self, user):\\n\\t\\tself.users.remove(user.id)\\n\\n\\tdef update_chat(self, data):\\n\\t\\tself.name = data.get('name', self.name)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'users': self.users\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User('test@test.com', 'password')\\n\\n@pytest.fixture\\ndef chat():\\n\\treturn Chat('Test Chat')\\n\\ndef test_register(client, user):\\n\\tresponse = client.post('/register', json=user.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_login(client, user):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': user.email, 'password': user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_forgot_password(client, user):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/forgot_password', json={'email': user.email})\\n\\tassert response.status_code == 200\\n\\tassert user.password == 'new_password'\\n\\ndef test_user(client, user):\\n\\tapp.users[user.id] = user\\n\\tresponse = client.get(f'/users/{user.id}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\tresponse = client.put(f'/users/{user.id}', json={'profile_picture': 'new_picture.jpg', 'status_message': 'Hello, world!'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\ndef test_block_user(client, user):\\n\\tapp.users[user.id] = user\\n\\tuser_to_block = User('block@test.com', 'password')\\n\\tapp.users[user_to_block.id] = user_to_block\\n\\tresponse = client.post(f'/users/{user.id}/block', json={'user_to_block': user_to_block.id})\\n\\tassert response.status_code == 200\\n\\tassert user_to_block.id in user.blocked_users\\n\\ndef test_unblock_user(client, user):\\n\\tapp.users[user.id] = user\\n\\tuser_to_unblock = User('unblock@test.com', 'password')\\n\\tapp.users[user_to_unblock.id] = user_to_unblock\\n\\tuser.block_user(user_to_unblock)\\n\\tresponse = client.post(f'/users/{user.id}/unblock', json={'user_to_unblock': user_to_unblock.id})\\n\\tassert response.status_code == 200\\n\\tassert user_to_unblock.id not in user.blocked_users\\n\\ndef test_create_chat(client, chat):\\n\\tresponse = client.post('/chats', json=chat.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == chat.to_dict()\\n\\ndef test_chat(client, chat):\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.get(f'/chats/{chat.id}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == chat.to_dict()\\n\\tresponse = client.put(f'/chats/{chat.id}', json={'name': 'New Chat Name'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == chat.to_dict()\\n\\ndef test_add_user_to_chat(client, user, chat):\\n\\tapp.users[user.id] = user\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.post(f'/chats/{chat.id}/add_user', json={'user_to_add': user.id})\\n\\tassert response.status_code == 200\\n\\tassert user.id in chat.users\\n\\ndef test_remove_user_from_chat(client, user, chat):\\n\\tapp.users[user.id] = user\\n\\tapp.chats[chat.id] = chat\\n\\tchat.add_user(user)\\n\\tresponse = client.post(f'/chats/{chat.id}/remove_user', json={'user_to_remove': user.id})\\n\\tassert response.status_code == 200\\n\\tassert user.id not in chat.users\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710394993, "id": "chatcmpl-92Y9xECsPsMAq9CghtWlxVK4TMPaI", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 2395, "prompt_tokens": 1378, "total_tokens": 3773}}]