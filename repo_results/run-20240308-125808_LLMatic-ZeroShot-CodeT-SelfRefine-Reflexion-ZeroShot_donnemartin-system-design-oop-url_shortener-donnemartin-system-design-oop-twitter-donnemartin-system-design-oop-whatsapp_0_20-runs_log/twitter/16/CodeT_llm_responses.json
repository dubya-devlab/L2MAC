[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom post import Post\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data.get('email'))\\n\\tif user and user.password == data.get('password'):\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n@app.route('/users/<email>', methods=['GET', 'PUT', 'DELETE'])\\ndef user_operations(email):\\n\\tuser = users.get(email)\\n\\tif request.method == 'GET':\\n\\t\\tif user:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tif user:\\n\\t\\t\\tuser.update(**data)\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\telif request.method == 'DELETE':\\n\\t\\tif user:\\n\\t\\t\\tdel users[email]\\n\\t\\t\\treturn jsonify({'message': 'User deleted'}), 200\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\n@app.route('/posts', methods=['POST'])\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tpost = Post(**data)\\n\\tposts[post.id] = post\\n\\treturn jsonify(post.to_dict()), 201\\n\\n@app.route('/posts/<post_id>', methods=['GET', 'DELETE'])\\ndef post_operations(post_id):\\n\\tpost = posts.get(post_id)\\n\\tif request.method == 'GET':\\n\\t\\tif post:\\n\\t\\t\\treturn jsonify(post.to_dict()), 200\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\telif request.method == 'DELETE':\\n\\t\\tif post:\\n\\t\\t\\tdel posts[post_id]\\n\\t\\t\\treturn jsonify({'message': 'Post deleted'}), 200\\n\\t\\treturn jsonify({'message': 'Post not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tusername: str\\n\\tpassword: str\\n\\tprofile_picture: str = field(default=None)\\n\\tbio: str = field(default=None)\\n\\twebsite_link: str = field(default=None)\\n\\tlocation: str = field(default=None)\\n\\tis_private: bool = field(default=False)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\\n\\n\\tdef update(self, **kwargs):\\n\\t\\tfor key, value in kwargs.items():\\n\\t\\t\\tif hasattr(self, key):\\n\\t\\t\\t\\tsetattr(self, key, value)\"\n    },\n    {\n      \"file_path\": \"post.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom datetime import datetime\\nimport uuid\\n\\n@dataclass\\nclass Post:\\n\\tuser_email: str\\n\\tcontent: str\\n\\timage: str = field(default=None)\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\tcreated_at: datetime = field(default_factory=datetime.now)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn self.__dict__\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom post import Post\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User(email='test@test.com', username='test', password='test')\\n\\n@pytest.fixture\\ndef post(user):\\n\\treturn Post(user_email=user.email, content='Hello, World!')\\n\\n\\ndef test_register(client, user):\\n\\tresponse = client.post('/register', json=user.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == user.to_dict()\\n\\n\\ndef test_login(client, user):\\n\\tapp.users[user.email] = user\\n\\tresponse = client.post('/login', json={'email': user.email, 'password': user.password})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == user.to_dict()\\n\\n\\ndef test_create_post(client, post):\\n\\tresponse = client.post('/posts', json=post.to_dict())\\n\\tassert response.status_code == 201\\n\\tassert response.get_json() == post.to_dict()\\n\\n\\ndef test_get_post(client, post):\\n\\tapp.posts[post.id] = post\\n\\tresponse = client.get(f'/posts/{post.id}')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == post.to_dict()\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710016831, "id": "chatcmpl-90xmZS0z7V5McVoBAJro6p6ZHwAjF", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1218, "prompt_tokens": 1507, "total_tokens": 2725}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\n\\njwt = JWTManager(app)\\ndb = SQLAlchemy(app)\\n\\nfrom models import User, Post\\nfrom views import user_blueprint, post_blueprint\\n\\napp.register_blueprint(user_blueprint)\\napp.register_blueprint(post_blueprint)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import get_jwt_identity\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\t\\n\\tdef check_password(self, password):\\n\\t\\treturn self.password == password\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\t\\n\\tdef get_username(self):\\n\\t\\treturn User.query.get(self.user_id).username\\n\\n\\t@staticmethod\\n\\tdef get_user_posts(user_id):\\n\\t\\treturn Post.query.filter_by(user_id=user_id).all()\"\n    },\n    {\n      \"file_path\": \"views.py\",\n      \"file_contents\": \"from flask import Blueprint, request, jsonify\\nfrom flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity\\nfrom models import User, Post\\nfrom app import db\\n\\nuser_blueprint = Blueprint('user', __name__)\\npost_blueprint = Blueprint('post', __name__)\\n\\n\\n@user_blueprint.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n\\n@user_blueprint.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif user and user.check_password(data['password']):\\n\\t\\taccess_token = create_access_token(identity=user.username)\\n\\t\\treturn jsonify(access_token=access_token), 200\\n\\telse:\\n\\t\\treturn jsonify({'message': 'Invalid credentials'}), 401\\n\\n\\n@post_blueprint.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tuser_id = User.query.filter_by(username=get_jwt_identity()).first().id\\n\\tnew_post = Post(content=data['content'], user_id=user_id)\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\n\\n@post_blueprint.route('/posts', methods=['GET'])\\n@jwt_required\\n\\ndef get_posts():\\n\\tuser_id = User.query.filter_by(username=get_jwt_identity()).first().id\\n\\tposts = Post.get_user_posts(user_id)\\n\\treturn jsonify({'posts': [post.content for post in posts]}), 200\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\n@pytest.fixture\\n\\ndef init_database():\\n\\tdb.create_all()\\n\\tyield\\n\\tdb.drop_all()\\n\\n\\ndef test_register(client, init_database):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client, init_database):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_create_post(client, init_database):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\taccess_token = response.get_json()['access_token']\\n\\tresponse = client.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': f'Bearer {access_token}'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\\n\\n\\ndef test_get_posts(client, init_database):\\n\\tclient.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\taccess_token = response.get_json()['access_token']\\n\\tclient.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': f'Bearer {access_token}'})\\n\\tresponse = client.get('/posts', headers={'Authorization': f'Bearer {access_token}'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'posts': ['Hello, world!']}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710016867, "id": "chatcmpl-90xn9aRtybBSGiIQDZpJfUQKG7e0R", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1429, "prompt_tokens": 1507, "total_tokens": 2936}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['username'] in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[data['username']] = data\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = users.get(data['username'])\\n\\tif not user or user['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': user['username'], 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test', 'email': 'test@test.com'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test', 'email': 'test@test.com'})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Username already exists'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'wrong'})\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710016909, "id": "chatcmpl-90xnph1YEpBozpUEZ7MKr3gpr1chY", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 572, "prompt_tokens": 1507, "total_tokens": 2079}}]