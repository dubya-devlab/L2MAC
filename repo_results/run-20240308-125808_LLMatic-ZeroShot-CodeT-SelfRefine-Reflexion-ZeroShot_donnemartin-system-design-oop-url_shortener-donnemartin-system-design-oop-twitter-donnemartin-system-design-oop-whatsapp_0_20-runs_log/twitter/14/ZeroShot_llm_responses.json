[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile: dict\\n\\n@dataclass\\nclass Post:\\n\\tuser: str\\n\\tcontent: str\\n\\tlikes: int\\n\\tretweets: int\\n\\treplies: list\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\temail = data['email']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, email, password, {})\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'username': username}, 'secret', algorithm='HS256')\\n\\treturn jsonify({'token': token}), 200\\n\\n@app.route('/profile', methods=['GET', 'POST'])\\ndef profile():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif 'token' not in data or jwt.decode(data['token'], 'secret', algorithms=['HS256'])['username'] != username:\\n\\t\\treturn jsonify({'message': 'Invalid token'}), 400\\n\\tif request.method == 'GET':\\n\\t\\treturn jsonify(users[username].profile), 200\\n\\telif request.method == 'POST':\\n\\t\\tusers[username].profile = data['profile']\\n\\t\\treturn jsonify({'message': 'Profile updated successfully'}), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef post():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tcontent = data['content']\\n\\tif 'token' not in data or jwt.decode(data['token'], 'secret', algorithms=['HS256'])['username'] != username:\\n\\t\\treturn jsonify({'message': 'Invalid token'}), 400\\n\\tif username not in posts:\\n\\t\\tposts[username] = []\\n\\tposts[username].append(Post(username, content, 0, 0, []))\\n\\treturn jsonify({'message': 'Post created successfully'}), 200\\n\\n@app.route('/like', methods=['POST'])\\ndef like():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpost_id = data['post_id']\\n\\tif 'token' not in data or jwt.decode(data['token'], 'secret', algorithms=['HS256'])['username'] != username:\\n\\t\\treturn jsonify({'message': 'Invalid token'}), 400\\n\\tif username not in posts or post_id >= len(posts[username]):\\n\\t\\treturn jsonify({'message': 'Invalid post ID'}), 400\\n\\tposts[username][post_id].likes += 1\\n\\treturn jsonify({'message': 'Post liked successfully'}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef token():\\n\\treturn jwt.encode({'username': 'test'}, 'secret', algorithm='HS256')\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\ndef test_profile(client, token):\\n\\tresponse = client.post('/profile', json={'username': 'test', 'token': token, 'profile': {'bio': 'test bio'}})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Profile updated successfully'}\\n\\n\\ndef test_post(client, token):\\n\\tresponse = client.post('/post', json={'username': 'test', 'token': token, 'content': 'test post'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post created successfully'}\\n\\n\\ndef test_like(client, token):\\n\\tresponse = client.post('/like', json={'username': 'test', 'token': token, 'post_id': 0})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'Post liked successfully'}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710006250, "id": "chatcmpl-90v1ujDvtPILBj1v9tKFI89WiCqQN", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1221, "prompt_tokens": 1507, "total_tokens": 2728}}]