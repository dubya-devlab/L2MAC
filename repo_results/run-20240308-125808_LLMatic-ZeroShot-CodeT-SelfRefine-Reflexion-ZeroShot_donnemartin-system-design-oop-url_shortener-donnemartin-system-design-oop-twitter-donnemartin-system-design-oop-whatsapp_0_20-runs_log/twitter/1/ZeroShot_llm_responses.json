[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\n\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\ndb = SQLAlchemy(app)\\njwt = JWTManager(app)\\n\\nimport models\\nimport routes\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom flask_jwt_extended import create_access_token\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nfrom datetime import datetime, timedelta\\n\\n\\nclass User(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(120), nullable=False)\\n\\t\\n\\tdef __init__(self, username, email, password):\\n\\t\\tself.username = username\\n\\t\\tself.email = email\\n\\t\\tself.password = generate_password_hash(password)\\n\\t\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password, password)\\n\\t\\n\\tdef get_token(self, expires_in=600):\\n\\t\\texpire_delta = timedelta(expires_in)\\n\\t\\ttoken = create_access_token(identity=self.id, expires_delta=expire_delta)\\n\\t\\treturn token\\n\\n\\nclass Post(db.Model):\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tcontent = db.Column(db.String(280), nullable=False)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\\n\\t\\n\\tdef __init__(self, content, user_id):\\n\\t\\tself.content = content\\n\\t\\tself.user_id = user_id\"\n    },\n    {\n      \"file_path\": \"routes.py\",\n      \"file_contents\": \"from flask import request, jsonify\\nfrom app import app, db\\nfrom models import User, Post\\nfrom flask_jwt_extended import jwt_required, get_jwt_identity\\n\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tnew_user = User(username=data['username'], email=data['email'], password=data['password'])\\n\\tdb.session.add(new_user)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'User registered successfully'}), 201\\n\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = User.query.filter_by(username=data['username']).first()\\n\\tif not user or not user.check_password(data['password']):\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 401\\n\\ttoken = user.get_token()\\n\\treturn jsonify({'access_token': token}), 200\\n\\n\\n@app.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef post():\\n\\tdata = request.get_json()\\n\\tuser_id = get_jwt_identity()\\n\\tnew_post = Post(content=data['content'], user_id=user_id)\\n\\tdb.session.add(new_post)\\n\\tdb.session.commit()\\n\\treturn jsonify({'message': 'Post created successfully'}), 201\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n\\n@pytest.fixture\\n\\ndef init_database():\\n\\tdb.create_all()\\n\\tuser1 = User(username='user1', email='user1@example.com', password='password')\\n\\tuser2 = User(username='user2', email='user2@example.com', password='password')\\n\\tdb.session.add(user1)\\n\\tdb.session.add(user2)\\n\\tdb.session.commit()\\n\\tyield db\\n\\tdb.drop_all()\\n\\n\\ndef test_register(client, init_database):\\n\\tresponse = client.post('/register', json={'username': 'user3', 'email': 'user3@example.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'User registered successfully'\\n\\n\\ndef test_login(client, init_database):\\n\\tresponse = client.post('/login', json={'username': 'user1', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_post(client, init_database):\\n\\tresponse = client.post('/login', json={'username': 'user1', 'password': 'password'})\\n\\taccess_token = response.get_json()['access_token']\\n\\tresponse = client.post('/post', json={'content': 'Hello, World!'}, headers={'Authorization': f'Bearer {access_token}'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['message'] == 'Post created successfully'\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709916377, "id": "chatcmpl-90XeL6uhQGyECtB5BY0bNxmTTepZU", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1218, "prompt_tokens": 1507, "total_tokens": 2725}}]