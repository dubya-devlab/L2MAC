[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"requirements.txt\",\n      \"file_contents\": \"flask\\nflask_sqlalchemy\\nflask_jwt_extended\\npytest\\npytest-flask\"\n    },\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom flask_sqlalchemy import SQLAlchemy\\nfrom flask_jwt_extended import JWTManager, create_access_token, jwt_required\\n\\napp = Flask(__name__)\\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\napp.config['JWT_SECRET_KEY'] = 'super-secret'\\n\\njwt = JWTManager(app)\\ndb = SQLAlchemy(app)\\n\\nfrom models import User, Post\\nfrom services import UserService, PostService\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = UserService.register(data)\\n\\treturn jsonify(user), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tuser = UserService.login(data)\\n\\tif user:\\n\\t\\taccess_token = create_access_token(identity=user['id'])\\n\\t\\treturn jsonify(access_token=access_token), 200\\n\\treturn jsonify(message='Invalid credentials'), 401\\n\\n@app.route('/profile', methods=['GET', 'PUT'])\\n@jwt_required\\n\\ndef profile():\\n\\tif request.method == 'GET':\\n\\t\\tuser = UserService.get_profile()\\n\\t\\treturn jsonify(user), 200\\n\\telif request.method == 'PUT':\\n\\t\\tdata = request.get_json()\\n\\t\\tuser = UserService.update_profile(data)\\n\\t\\treturn jsonify(user), 200\\n\\n@app.route('/post', methods=['POST'])\\n@jwt_required\\n\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tpost = PostService.create_post(data)\\n\\treturn jsonify(post), 201\\n\\n@app.route('/post/<int:post_id>', methods=['GET', 'DELETE'])\\n@jwt_required\\n\\ndef post(post_id):\\n\\tif request.method == 'GET':\\n\\t\\tpost = PostService.get_post(post_id)\\n\\t\\treturn jsonify(post), 200\\n\\telif request.method == 'DELETE':\\n\\t\\tPostService.delete_post(post_id)\\n\\t\\treturn jsonify(message='Post deleted'), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"models.py\",\n      \"file_contents\": \"from app import db\\nfrom dataclasses import dataclass\\n\\n@dataclass\\nclass User(db.Model):\\n\\tid: int\\n\\tusername: str\\n\\temail: str\\n\\tpassword: str\\n\\tbio: str\\n\\twebsite: str\\n\\tlocation: str\\n\\tprivate: bool\\n\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tusername = db.Column(db.String(80), unique=True, nullable=False)\\n\\temail = db.Column(db.String(120), unique=True, nullable=False)\\n\\tpassword = db.Column(db.String(80), nullable=False)\\n\\tbio = db.Column(db.String(280))\\n\\twebsite = db.Column(db.String(120))\\n\\tlocation = db.Column(db.String(120))\\n\\tprivate = db.Column(db.Boolean, default=False)\\n\\n@dataclass\\nclass Post(db.Model):\\n\\tid: int\\n\\tuser_id: int\\n\\tcontent: str\\n\\n\\tid = db.Column(db.Integer, primary_key=True)\\n\\tuser_id = db.Column(db.Integer, db.ForeignKey('user.id'))\\n\\tcontent = db.Column(db.String(280), nullable=False)\"\n    },\n    {\n      \"file_path\": \"services.py\",\n      \"file_contents\": \"from models import User, Post\\nfrom app import db\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\nfrom flask_jwt_extended import get_jwt_identity\\n\\nclass UserService:\\n\\t@staticmethod\\n\\tdef register(data):\\n\\t\\tuser = User(username=data['username'], email=data['email'], password=generate_password_hash(data['password']))\\n\\t\\tdb.session.add(user)\\n\\t\\tdb.session.commit()\\n\\t\\treturn user\\n\\n\\t@staticmethod\\n\\tdef login(data):\\n\\t\\tuser = User.query.filter_by(email=data['email']).first()\\n\\t\\tif user and check_password_hash(user.password, data['password']):\\n\\t\\t\\treturn user\\n\\t\\treturn None\\n\\n\\t@staticmethod\\n\\tdef get_profile():\\n\\t\\tuser_id = get_jwt_identity()\\n\\t\\tuser = User.query.get(user_id)\\n\\t\\treturn user\\n\\n\\t@staticmethod\\n\\tdef update_profile(data):\\n\\t\\tuser_id = get_jwt_identity()\\n\\t\\tuser = User.query.get(user_id)\\n\\t\\tuser.bio = data.get('bio', user.bio)\\n\\t\\tuser.website = data.get('website', user.website)\\n\\t\\tuser.location = data.get('location', user.location)\\n\\t\\tuser.private = data.get('private', user.private)\\n\\t\\tdb.session.commit()\\n\\t\\treturn user\\n\\nclass PostService:\\n\\t@staticmethod\\n\\tdef create_post(data):\\n\\t\\tuser_id = get_jwt_identity()\\n\\t\\tpost = Post(user_id=user_id, content=data['content'])\\n\\t\\tdb.session.add(post)\\n\\t\\tdb.session.commit()\\n\\t\\treturn post\\n\\n\\t@staticmethod\\n\\tdef get_post(post_id):\\n\\t\\tpost = Post.query.get(post_id)\\n\\t\\treturn post\\n\\n\\t@staticmethod\\n\\tdef delete_post(post_id):\\n\\t\\tpost = Post.query.get(post_id)\\n\\t\\tdb.session.delete(post)\\n\\t\\tdb.session.commit()\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nfrom app import app, db\\nfrom models import User, Post\\n\\n@pytest.fixture\\n\\ndef client():\\n\\tapp.config['TESTING'] = True\\n\\tapp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'\\n\\twith app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\n\\ndef init_db():\\n\\tdb.create_all()\\n\\tyield db\\n\\tdb.drop_all()\\n\\n\\ndef test_register(client, init_db):\\n\\tresponse = client.post('/register', json={'username': 'test', 'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['username'] == 'test'\\n\\n\\ndef test_login(client, init_db):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_db.session.add(user)\\n\\tinit_db.session.commit()\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert 'access_token' in response.get_json()\\n\\n\\ndef test_profile(client, init_db):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_db.session.add(user)\\n\\tinit_db.session.commit()\\n\\tresponse = client.get('/profile', headers={'Authorization': f'Bearer {user.id}'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['username'] == 'test'\\n\\n\\ndef test_create_post(client, init_db):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_db.session.add(user)\\n\\tinit_db.session.commit()\\n\\tresponse = client.post('/post', json={'content': 'Hello, world!'}, headers={'Authorization': f'Bearer {user.id}'})\\n\\tassert response.status_code == 201\\n\\tassert response.get_json()['content'] == 'Hello, world!'\\n\\n\\ndef test_get_post(client, init_db):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_db.session.add(user)\\n\\tpost = Post(user_id=user.id, content='Hello, world!')\\n\\tinit_db.session.add(post)\\n\\tinit_db.session.commit()\\n\\tresponse = client.get(f'/post/{post.id}', headers={'Authorization': f'Bearer {user.id}'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['content'] == 'Hello, world!'\\n\\n\\ndef test_delete_post(client, init_db):\\n\\tuser = User(username='test', email='test@test.com', password='test')\\n\\tinit_db.session.add(user)\\n\\tpost = Post(user_id=user.id, content='Hello, world!')\\n\\tinit_db.session.add(post)\\n\\tinit_db.session.commit()\\n\\tresponse = client.delete(f'/post/{post.id}', headers={'Authorization': f'Bearer {user.id}'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['message'] == 'Post deleted'\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709938977, "id": "chatcmpl-90dWrOmmBy1uPbIJv5wMZbGbeVW9h", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1978, "prompt_tokens": 1507, "total_tokens": 3485}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom post import Post\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(**data)\\n\\tusers[user.email] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\temail = data.get('email')\\n\\tpassword = data.get('password')\\n\\tuser = users.get(email)\\n\\tif not user or not user.check_password(password):\\n\\t\\treturn jsonify({'message': 'Invalid email or password'}), 401\\n\\treturn jsonify(user.to_dict()), 200\\n\\n@app.route('/post', methods=['POST'])\\ndef create_post():\\n\\tdata = request.get_json()\\n\\tpost = Post(**data)\\n\\tposts[post.id] = post\\n\\treturn jsonify(post.to_dict()), 201\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom werkzeug.security import generate_password_hash, check_password_hash\\n\\n@dataclass\\nclass User:\\n\\temail: str\\n\\tusername: str\\n\\tpassword: str\\n\\tbio: str = field(default='')\\n\\twebsite: str = field(default='')\\n\\tlocation: str = field(default='')\\n\\tprivate: bool = field(default=False)\\n\\n\\tdef __post_init__(self):\\n\\t\\tself.password = generate_password_hash(self.password)\\n\\n\\tdef check_password(self, password):\\n\\t\\treturn check_password_hash(self.password, password)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'email': self.email, 'username': self.username, 'bio': self.bio, 'website': self.website, 'location': self.location, 'private': self.private}\"\n    },\n    {\n      \"file_path\": \"post.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\nfrom datetime import datetime\\nimport uuid\\n\\n@dataclass\\nclass Post:\\n\\tuser_email: str\\n\\tcontent: str\\n\\timage_url: str = field(default='')\\n\\tlikes: int = field(default=0)\\n\\tretweets: int = field(default=0)\\n\\treplies: int = field(default=0)\\n\\tid: str = field(default_factory=lambda: str(uuid.uuid4()))\\n\\ttimestamp: datetime = field(default_factory=datetime.now)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {'id': self.id, 'user_email': self.user_email, 'content': self.content, 'image_url': self.image_url, 'likes': self.likes, 'retweets': self.retweets, 'replies': self.replies, 'timestamp': self.timestamp.isoformat()}\"\n    },\n    {\n      \"file_path\": \"test_user.py\",\n      \"file_contents\": \"import pytest\\nfrom user import User\\n\\n@pytest.fixture\\ndef user():\\n\\treturn User('test@example.com', 'testuser', 'password')\\n\\n\\ndef test_check_password(user):\\n\\tassert user.check_password('password')\\n\\tassert not user.check_password('wrongpassword')\\n\\n\\ndef test_to_dict(user):\\n\\tuser_dict = user.to_dict()\\n\\tassert user_dict['email'] == 'test@example.com'\\n\\tassert user_dict['username'] == 'testuser'\\n\\tassert 'password' not in user_dict\"\n    },\n    {\n      \"file_path\": \"test_post.py\",\n      \"file_contents\": \"import pytest\\nfrom post import Post\\n\\n@pytest.fixture\\ndef post():\\n\\treturn Post('test@example.com', 'Hello, world!')\\n\\n\\ndef test_to_dict(post):\\n\\tpost_dict = post.to_dict()\\n\\tassert post_dict['user_email'] == 'test@example.com'\\n\\tassert post_dict['content'] == 'Hello, world!'\\n\\tassert post_dict['likes'] == 0\\n\\tassert post_dict['retweets'] == 0\\n\\tassert post_dict['replies'] == 0\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709939052, "id": "chatcmpl-90dY4d2T1DPyFrFF5XQcsETnfZuo6", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 962, "prompt_tokens": 1507, "total_tokens": 2469}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom dataclasses import dataclass\\nimport jwt\\nimport datetime\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nposts = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tif data['username'] in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[data['username']] = data\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tif data['username'] not in users or users[data['username']]['password'] != data['password']:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\ttoken = jwt.encode({'user': data['username'], 'exp': datetime.datetime.utcnow() + datetime.timedelta(minutes=30)}, app.config['SECRET_KEY'])\\n\\treturn jsonify({'token': token.decode('UTF-8')}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport jwt\\n\\ndef test_register():\\n\\tapp.users = {}\\n\\tresponse = app.register()\\n\\tassert response.status_code == 200\\n\\tassert response.get_json() == {'message': 'User registered successfully'}\\n\\n\\tresponse = app.register()\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Username already exists'}\\n\\n\\tapp.users = {}\\n\\n\\ndef test_login():\\n\\tapp.users = {'test': {'username': 'test', 'password': 'test'}}\\n\\tresponse = app.login()\\n\\tassert response.status_code == 200\\n\\tassert 'token' in response.get_json()\\n\\n\\tresponse = app.login()\\n\\tassert response.status_code == 400\\n\\tassert response.get_json() == {'message': 'Invalid username or password'}\\n\\n\\tapp.users = {}\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709939087, "id": "chatcmpl-90dYdimKTUhGdVaSfGOBdDywvvP8V", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 497, "prompt_tokens": 1507, "total_tokens": 2004}}]