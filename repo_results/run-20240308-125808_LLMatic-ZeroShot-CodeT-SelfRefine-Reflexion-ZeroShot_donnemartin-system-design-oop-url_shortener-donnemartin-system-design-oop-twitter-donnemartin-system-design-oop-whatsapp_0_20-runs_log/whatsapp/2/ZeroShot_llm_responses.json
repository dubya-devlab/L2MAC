[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify\\nfrom user import User\\nfrom chat import Chat\\n\\napp = Flask(__name__)\\n\\nusers = {}\\nchats = {}\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tuser = User(data['email'], data['password'])\\n\\tusers[user.id] = user\\n\\treturn jsonify(user.to_dict()), 201\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tfor user in users.values():\\n\\t\\tif user.email == data['email'] and user.password == data['password']:\\n\\t\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'Invalid credentials'}, 401\\n\\n@app.route('/users/<user_id>/profile', methods=['PUT'])\\ndef update_profile(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif user:\\n\\t\\tuser.update_profile(data)\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'User not found'}, 404\\n\\n@app.route('/users/<user_id>/contacts', methods=['POST'])\\ndef block_contact(user_id):\\n\\tdata = request.get_json()\\n\\tuser = users.get(user_id)\\n\\tif user:\\n\\t\\tuser.block_contact(data['contact_id'])\\n\\t\\treturn jsonify(user.to_dict()), 200\\n\\treturn {'message': 'User not found'}, 404\\n\\n@app.route('/chats', methods=['POST'])\\ndef create_chat():\\n\\tdata = request.get_json()\\n\\tchat = Chat(data['name'], data['user_ids'])\\n\\tchats[chat.id] = chat\\n\\treturn jsonify(chat.to_dict()), 201\\n\\n@app.route('/chats/<chat_id>/messages', methods=['POST'])\\ndef send_message(chat_id):\\n\\tdata = request.get_json()\\n\\tchat = chats.get(chat_id)\\n\\tif chat:\\n\\t\\tchat.send_message(data['user_id'], data['content'])\\n\\t\\treturn jsonify(chat.to_dict()), 200\\n\\treturn {'message': 'Chat not found'}, 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"user.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\n\\n@dataclass\\nclass User:\\n\\tid: str\\n\\temail: str\\n\\tpassword: str\\n\\tprofile_picture: str = field(default=None)\\n\\tstatus_message: str = field(default=None)\\n\\tblocked_contacts: list = field(default_factory=list)\\n\\n\\tdef update_profile(self, data):\\n\\t\\tself.profile_picture = data.get('profile_picture', self.profile_picture)\\n\\t\\tself.status_message = data.get('status_message', self.status_message)\\n\\n\\tdef block_contact(self, contact_id):\\n\\t\\tself.blocked_contacts.append(contact_id)\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'email': self.email,\\n\\t\\t\\t'profile_picture': self.profile_picture,\\n\\t\\t\\t'status_message': self.status_message,\\n\\t\\t\\t'blocked_contacts': self.blocked_contacts\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"chat.py\",\n      \"file_contents\": \"from dataclasses import dataclass, field\\n\\n@dataclass\\nclass Chat:\\n\\tid: str\\n\\tname: str\\n\\tuser_ids: list\\n\\tmessages: list = field(default_factory=list)\\n\\n\\tdef send_message(self, user_id, content):\\n\\t\\tself.messages.append({'user_id': user_id, 'content': content})\\n\\n\\tdef to_dict(self):\\n\\t\\treturn {\\n\\t\\t\\t'id': self.id,\\n\\t\\t\\t'name': self.name,\\n\\t\\t\\t'user_ids': self.user_ids,\\n\\t\\t\\t'messages': self.messages\\n\\t\\t}\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom user import User\\nfrom chat import Chat\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'email': 'test@test.com', 'password': 'password'})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\n\\ndef test_login(client):\\n\\tuser = User('test@test.com', 'password')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post('/login', json={'email': 'test@test.com', 'password': 'password'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['id'] == user.id\\n\\n\\ndef test_update_profile(client):\\n\\tuser = User('test@test.com', 'password')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.put(f'/users/{user.id}/profile', json={'profile_picture': 'picture.jpg', 'status_message': 'Hello'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['profile_picture'] == 'picture.jpg'\\n\\tassert response.get_json()['status_message'] == 'Hello'\\n\\n\\ndef test_block_contact(client):\\n\\tuser = User('test@test.com', 'password')\\n\\tapp.users[user.id] = user\\n\\tresponse = client.post(f'/users/{user.id}/contacts', json={'contact_id': 'contact_id'})\\n\\tassert response.status_code == 200\\n\\tassert 'contact_id' in response.get_json()['blocked_contacts']\\n\\n\\ndef test_create_chat(client):\\n\\tresponse = client.post('/chats', json={'name': 'Test Chat', 'user_ids': ['user_id']})\\n\\tassert response.status_code == 201\\n\\tassert 'id' in response.get_json()\\n\\n\\ndef test_send_message(client):\\n\\tchat = Chat('Test Chat', ['user_id'])\\n\\tapp.chats[chat.id] = chat\\n\\tresponse = client.post(f'/chats/{chat.id}/messages', json={'user_id': 'user_id', 'content': 'Hello'})\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['messages'][0]['content'] == 'Hello'\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709927861, "id": "chatcmpl-90adZZWHYRYphuySSeicova85hQWS", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1434, "prompt_tokens": 1378, "total_tokens": 2812}}]