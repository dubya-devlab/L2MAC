[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, password, {})\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\toriginal_url = data['url']\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\tif 'custom_url' in data:\\n\\t\\tshort_url = data['custom_url']\\n\\tif short_url in urls:\\n\\t\\treturn jsonify({'message': 'Short URL already exists'}), 400\\n\\turls[short_url] = URL(original_url, short_url, 0, [], None)\\n\\tusers[username].urls[short_url] = urls[short_url]\\n\\treturn jsonify({'message': 'URL shortened successfully', 'short_url': short_url}), 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\tif short_url not in urls:\\n\\t\\treturn jsonify({'message': 'URL not found'}), 404\\n\\turls[short_url].clicks += 1\\n\\turls[short_url].click_data.append({'time': datetime.now().isoformat()})\\n\\treturn redirect(urls[short_url].original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef analytics():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser_urls = users[username].urls\\n\\tanalytics_data = {}\\n\\tfor url in user_urls:\\n\\t\\tanalytics_data[url] = {'clicks': user_urls[url].clicks, 'click_data': user_urls[url].click_data}\\n\\treturn jsonify(analytics_data), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\nfrom flask import Flask\\nfrom werkzeug.wrappers import response\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Logged in successfully'}\\n\\n\\ndef test_shorten(client):\\n\\tresponse = client.post('/shorten', json={'username': 'test', 'url': 'https://www.google.com'})\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert 'message' in data\\n\\tassert 'short_url' in data\\n\\tassert data['message'] == 'URL shortened successfully'\\n\\n\\ndef test_redirect(client):\\n\\tresponse = client.post('/shorten', json={'username': 'test', 'url': 'https://www.google.com'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_analytics(client):\\n\\tresponse = client.get('/analytics', json={'username': 'test'})\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert isinstance(data, dict)\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710011243, "id": "chatcmpl-90wKR5BFk9Xev7ptdtE7zwCLxffBQ", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1141, "prompt_tokens": 1393, "total_tokens": 2534}}]