[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tcustom_short = data.get('custom')\\n\\tusername = data.get('username')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\t# For simplicity, we'll just check if it starts with http\\n\\tif not original_url.startswith('http'):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Check if custom short URL is available\\n\\tif custom_short and custom_short in urls:\\n\\t\\treturn jsonify({'error': 'Custom short URL is already in use'}), 400\\n\\n\\t# Generate a random short URL if no custom one is provided\\n\\tshort_url = custom_short or ''.join(random.choices(string.ascii_letters + string.digits, k=5))\\n\\n\\t# Create URL object and store in database\\n\\turl = URL(original=original_url, short=short_url, user=username, clicks=0, click_data=[], expiration=datetime.strptime(expiration, '%Y-%m-%d %H:%M:%S') if expiration else None)\\n\\turls[short_url] = url\\n\\n\\t# If user is provided, add URL to user's list of URLs\\n\\tif username:\\n\\t\\tif username in users:\\n\\t\\t\\tusers[username].urls.append(url)\\n\\t\\telse:\\n\\t\\t\\treturn jsonify({'error': 'User not found'}), 400\\n\\n\\treturn jsonify({'short_url': short_url}), 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_original(short_url):\\n\\t# Get URL from database\\n\\turl = urls.get(short_url)\\n\\n\\t# If URL is not found or has expired, return an error\\n\\tif not url or (url.expiration and url.expiration < datetime.now()):\\n\\t\\treturn jsonify({'error': 'URL not found or has expired'}), 404\\n\\n\\t# Increment click count and add click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'time': datetime.now().isoformat(), 'location': request.remote_addr})\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef get_analytics():\\n\\tusername = request.args.get('username')\\n\\n\\t# If username is provided, get analytics for that user's URLs\\n\\tif username:\\n\\t\\tif username in users:\\n\\t\\t\\tuser_urls = users[username].urls\\n\\t\\t\\treturn jsonify({'urls': [{\\n\\t\\t\\t\\t'original': url.original,\\n\\t\\t\\t\\t'short': url.short,\\n\\t\\t\\t\\t'clicks': url.clicks,\\n\\t\\t\\t\\t'click_data': url.click_data\\n\\t\\t\\t} for url in user_urls]}), 200\\n\\t\\telse:\\n\\t\\t\\treturn jsonify({'error': 'User not found'}), 400\\n\\n\\t# If no username is provided, get analytics for all URLs\\n\\treturn jsonify({'urls': [{\\n\\t\\t'original': url.original,\\n\\t\\t'short': url.short,\\n\\t\\t'clicks': url.clicks,\\n\\t\\t'click_data': url.click_data\\n\\t} for url in urls.values()]}), 200\\n\\n@app.route('/users', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\n\\t# Check if username is already in use\\n\\tif username in users:\\n\\t\\treturn jsonify({'error': 'Username is already in use'}), 400\\n\\n\\t# Create user and store in database\\n\\tuser = User(username=username, password=password, urls=[])\\n\\tusers[username] = user\\n\\n\\treturn jsonify({'message': 'User created successfully'}), 200\\n\\n@app.route('/users/<username>', methods=['GET'])\\ndef get_user(username):\\n\\t# Get user from database\\n\\tuser = users.get(username)\\n\\n\\t# If user is not found, return an error\\n\\tif not user:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\n\\t# Return user data\\n\\treturn jsonify({'username': user.username, 'urls': [{'original': url.original, 'short': url.short} for url in user.urls]}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\t# Reset mock database after each test\\n\\t\\tapp.urls = {}\\n\\t\\tapp.users = {}\\n\\ndef test_shorten_url(client):\\n\\t# Test URL shortening\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com'})\\n\\tassert response.status_code == 200\\n\\tassert 'short_url' in json.loads(response.data)\\n\\n\\t# Test custom short URL\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com', 'custom': 'custom'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['short_url'] == 'custom'\\n\\n\\t# Test custom short URL already in use\\n\\tresponse = client.post('/shorten', json={'url': 'http://example.com', 'custom': 'custom'})\\n\\tassert response.status_code == 400\\n\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid'})\\n\\tassert response.status_code == 400\\n\\ndef test_redirect_to_original(client):\\n\\t# Test redirect to original URL\\n\\tclient.post('/shorten', json={'url': 'http://example.com', 'custom': 'custom'})\\n\\tresponse = client.get('/custom')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'http://example.com'\\n\\n\\t# Test URL not found\\n\\tresponse = client.get('/notfound')\\n\\tassert response.status_code == 404\\n\\ndef test_get_analytics(client):\\n\\t# Test get analytics\\n\\tclient.post('/shorten', json={'url': 'http://example.com', 'custom': 'custom'})\\n\\tclient.get('/custom')\\n\\tresponse = client.get('/analytics')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['urls'][0]['clicks'] == 1\\n\\ndef test_create_user(client):\\n\\t# Test create user\\n\\tresponse = client.post('/users', json={'username': 'user', 'password': 'pass'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['message'] == 'User created successfully'\\n\\n\\t# Test username already in use\\n\\tresponse = client.post('/users', json={'username': 'user', 'password': 'pass'})\\n\\tassert response.status_code == 400\\n\\ndef test_get_user(client):\\n\\t# Test get user\\n\\tclient.post('/users', json={'username': 'user', 'password': 'pass'})\\n\\tresponse = client.get('/users/user')\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['username'] == 'user'\\n\\n\\t# Test user not found\\n\\tresponse = client.get('/users/notfound')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709994265, "id": "chatcmpl-90rubedYjLlxDPppz5r8LJ5eFysXy", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1822, "prompt_tokens": 1393, "total_tokens": 3215}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "\n{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=shortened_url, clicks=0, click_data=[], expiration=expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\t\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<shortened>', methods=['GET'])\\ndef get_analytics(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Return analytics data\\n\\treturn jsonify({'data': url}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.invalidurl.com', 'invalid', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.google.com', 'goog', (datetime.now() - timedelta(days=1)).isoformat())\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': url, 'shortened': shortened, 'expiration': expiration}), content_type='application/json')\\n\\tdata = json.loads(response.data)\\n\\t\\n\\tif 'www.invalidurl.com' in url:\\n\\t\\tassert response.status_code == 400\\n\\t\\tassert 'error' in data\\n\\telif 'www.google.com' in url and 'goog' in shortened:\\n\\t\\tif datetime.fromisoformat(expiration) < datetime.now():\\n\\t\\t\\tassert response.status_code == 400\\n\\t\\t\\tassert 'error' in data\\n\\t\\telse:\\n\\t\\t\\tassert response.status_code == 200\\n\\t\\t\\tassert 'data' in data\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'invalid'])\\ndef test_redirect_url(client, reset_db, shortened):\\n\\tapp.DB['goog'] = app.URL(original='https://www.google.com', shortened='goog', clicks=0, click_data=[], expiration=(datetime.now() + timedelta(days=1)))\\n\\tresponse = client.get(f'/{shortened}')\\n\\tdata = json.loads(response.data)\\n\\t\\n\\tif 'goog' in shortened:\\n\\t\\tassert response.status_code == 302\\n\\telse:\\n\\t\\tassert response.status_code == 404\\n\\t\\tassert 'error' in data\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'invalid'])\\ndef test_get_analytics(client, reset_db, shortened):\\n\\tapp.DB['goog'] = app.URL(original='https://www.google.com', shortened='goog', clicks=0, click_data=[], expiration=(datetime.now() + timedelta(days=1)))\\n\\tresponse = client.get(f'/analytics/{shortened}')\\n\\tdata = json.loads(response.data)\\n\\t\\n\\tif 'goog' in shortened:\\n\\t\\tassert response.status_code == 200\\n\\t\\tassert 'data' in data\\n\\telse:\\n\\t\\tassert response.status_code == 404\\n\\t\\tassert 'error' in data\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709994335, "id": "chatcmpl-90rvjUPb7sAmsbra1tGQ4AU6yysdV", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1226, "prompt_tokens": 1393, "total_tokens": 2619}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport uuid\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tuser_id: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser_id = data.get('user_id')\\n\\texpiration = data.get('expiration')\\n\\tshortened_url = str(uuid.uuid4())[:8]\\n\\turl = URL(original_url, shortened_url, user_id, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\treturn jsonify({'shortened_url': shortened_url}), 201\\n\\n@app.route('/<shortened_url>', methods=['GET'])\\ndef redirect_url(shortened_url):\\n\\turl = DB.get(shortened_url)\\n\\tif url and (not url.expiration or url.expiration > datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\turl.click_data.append({'click_time': datetime.now().isoformat()})\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user_id': '123', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'shortened_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': 'https://www.google.com', 'user_id': '123', 'expiration': '2022-12-31T23:59:59'}), content_type='application/json')\\n\\tshortened_url = response.get_json()['shortened_url']\\n\\tresponse = client.get(f'/{shortened_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'https://www.google.com'\\n\\n\\ndef test_redirect_url_not_found_or_expired(client):\\n\\tresponse = client.get('/invalid')\\n\\tassert response.status_code == 404\\n\\tassert 'error' in response.get_json()\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709994372, "id": "chatcmpl-90rwKMDnmUohFAC2cZWEWkP33wbIg", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 678, "prompt_tokens": 1393, "total_tokens": 2071}}]