[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\tuser_id: str\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tuser_id = data.get('user_id')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\turl = URL(original_url, short_url, 0, datetime.datetime.now(), None, user_id)\\n\\tDB[short_url] = url\\n\\treturn jsonify({'short_url': short_url}), 201\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_url(short_url):\\n\\turl = DB.get(short_url)\\n\\tif url and (not url.expires_at or url.expires_at > datetime.datetime.now()):\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_url():\\n\\treturn app.URL('https://www.google.com', 'ABCDE', 0, datetime.datetime.now(), None, 'user1')\\n\\ndef test_shorten_url(client, sample_url):\\n\\tresponse = client.post('/shorten', json={'url': sample_url.original, 'user_id': sample_url.user_id})\\n\\tassert response.status_code == 201\\n\\tassert 'short_url' in response.get_json()\\n\\ndef test_redirect_to_url(client, sample_url):\\n\\tapp.DB[sample_url.short] = sample_url\\n\\tresponse = client.get(f'/{sample_url.short}')\\n\\tassert response.status_code == 302\\n\\tassert app.DB[sample_url.short].clicks == 1\\n\\n\\texpired_url = app.URL('https://www.expired.com', 'EXPIR', 0, datetime.datetime.now(), datetime.datetime.now() - datetime.timedelta(days=1), 'user2')\\n\\tapp.DB[expired_url.short] = expired_url\\n\\tresponse = client.get(f'/{expired_url.short}')\\n\\tassert response.status_code == 404\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710025203, "id": "chatcmpl-90zxbY6Lhvf6jyTu0xE2bNSlReU7I", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 656, "prompt_tokens": 1393, "total_tokens": 2049}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\t# Check if URL has expired\\n\\tif datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL has expired'}), 400\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<shortened>', methods=['GET'])\\ndef get_analytics(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\treturn jsonify({'data': url}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport json\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.facebook.com', 'fb', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.twitter.com', 'tw', (datetime.now() + timedelta(days=1)).isoformat())\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': url, 'shortened': shortened, 'expiration': expiration}), content_type='application/json')\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['data']['original'] == url\\n\\tassert response.get_json()['data']['shortened'] == shortened\\n\\n\\t# Test redirection\\n\\tresponse = client.get('/' + shortened)\\n\\tassert response.status_code == 302\\n\\tassert response.location == url\\n\\n\\t# Test analytics\\n\\tresponse = client.get('/analytics/' + shortened)\\n\\tassert response.status_code == 200\\n\\tassert response.get_json()['data']['clicks'] == 1\\n\\n\\t# Test expiration\\n\\tapp.DB[shortened].expiration = datetime.now() - timedelta(minutes=1)\\n\\tresponse = client.get('/' + shortened)\\n\\tassert response.status_code == 400\\n\\tassert response.get_json()['error'] == 'URL has expired'\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710025223, "id": "chatcmpl-90zxvYI5zoA3BmWoXImPdvWSMpgLX", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 963, "prompt_tokens": 1393, "total_tokens": 2356}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nusers = {}\\nurls = {}\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: dict\\n\\n@dataclass\\nclass URL:\\n\\toriginal_url: str\\n\\tshort_url: str\\n\\tuser: str\\n\\tclicks: list\\n\\texpiration_date: datetime\\n\\n@app.route('/register', methods=['POST'])\\ndef register():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username in users:\\n\\t\\treturn jsonify({'message': 'Username already exists'}), 400\\n\\tusers[username] = User(username, password, {})\\n\\treturn jsonify({'message': 'User registered successfully'}), 200\\n\\n@app.route('/login', methods=['POST'])\\ndef login():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tpassword = data['password']\\n\\tif username not in users or users[username].password != password:\\n\\t\\treturn jsonify({'message': 'Invalid username or password'}), 400\\n\\treturn jsonify({'message': 'Logged in successfully'}), 200\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten():\\n\\tdata = request.get_json()\\n\\toriginal_url = data['original_url']\\n\\tusername = data.get('username')\\n\\tshort_url = ''.join(random.choices(string.ascii_letters + string.digits, k=5))\\n\\texpiration_date = data.get('expiration_date')\\n\\tif expiration_date:\\n\\t\\texpiration_date = datetime.strptime(expiration_date, '%Y-%m-%d %H:%M:%S')\\n\\turls[short_url] = URL(original_url, short_url, username, [], expiration_date)\\n\\tif username:\\n\\t\\tusers[username].urls[short_url] = urls[short_url]\\n\\treturn jsonify({'short_url': short_url}), 200\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_to_original(short_url):\\n\\tif short_url not in urls or (urls[short_url].expiration_date and urls[short_url].expiration_date < datetime.now()):\\n\\t\\treturn jsonify({'message': 'URL not found or expired'}), 404\\n\\turls[short_url].clicks.append((str(datetime.now()), request.remote_addr))\\n\\treturn redirect(urls[short_url].original_url, code=302)\\n\\n@app.route('/analytics', methods=['GET'])\\ndef analytics():\\n\\tdata = request.get_json()\\n\\tusername = data['username']\\n\\tif username not in users:\\n\\t\\treturn jsonify({'message': 'User not found'}), 404\\n\\tuser_urls = users[username].urls\\n\\tanalytics_data = {}\\n\\tfor short_url, url in user_urls.items():\\n\\t\\tanalytics_data[short_url] = {'clicks': len(url.clicks), 'details': url.clicks}\\n\\treturn jsonify(analytics_data), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_register(client):\\n\\tresponse = client.post('/register', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'User registered successfully'}\\n\\n\\ndef test_login(client):\\n\\tresponse = client.post('/login', json={'username': 'test', 'password': 'test'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data) == {'message': 'Logged in successfully'}\\n\\n\\ndef test_shorten(client):\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tassert response.status_code == 200\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tassert len(short_url) == 5\\n\\n\\ndef test_redirect_to_original(client):\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\tassert response.location == 'https://www.google.com'\\n\\n\\ndef test_analytics(client):\\n\\tresponse = client.post('/register', json={'username': 'test2', 'password': 'test2'})\\n\\tresponse = client.post('/shorten', json={'original_url': 'https://www.google.com', 'username': 'test2'})\\n\\tshort_url = json.loads(response.data)['short_url']\\n\\tresponse = client.get(f'/{short_url}')\\n\\tresponse = client.get('/analytics', json={'username': 'test2'})\\n\\tassert response.status_code == 200\\n\\tdata = json.loads(response.data)\\n\\tassert data[short_url]['clicks'] == 1\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1710025252, "id": "chatcmpl-90zyO5zrFmj97msacrm7JhYsqkLwh", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 1217, "prompt_tokens": 1393, "total_tokens": 2610}}]