[{"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, redirect, jsonify\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tif response.status_code != 200:\\n\\t\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\texcept:\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\n\\t# Create URL object and store in DB\\n\\turl = URL(original_url, shortened_url, 0, [], expiration)\\n\\tDB[shortened_url] = url\\n\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 200\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\n\\t# Redirect to original URL\\n\\treturn redirect(url.original, code=302)\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n\\ndef test_shorten_url(client):\\n\\t# Test valid URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.google.com', 'shortened': 'ggl'})\\n\\tassert response.status_code == 200\\n\\tassert json.loads(response.data)['data']['original'] == 'https://www.google.com'\\n\\tassert json.loads(response.data)['data']['shortened'] == 'ggl'\\n\\n\\t# Test invalid URL\\n\\tresponse = client.post('/shorten', json={'url': 'invalid_url', 'shortened': 'inv'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data)['error'] == 'Invalid URL'\\n\\n\\t# Test duplicate shortened URL\\n\\tresponse = client.post('/shorten', json={'url': 'https://www.duckduckgo.com', 'shortened': 'ggl'})\\n\\tassert response.status_code == 400\\n\\tassert json.loads(response.data)['error'] == 'Shortened URL already in use'\\n\\n\\ndef test_redirect_url(client):\\n\\t# Test valid shortened URL\\n\\tresponse = client.get('/ggl')\\n\\tassert response.status_code == 302\\n\\n\\t# Test invalid shortened URL\\n\\tresponse = client.get('/inv')\\n\\tassert response.status_code == 404\\n\\tassert json.loads(response.data)['error'] == 'URL not found'\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709976037, "id": "chatcmpl-90nAbIt8bn3wdEwy7hZbKn1fVIdKN", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 785, "prompt_tokens": 1393, "total_tokens": 2178}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nfrom datetime import datetime\\nimport requests\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nDB = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshortened: str\\n\\tclicks: int\\n\\tclick_data: list\\n\\texpiration: datetime\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshortened_url = data.get('shortened')\\n\\texpiration = data.get('expiration')\\n\\t\\n\\t# Validate URL\\n\\ttry:\\n\\t\\tresponse = requests.get(original_url)\\n\\t\\tresponse.raise_for_status()\\n\\texcept (requests.RequestException, ValueError):\\n\\t\\treturn jsonify({'error': 'Invalid URL'}), 400\\n\\t\\n\\t# Check if shortened URL is available\\n\\tif shortened_url in DB:\\n\\t\\treturn jsonify({'error': 'Shortened URL already in use'}), 400\\n\\t\\n\\t# Create URL object and store in DB\\n\\turl = URL(original=original_url, shortened=shortened_url, clicks=0, click_data=[], expiration=expiration)\\n\\tDB[shortened_url] = url\\n\\t\\n\\treturn jsonify({'message': 'URL shortened successfully', 'data': url}), 201\\n\\n@app.route('/<shortened>', methods=['GET'])\\ndef redirect_url(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists and has not expired\\n\\tif not url or datetime.now() > url.expiration:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\t\\n\\t# Increment click count and store click data\\n\\turl.clicks += 1\\n\\turl.click_data.append({'timestamp': datetime.now().isoformat()})\\n\\t\\n\\treturn redirect(url.original, code=302)\\n\\n@app.route('/analytics/<shortened>', methods=['GET'])\\ndef get_analytics(shortened):\\n\\turl = DB.get(shortened)\\n\\t\\n\\t# Check if URL exists\\n\\tif not url:\\n\\t\\treturn jsonify({'error': 'URL not found'}), 404\\n\\t\\n\\treturn jsonify({'data': url}), 200\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nfrom flask import json\\nfrom datetime import datetime, timedelta\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef reset_db():\\n\\tapp.DB = {}\\n\\n@pytest.mark.parametrize('url, shortened, expiration', [\\n\\t('https://www.google.com', 'goog', (datetime.now() + timedelta(days=1)).isoformat()),\\n\\t('https://www.example.com', 'exmpl', (datetime.now() + timedelta(days=1)).isoformat())\\n])\\ndef test_shorten_url(client, reset_db, url, shortened, expiration):\\n\\tresponse = client.post('/shorten', data=json.dumps({'url': url, 'shortened': shortened, 'expiration': expiration}), content_type='application/json')\\n\\tassert response.status_code == 201\\n\\tassert 'URL shortened successfully' in response.get_data(as_text=True)\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'exmpl'])\\ndef test_redirect_url(client, reset_db, shortened):\\n\\tresponse = client.get(f'/{shortened}')\\n\\tassert response.status_code == 302\\n\\n@pytest.mark.parametrize('shortened', ['goog', 'exmpl'])\\ndef test_get_analytics(client, reset_db, shortened):\\n\\tresponse = client.get(f'/analytics/{shortened}')\\n\\tassert response.status_code == 200\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709976060, "id": "chatcmpl-90nAy01oJtF5gHccrYbQxmhBL5JcU", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 889, "prompt_tokens": 1393, "total_tokens": 2282}}, {"choices": [{"content_filter_results": {}, "finish_reason": "stop", "index": 0, "message": {"content": null, "function_call": {"arguments": "{\n  \"files_and_contents\": [\n    {\n      \"file_path\": \"app.py\",\n      \"file_contents\": \"from flask import Flask, request, jsonify, redirect\\nfrom dataclasses import dataclass\\nimport datetime\\nimport random\\nimport string\\n\\napp = Flask(__name__)\\n\\n# Mock database\\nurls = {}\\nusers = {}\\n\\n@dataclass\\nclass URL:\\n\\toriginal: str\\n\\tshort: str\\n\\tuser: str\\n\\tclicks: int\\n\\tcreated_at: datetime.datetime\\n\\texpires_at: datetime.datetime\\n\\n@dataclass\\nclass User:\\n\\tusername: str\\n\\tpassword: str\\n\\turls: list\\n\\n@app.route('/shorten', methods=['POST'])\\ndef shorten_url():\\n\\tdata = request.get_json()\\n\\toriginal_url = data.get('url')\\n\\tshort_url = ''.join(random.choices(string.ascii_uppercase + string.digits, k=5))\\n\\tuser = data.get('user')\\n\\texpires_at = data.get('expires_at')\\n\\turl = URL(original_url, short_url, user, 0, datetime.datetime.now(), expires_at)\\n\\turls[short_url] = url\\n\\tif user:\\n\\t\\tusers[user].urls.append(url)\\n\\treturn jsonify({'short_url': short_url})\\n\\n@app.route('/<short_url>', methods=['GET'])\\ndef redirect_url(short_url):\\n\\turl = urls.get(short_url)\\n\\tif url and url.expires_at > datetime.datetime.now():\\n\\t\\turl.clicks += 1\\n\\t\\treturn redirect(url.original, code=302)\\n\\telse:\\n\\t\\treturn jsonify({'error': 'URL not found or expired'}), 404\\n\\n@app.route('/user', methods=['POST'])\\ndef create_user():\\n\\tdata = request.get_json()\\n\\tusername = data.get('username')\\n\\tpassword = data.get('password')\\n\\tuser = User(username, password, [])\\n\\tusers[username] = user\\n\\treturn jsonify({'message': 'User created successfully'}), 201\\n\\n@app.route('/user/<username>/urls', methods=['GET'])\\ndef get_user_urls(username):\\n\\tuser = users.get(username)\\n\\tif user:\\n\\t\\treturn jsonify({'urls': [url.short for url in user.urls]})\\n\\telse:\\n\\t\\treturn jsonify({'error': 'User not found'}), 404\\n\\nif __name__ == '__main__':\\n\\tapp.run(debug=True)\"\n    },\n    {\n      \"file_path\": \"test_app.py\",\n      \"file_contents\": \"import pytest\\nimport app\\nimport datetime\\n\\n@pytest.fixture\\ndef client():\\n\\tapp.app.config['TESTING'] = True\\n\\twith app.app.test_client() as client:\\n\\t\\tyield client\\n\\n@pytest.fixture\\ndef sample_data():\\n\\treturn {'url': 'https://www.google.com', 'user': 'test', 'expires_at': datetime.datetime.now() + datetime.timedelta(days=1)}\\n\\n@pytest.fixture\\ndef sample_user():\\n\\treturn {'username': 'test', 'password': 'password'}\\n\\n\\ndef test_shorten_url(client, sample_data):\\n\\tresponse = client.post('/shorten', json=sample_data)\\n\\tassert response.status_code == 200\\n\\tassert 'short_url' in response.get_json()\\n\\n\\ndef test_redirect_url(client, sample_data):\\n\\tresponse = client.post('/shorten', json=sample_data)\\n\\tshort_url = response.get_json().get('short_url')\\n\\tresponse = client.get(f'/{short_url}')\\n\\tassert response.status_code == 302\\n\\n\\ndef test_create_user(client, sample_user):\\n\\tresponse = client.post('/user', json=sample_user)\\n\\tassert response.status_code == 201\\n\\tassert 'message' in response.get_json()\\n\\n\\ndef test_get_user_urls(client, sample_data, sample_user):\\n\\tclient.post('/user', json=sample_user)\\n\\tclient.post('/shorten', json=sample_data)\\n\\tresponse = client.get('/user/test/urls')\\n\\tassert response.status_code == 200\\n\\tassert 'urls' in response.get_json()\"\n    }\n  ]\n}", "name": "write_files"}, "role": "assistant"}}], "created": 1709976086, "id": "chatcmpl-90nBO5IAfbw3yY0XYxGivuBDCdkMh", "model": "gpt-4", "object": "chat.completion", "prompt_filter_results": [{"prompt_index": 0, "content_filter_results": {"hate": {"filtered": false, "severity": "safe"}, "self_harm": {"filtered": false, "severity": "safe"}, "sexual": {"filtered": false, "severity": "safe"}, "violence": {"filtered": false, "severity": "safe"}}}], "system_fingerprint": null, "usage": {"completion_tokens": 917, "prompt_tokens": 1393, "total_tokens": 2310}}]