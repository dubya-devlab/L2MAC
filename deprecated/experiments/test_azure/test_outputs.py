print('''"Steps:\n\n1. Import the dataset\n2. Analyze the dataset\n3. Visualize the dataset\n4. Clean the dataset\n5. Transform the dataset\n6. Select and train a model\n7. Fine-tune your model\n8. Present your solution\n9. Launch, monitor and maintain your system\n\n# To do:\n1. Import the dataset\n2. Analyze the dataset\n3. Visualize the dataset\n4. Clean the dataset\n5. Transform the dataset\n6. Select and train a model\n7. Fine-tune your model\n8. Present your solution\n9. Launch, monitor and maintain your system\n\n# Prompt\n1. Import the dataset\n- Import the dataset\n- Split the dataset into training and testing dataset\n- Load the training dataset\n- Display the first 5 rows of the training dataset\n- Display the last 5 rows of the training dataset\n- Load the testing dataset\n- Display the first 5 rows of the testing dataset\n- Display the last 5 rows of the testing dataset\n\n2. Analyze the dataset\n- Analyze the training dataset\n- Analyze the testing dataset\n- Analyze the correlation between the features and the target variable\n\n3. Visualize the dataset\n- Visualize the training dataset\n- Visualize the testing dataset\n\n4. Clean the dataset\n- Remove unnecessary columns\n- Check for missing values\n- Fill in missing values\n- Check for outliers\n- Remove outliers\n\n5. Transform the dataset\n- Convert categorical features to numerical features\n- Scale the features\n\n6. Select and train a model\n- Select a model\n- Train the model\n- Evaluate the model\n\n7. Fine-tune your model\n- Fine-tune the model\n- Evaluate the model\n\n8. Present your solution\n- Present your solution\n\n9. Launch, monitor and maintain your system\n- Launch your system\n- Monitor your system\n- Maintain your system\n\n\"\"\"\n\n# Step 1: Import the dataset\n# Import the dataset\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ntrain_data = pd.read_csv(\"./data/titanic/train.csv\")\ntest_data = pd.read_csv(\"./data/titanic/test.csv\")\n\n# Split the dataset into training and testing dataset\nfrom sklearn.model_selection import train_test_split\n\ntrain_set, test_set = train_test_split(train_data, test_size=0.2, random_state=42)\n\n# Load the training dataset\ntrain_set.head()\n\n# Display the first 5 rows of the training dataset\ntrain_set.head()\n\n# Display the last 5 rows of the training dataset\ntrain_set.tail()\n\n# Load the testing dataset\ntest_set.head()\n\n# Display the first 5 rows of the testing dataset\ntest_set.head()\n\n# Display the last 5 rows of the testing dataset\ntest_set.tail()\n\n# Step 2: Analyze the dataset\n# Analyze the training dataset\ntrain_set.info()\n\n# Analyze the testing dataset\ntest_set.info()\n\n# Analyze the correlation between the features and the target variable\ncorr_matrix = train_set.corr()\ncorr_matrix[\"Survived\"].sort_values(ascending=False)\n\n# Step 3: Visualize the dataset\n# Visualize the training dataset\nsns.pairplot(train_set)\n\n# Visualize the testing dataset\nsns.pairplot(test_set)\n\n# Step 4: Clean the dataset\n# Remove unnecessary columns\ntrain_set = train_set.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)\ntest_set = test_set.drop([\"Name\", \"Ticket\", \"Cabin\"], axis=1)\n\n# Check for missing values\ntrain_set.isnull().sum()\n\n# Fill in missing values\ntrain_set[\"Age\"].fillna(train_set[\"Age\"].median(), inplace=True)\ntrain_set[\"Embarked\"].fillna(train_set[\"Embarked\"].mode()[0], inplace=True)\n\ntest_set[\"Age\"].fillna(test_set[\"Age\"].median(), inplace=True)\ntest_set[\"Fare\"].fillna(test_set[\"Fare\"].median(), inplace=True)\n\n# Check for outliers\ntrain_set.boxplot(column=[\"Age\", \"Fare\"])\n\n# Remove outliers\ntrain_set = train_set[train_set[\"Age\"] < 80]\ntrain_set = train_set[train_set[\"Fare\"] < 200]\n\n# Step 5: Transform the dataset\n# Convert categorical features to numerical features\ntrain_set = pd.get_dummies(train_set, columns=[\"Sex\", \"Embarked\"])\ntest_set = pd.get_dummies(test_set, columns=[\"Sex\", \"Embarked\"])\n\n# Scale the features\nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n\ntrain_set[[\"Age\", \"Fare\"]] = scaler.fit_transform(train_set[[\"Age\", \"Fare\"]])\ntest_set[[\"Age\", \"Fare\"]] = scaler.transform(test_set["''')
